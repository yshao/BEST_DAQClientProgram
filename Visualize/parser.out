Created by PLY version 3.3 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> top
Rule 1     top -> <empty>
Rule 2     top -> stmt_list
Rule 3     top -> top func_decl stmt_list_opt
Rule 4     top -> top func_decl stmt_list END_STMT semi_opt
Rule 5     semi_opt -> <empty>
Rule 6     semi_opt -> semi_opt SEMI
Rule 7     semi_opt -> semi_opt COMMA
Rule 8     stmt -> continue_stmt
Rule 9     stmt -> break_stmt
Rule 10    stmt -> expr_stmt
Rule 11    stmt -> global_stmt
Rule 12    stmt -> persistent_stmt
Rule 13    stmt -> command
Rule 14    stmt -> for_stmt
Rule 15    stmt -> if_stmt
Rule 16    stmt -> null_stmt
Rule 17    stmt -> return_stmt
Rule 18    stmt -> switch_stmt
Rule 19    stmt -> try_catch
Rule 20    stmt -> while_stmt
Rule 21    stmt -> unwind
Rule 22    unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
Rule 23    arg1 -> STRING
Rule 24    arg1 -> NUMBER
Rule 25    arg1 -> IDENT
Rule 26    arg1 -> GLOBAL
Rule 27    args -> arg1
Rule 28    args -> args arg1
Rule 29    command -> ident args SEMI
Rule 30    global_list -> ident
Rule 31    global_list -> global_list ident
Rule 32    global_stmt -> GLOBAL global_list SEMI
Rule 33    persistent_stmt -> PERSISTENT expr SEMI
Rule 34    return_stmt -> RETURN SEMI
Rule 35    continue_stmt -> CONTINUE SEMI
Rule 36    break_stmt -> BREAK SEMI
Rule 37    switch_stmt -> SWITCH expr semi_opt case_list END_STMT
Rule 38    case_list -> <empty>
Rule 39    case_list -> CASE expr sep stmt_list_opt case_list
Rule 40    case_list -> OTHERWISE stmt_list
Rule 41    try_catch -> TRY stmt_list CATCH stmt_list END_STMT
Rule 42    try_catch -> TRY stmt_list END_STMT
Rule 43    null_stmt -> SEMI
Rule 44    null_stmt -> COMMA
Rule 45    func_decl -> FUNCTION ident args_opt SEMI
Rule 46    func_decl -> FUNCTION ret EQ ident args_opt SEMI
Rule 47    args_opt -> <empty>
Rule 48    args_opt -> LPAREN RPAREN
Rule 49    args_opt -> LPAREN expr_list RPAREN
Rule 50    arg_list -> ident
Rule 51    arg_list -> arg_list COMMA ident
Rule 52    ret -> ident
Rule 53    ret -> LBRACKET RBRACKET
Rule 54    ret -> LBRACKET expr_list RBRACKET
Rule 55    stmt_list_opt -> <empty>
Rule 56    stmt_list_opt -> stmt_list
Rule 57    stmt_list -> stmt
Rule 58    stmt_list -> stmt_list stmt
Rule 59    concat_list -> expr_list SEMI expr_list
Rule 60    concat_list -> concat_list SEMI expr_list
Rule 61    expr_list -> exprs
Rule 62    expr_list -> exprs COMMA
Rule 63    exprs -> expr
Rule 64    exprs -> exprs COMMA expr
Rule 65    expr_stmt -> expr_list SEMI
Rule 66    while_stmt -> WHILE expr SEMI stmt_list END_STMT
Rule 67    sep -> COMMA
Rule 68    sep -> SEMI
Rule 69    if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT
Rule 70    if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT
Rule 71    elseif_stmt -> <empty>
Rule 72    elseif_stmt -> ELSE stmt_list_opt
Rule 73    elseif_stmt -> ELSEIF expr sep stmt_list_opt elseif_stmt
Rule 74    for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT
Rule 75    for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
Rule 76    for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT
Rule 77    expr -> ident
Rule 78    expr -> end
Rule 79    expr -> number
Rule 80    expr -> string
Rule 81    expr -> colon
Rule 82    expr -> NEG
Rule 83    expr -> matrix
Rule 84    expr -> cellarray
Rule 85    expr -> expr2
Rule 86    expr -> expr1
Rule 87    expr -> lambda_expr
Rule 88    expr -> ident PLUSPLUS
Rule 89    expr -> ident MINUSMINUS
Rule 90    lambda_args -> LPAREN RPAREN
Rule 91    lambda_args -> LPAREN arg_list RPAREN
Rule 92    lambda_expr -> HANDLE lambda_args expr
Rule 93    ident -> IDENT
Rule 94    number -> NUMBER
Rule 95    end -> END_EXPR
Rule 96    string -> STRING
Rule 97    colon -> COLON
Rule 98    expr1 -> MINUS expr
Rule 99    expr1 -> PLUS expr
Rule 100   expr1 -> NEG expr
Rule 101   expr1 -> HANDLE ident
Rule 102   expr1 -> PLUSPLUS ident
Rule 103   expr1 -> MINUSMINUS ident
Rule 104   cellarray -> LBRACE RBRACE
Rule 105   cellarray -> LBRACE expr_list RBRACE
Rule 106   matrix -> LBRACKET RBRACKET
Rule 107   matrix -> LBRACKET concat_list RBRACKET
Rule 108   matrix -> LBRACKET concat_list SEMI RBRACKET
Rule 109   matrix -> LBRACKET expr_list RBRACKET
Rule 110   matrix -> LBRACKET expr_list SEMI RBRACKET
Rule 111   expr -> LPAREN expr RPAREN
Rule 112   expr -> expr FIELD
Rule 113   expr -> expr TRANSPOSE
Rule 114   expr -> expr LBRACE expr_list RBRACE
Rule 115   expr -> expr LBRACE RBRACE
Rule 116   expr -> expr LPAREN expr_list RPAREN
Rule 117   expr -> expr LPAREN RPAREN
Rule 118   expr2 -> expr AND expr
Rule 119   expr2 -> expr ANDAND expr
Rule 120   expr2 -> expr BACKSLASH expr
Rule 121   expr2 -> expr COLON expr
Rule 122   expr2 -> expr DIV expr
Rule 123   expr2 -> expr DOT expr
Rule 124   expr2 -> expr DOTDIV expr
Rule 125   expr2 -> expr DOTEXP expr
Rule 126   expr2 -> expr DOTMUL expr
Rule 127   expr2 -> expr DOTMULEQ expr
Rule 128   expr2 -> expr EQEQ expr
Rule 129   expr2 -> expr EXP expr
Rule 130   expr2 -> expr GE expr
Rule 131   expr2 -> expr GT expr
Rule 132   expr2 -> expr LE expr
Rule 133   expr2 -> expr LT expr
Rule 134   expr2 -> expr MINUS expr
Rule 135   expr2 -> expr MUL expr
Rule 136   expr2 -> expr NE expr
Rule 137   expr2 -> expr OR expr
Rule 138   expr2 -> expr OROR expr
Rule 139   expr2 -> expr PLUS expr
Rule 140   expr2 -> expr EQ expr
Rule 141   expr2 -> expr MULEQ expr
Rule 142   expr2 -> expr DIVEQ expr
Rule 143   expr2 -> expr MINUSEQ expr
Rule 144   expr2 -> expr PLUSEQ expr
Rule 145   expr2 -> expr OREQ expr
Rule 146   expr2 -> expr ANDEQ expr

Terminals, with rules where they appear

AND                  : 118
ANDAND               : 119
ANDEQ                : 146
BACKSLASH            : 120
BREAK                : 36
CASE                 : 39
CATCH                : 41
COLON                : 97 121
COMMA                : 7 44 51 62 64 67
CONTINUE             : 35
DIV                  : 122
DIVEQ                : 142
DOT                  : 123
DOTDIV               : 124
DOTEXP               : 125
DOTMUL               : 126
DOTMULEQ             : 127
ELSE                 : 72
ELSEIF               : 73
END_EXPR             : 95
END_STMT             : 4 37 41 42 66 69 70 74 75 76
END_UNWIND_PROTECT   : 22
EQ                   : 46 74 75 76 140
EQEQ                 : 128
EXP                  : 129
FIELD                : 112
FOR                  : 74 75 76
FUNCTION             : 45 46
GE                   : 130
GLOBAL               : 26 32
GT                   : 131
HANDLE               : 92 101
IDENT                : 25 93
IF                   : 69 70
LBRACE               : 104 105 114 115
LBRACKET             : 53 54 106 107 108 109 110
LE                   : 132
LPAREN               : 48 49 75 90 91 111 116 117
LT                   : 133
MINUS                : 98 134
MINUSEQ              : 143
MINUSMINUS           : 89 103
MUL                  : 135
MULEQ                : 141
NE                   : 136
NEG                  : 82 100
NUMBER               : 24 94
OR                   : 137
OREQ                 : 145
OROR                 : 138
OTHERWISE            : 40
PERSISTENT           : 33
PLUS                 : 99 139
PLUSEQ               : 144
PLUSPLUS             : 88 102
RBRACE               : 104 105 114 115
RBRACKET             : 53 54 106 107 108 109 110
RETURN               : 34
RPAREN               : 48 49 75 90 91 111 116 117
SEMI                 : 6 29 32 33 34 35 36 43 45 46 59 60 65 66 68 74 75 76 108 110
STRING               : 23 96
SWITCH               : 37
TRANSPOSE            : 113
TRY                  : 41 42
UNWIND_PROTECT       : 22
UNWIND_PROTECT_CLEANUP : 22
WHILE                : 66
error                : 70

Nonterminals, with rules where they appear

arg1                 : 27 28
arg_list             : 51 91
args                 : 28 29
args_opt             : 45 46
break_stmt           : 9
case_list            : 37 39
cellarray            : 84
colon                : 81
command              : 13
concat_list          : 60 107 108
continue_stmt        : 8
elseif_stmt          : 69 70 73
end                  : 78
expr                 : 33 37 39 63 64 66 69 70 73 74 75 76 92 98 99 100 111 112 113 114 115 116 117 118 118 119 119 120 120 121 121 122 122 123 123 124 124 125 125 126 126 127 127 128 128 129 129 130 130 131 131 132 132 133 133 134 134 135 135 136 136 137 137 138 138 139 139 140 140 141 141 142 142 143 143 144 144 145 145 146 146
expr1                : 86
expr2                : 85
expr_list            : 49 54 59 59 60 65 105 109 110 114 116
expr_stmt            : 10
exprs                : 61 62 64
for_stmt             : 14
func_decl            : 3 4
global_list          : 31 32
global_stmt          : 11
ident                : 29 30 31 45 46 50 51 52 74 75 77 88 89 101 102 103
if_stmt              : 15
lambda_args          : 92
lambda_expr          : 87
matrix               : 76 83
null_stmt            : 16
number               : 79
persistent_stmt      : 12
ret                  : 46
return_stmt          : 17
semi_opt             : 4 6 7 37
sep                  : 39 69 73
stmt                 : 57 58
stmt_list            : 2 4 22 22 40 41 41 42 56 58 66 74 75 76
stmt_list_opt        : 3 39 69 70 72 73
string               : 80
switch_stmt          : 18
top                  : 3 4 0
try_catch            : 19
unwind               : 21
while_stmt           : 20

Parsing method: LALR

state 0

    (0) S' -> . top
    (1) top -> .
    (2) top -> . stmt_list
    (3) top -> . top func_decl stmt_list_opt
    (4) top -> . top func_decl stmt_list END_STMT semi_opt
    (57) stmt_list -> . stmt
    (58) stmt_list -> . stmt_list stmt
    (8) stmt -> . continue_stmt
    (9) stmt -> . break_stmt
    (10) stmt -> . expr_stmt
    (11) stmt -> . global_stmt
    (12) stmt -> . persistent_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (21) stmt -> . unwind
    (35) continue_stmt -> . CONTINUE SEMI
    (36) break_stmt -> . BREAK SEMI
    (65) expr_stmt -> . expr_list SEMI
    (32) global_stmt -> . GLOBAL global_list SEMI
    (33) persistent_stmt -> . PERSISTENT expr SEMI
    (29) command -> . ident args SEMI
    (74) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (75) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (76) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (69) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (70) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (43) null_stmt -> . SEMI
    (44) null_stmt -> . COMMA
    (34) return_stmt -> . RETURN SEMI
    (37) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (41) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (42) try_catch -> . TRY stmt_list END_STMT
    (66) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (22) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (93) ident -> . IDENT
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    FUNCTION        reduce using rule 1 (top -> .)
    $end            reduce using rule 1 (top -> .)
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 38
    GLOBAL          shift and go to state 25
    PERSISTENT      shift and go to state 36
    FOR             shift and go to state 16
    IF              shift and go to state 51
    SEMI            shift and go to state 44
    COMMA           shift and go to state 46
    RETURN          shift and go to state 11
    SWITCH          shift and go to state 33
    TRY             shift and go to state 19
    WHILE           shift and go to state 27
    UNWIND_PROTECT  shift and go to state 6
    IDENT           shift and go to state 15
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    unwind                         shift and go to state 10
    expr_list                      shift and go to state 12
    number                         shift and go to state 26
    return_stmt                    shift and go to state 28
    switch_stmt                    shift and go to state 29
    break_stmt                     shift and go to state 42
    lambda_expr                    shift and go to state 30
    end                            shift and go to state 43
    matrix                         shift and go to state 13
    continue_stmt                  shift and go to state 31
    top                            shift and go to state 32
    cellarray                      shift and go to state 21
    expr2                          shift and go to state 3
    expr1                          shift and go to state 45
    global_stmt                    shift and go to state 47
    string                         shift and go to state 41
    colon                          shift and go to state 9
    persistent_stmt                shift and go to state 5
    stmt                           shift and go to state 18
    for_stmt                       shift and go to state 53
    expr_stmt                      shift and go to state 7
    stmt_list                      shift and go to state 52
    ident                          shift and go to state 34
    if_stmt                        shift and go to state 8
    expr                           shift and go to state 35
    try_catch                      shift and go to state 37
    exprs                          shift and go to state 54
    while_stmt                     shift and go to state 55
    command                        shift and go to state 56
    null_stmt                      shift and go to state 57

state 1

    (106) matrix -> LBRACKET . RBRACKET
    (107) matrix -> LBRACKET . concat_list RBRACKET
    (108) matrix -> LBRACKET . concat_list SEMI RBRACKET
    (109) matrix -> LBRACKET . expr_list RBRACKET
    (110) matrix -> LBRACKET . expr_list SEMI RBRACKET
    (59) concat_list -> . expr_list SEMI expr_list
    (60) concat_list -> . concat_list SEMI expr_list
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    RBRACKET        shift and go to state 61
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    expr2                          shift and go to state 3
    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr_list                      shift and go to state 58
    number                         shift and go to state 26
    concat_list                    shift and go to state 59
    exprs                          shift and go to state 54
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    expr                           shift and go to state 35
    matrix                         shift and go to state 13

state 2

    (98) expr1 -> MINUS . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 62
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 3

    (85) expr -> expr2 .

    FIELD           reduce using rule 85 (expr -> expr2 .)
    TRANSPOSE       reduce using rule 85 (expr -> expr2 .)
    LBRACE          reduce using rule 85 (expr -> expr2 .)
    LPAREN          reduce using rule 85 (expr -> expr2 .)
    AND             reduce using rule 85 (expr -> expr2 .)
    ANDAND          reduce using rule 85 (expr -> expr2 .)
    BACKSLASH       reduce using rule 85 (expr -> expr2 .)
    COLON           reduce using rule 85 (expr -> expr2 .)
    DIV             reduce using rule 85 (expr -> expr2 .)
    DOT             reduce using rule 85 (expr -> expr2 .)
    DOTDIV          reduce using rule 85 (expr -> expr2 .)
    DOTEXP          reduce using rule 85 (expr -> expr2 .)
    DOTMUL          reduce using rule 85 (expr -> expr2 .)
    DOTMULEQ        reduce using rule 85 (expr -> expr2 .)
    EQEQ            reduce using rule 85 (expr -> expr2 .)
    EXP             reduce using rule 85 (expr -> expr2 .)
    GE              reduce using rule 85 (expr -> expr2 .)
    GT              reduce using rule 85 (expr -> expr2 .)
    LE              reduce using rule 85 (expr -> expr2 .)
    LT              reduce using rule 85 (expr -> expr2 .)
    MINUS           reduce using rule 85 (expr -> expr2 .)
    MUL             reduce using rule 85 (expr -> expr2 .)
    NE              reduce using rule 85 (expr -> expr2 .)
    OR              reduce using rule 85 (expr -> expr2 .)
    OROR            reduce using rule 85 (expr -> expr2 .)
    PLUS            reduce using rule 85 (expr -> expr2 .)
    EQ              reduce using rule 85 (expr -> expr2 .)
    MULEQ           reduce using rule 85 (expr -> expr2 .)
    DIVEQ           reduce using rule 85 (expr -> expr2 .)
    MINUSEQ         reduce using rule 85 (expr -> expr2 .)
    PLUSEQ          reduce using rule 85 (expr -> expr2 .)
    OREQ            reduce using rule 85 (expr -> expr2 .)
    ANDEQ           reduce using rule 85 (expr -> expr2 .)
    COMMA           reduce using rule 85 (expr -> expr2 .)
    SEMI            reduce using rule 85 (expr -> expr2 .)
    RBRACKET        reduce using rule 85 (expr -> expr2 .)
    RBRACE          reduce using rule 85 (expr -> expr2 .)
    CASE            reduce using rule 85 (expr -> expr2 .)
    OTHERWISE       reduce using rule 85 (expr -> expr2 .)
    END_STMT        reduce using rule 85 (expr -> expr2 .)
    RPAREN          reduce using rule 85 (expr -> expr2 .)
    error           reduce using rule 85 (expr -> expr2 .)


state 4

    (99) expr1 -> PLUS . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 63
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 5

    (12) stmt -> persistent_stmt .

    END_STMT        reduce using rule 12 (stmt -> persistent_stmt .)
    CONTINUE        reduce using rule 12 (stmt -> persistent_stmt .)
    BREAK           reduce using rule 12 (stmt -> persistent_stmt .)
    GLOBAL          reduce using rule 12 (stmt -> persistent_stmt .)
    PERSISTENT      reduce using rule 12 (stmt -> persistent_stmt .)
    FOR             reduce using rule 12 (stmt -> persistent_stmt .)
    IF              reduce using rule 12 (stmt -> persistent_stmt .)
    SEMI            reduce using rule 12 (stmt -> persistent_stmt .)
    COMMA           reduce using rule 12 (stmt -> persistent_stmt .)
    RETURN          reduce using rule 12 (stmt -> persistent_stmt .)
    SWITCH          reduce using rule 12 (stmt -> persistent_stmt .)
    TRY             reduce using rule 12 (stmt -> persistent_stmt .)
    WHILE           reduce using rule 12 (stmt -> persistent_stmt .)
    UNWIND_PROTECT  reduce using rule 12 (stmt -> persistent_stmt .)
    IDENT           reduce using rule 12 (stmt -> persistent_stmt .)
    NEG             reduce using rule 12 (stmt -> persistent_stmt .)
    LPAREN          reduce using rule 12 (stmt -> persistent_stmt .)
    END_EXPR        reduce using rule 12 (stmt -> persistent_stmt .)
    NUMBER          reduce using rule 12 (stmt -> persistent_stmt .)
    STRING          reduce using rule 12 (stmt -> persistent_stmt .)
    COLON           reduce using rule 12 (stmt -> persistent_stmt .)
    LBRACKET        reduce using rule 12 (stmt -> persistent_stmt .)
    LBRACE          reduce using rule 12 (stmt -> persistent_stmt .)
    MINUS           reduce using rule 12 (stmt -> persistent_stmt .)
    PLUS            reduce using rule 12 (stmt -> persistent_stmt .)
    HANDLE          reduce using rule 12 (stmt -> persistent_stmt .)
    PLUSPLUS        reduce using rule 12 (stmt -> persistent_stmt .)
    MINUSMINUS      reduce using rule 12 (stmt -> persistent_stmt .)
    UNWIND_PROTECT_CLEANUP reduce using rule 12 (stmt -> persistent_stmt .)
    CASE            reduce using rule 12 (stmt -> persistent_stmt .)
    OTHERWISE       reduce using rule 12 (stmt -> persistent_stmt .)
    CATCH           reduce using rule 12 (stmt -> persistent_stmt .)
    END_UNWIND_PROTECT reduce using rule 12 (stmt -> persistent_stmt .)
    ELSE            reduce using rule 12 (stmt -> persistent_stmt .)
    ELSEIF          reduce using rule 12 (stmt -> persistent_stmt .)
    FUNCTION        reduce using rule 12 (stmt -> persistent_stmt .)
    $end            reduce using rule 12 (stmt -> persistent_stmt .)


state 6

    (22) unwind -> UNWIND_PROTECT . stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (57) stmt_list -> . stmt
    (58) stmt_list -> . stmt_list stmt
    (8) stmt -> . continue_stmt
    (9) stmt -> . break_stmt
    (10) stmt -> . expr_stmt
    (11) stmt -> . global_stmt
    (12) stmt -> . persistent_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (21) stmt -> . unwind
    (35) continue_stmt -> . CONTINUE SEMI
    (36) break_stmt -> . BREAK SEMI
    (65) expr_stmt -> . expr_list SEMI
    (32) global_stmt -> . GLOBAL global_list SEMI
    (33) persistent_stmt -> . PERSISTENT expr SEMI
    (29) command -> . ident args SEMI
    (74) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (75) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (76) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (69) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (70) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (43) null_stmt -> . SEMI
    (44) null_stmt -> . COMMA
    (34) return_stmt -> . RETURN SEMI
    (37) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (41) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (42) try_catch -> . TRY stmt_list END_STMT
    (66) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (22) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (93) ident -> . IDENT
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 38
    GLOBAL          shift and go to state 25
    PERSISTENT      shift and go to state 36
    FOR             shift and go to state 16
    IF              shift and go to state 51
    SEMI            shift and go to state 44
    COMMA           shift and go to state 46
    RETURN          shift and go to state 11
    SWITCH          shift and go to state 33
    TRY             shift and go to state 19
    WHILE           shift and go to state 27
    UNWIND_PROTECT  shift and go to state 6
    IDENT           shift and go to state 15
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    unwind                         shift and go to state 10
    expr_list                      shift and go to state 12
    number                         shift and go to state 26
    return_stmt                    shift and go to state 28
    switch_stmt                    shift and go to state 29
    break_stmt                     shift and go to state 42
    lambda_expr                    shift and go to state 30
    end                            shift and go to state 43
    matrix                         shift and go to state 13
    continue_stmt                  shift and go to state 31
    cellarray                      shift and go to state 21
    expr2                          shift and go to state 3
    expr1                          shift and go to state 45
    global_stmt                    shift and go to state 47
    string                         shift and go to state 41
    colon                          shift and go to state 9
    persistent_stmt                shift and go to state 5
    stmt                           shift and go to state 18
    for_stmt                       shift and go to state 53
    expr_stmt                      shift and go to state 7
    stmt_list                      shift and go to state 64
    ident                          shift and go to state 34
    if_stmt                        shift and go to state 8
    expr                           shift and go to state 35
    try_catch                      shift and go to state 37
    exprs                          shift and go to state 54
    while_stmt                     shift and go to state 55
    command                        shift and go to state 56
    null_stmt                      shift and go to state 57

state 7

    (10) stmt -> expr_stmt .

    END_STMT        reduce using rule 10 (stmt -> expr_stmt .)
    CONTINUE        reduce using rule 10 (stmt -> expr_stmt .)
    BREAK           reduce using rule 10 (stmt -> expr_stmt .)
    GLOBAL          reduce using rule 10 (stmt -> expr_stmt .)
    PERSISTENT      reduce using rule 10 (stmt -> expr_stmt .)
    FOR             reduce using rule 10 (stmt -> expr_stmt .)
    IF              reduce using rule 10 (stmt -> expr_stmt .)
    SEMI            reduce using rule 10 (stmt -> expr_stmt .)
    COMMA           reduce using rule 10 (stmt -> expr_stmt .)
    RETURN          reduce using rule 10 (stmt -> expr_stmt .)
    SWITCH          reduce using rule 10 (stmt -> expr_stmt .)
    TRY             reduce using rule 10 (stmt -> expr_stmt .)
    WHILE           reduce using rule 10 (stmt -> expr_stmt .)
    UNWIND_PROTECT  reduce using rule 10 (stmt -> expr_stmt .)
    IDENT           reduce using rule 10 (stmt -> expr_stmt .)
    NEG             reduce using rule 10 (stmt -> expr_stmt .)
    LPAREN          reduce using rule 10 (stmt -> expr_stmt .)
    END_EXPR        reduce using rule 10 (stmt -> expr_stmt .)
    NUMBER          reduce using rule 10 (stmt -> expr_stmt .)
    STRING          reduce using rule 10 (stmt -> expr_stmt .)
    COLON           reduce using rule 10 (stmt -> expr_stmt .)
    LBRACKET        reduce using rule 10 (stmt -> expr_stmt .)
    LBRACE          reduce using rule 10 (stmt -> expr_stmt .)
    MINUS           reduce using rule 10 (stmt -> expr_stmt .)
    PLUS            reduce using rule 10 (stmt -> expr_stmt .)
    HANDLE          reduce using rule 10 (stmt -> expr_stmt .)
    PLUSPLUS        reduce using rule 10 (stmt -> expr_stmt .)
    MINUSMINUS      reduce using rule 10 (stmt -> expr_stmt .)
    UNWIND_PROTECT_CLEANUP reduce using rule 10 (stmt -> expr_stmt .)
    CASE            reduce using rule 10 (stmt -> expr_stmt .)
    OTHERWISE       reduce using rule 10 (stmt -> expr_stmt .)
    CATCH           reduce using rule 10 (stmt -> expr_stmt .)
    END_UNWIND_PROTECT reduce using rule 10 (stmt -> expr_stmt .)
    ELSE            reduce using rule 10 (stmt -> expr_stmt .)
    ELSEIF          reduce using rule 10 (stmt -> expr_stmt .)
    FUNCTION        reduce using rule 10 (stmt -> expr_stmt .)
    $end            reduce using rule 10 (stmt -> expr_stmt .)


state 8

    (15) stmt -> if_stmt .

    END_STMT        reduce using rule 15 (stmt -> if_stmt .)
    CONTINUE        reduce using rule 15 (stmt -> if_stmt .)
    BREAK           reduce using rule 15 (stmt -> if_stmt .)
    GLOBAL          reduce using rule 15 (stmt -> if_stmt .)
    PERSISTENT      reduce using rule 15 (stmt -> if_stmt .)
    FOR             reduce using rule 15 (stmt -> if_stmt .)
    IF              reduce using rule 15 (stmt -> if_stmt .)
    SEMI            reduce using rule 15 (stmt -> if_stmt .)
    COMMA           reduce using rule 15 (stmt -> if_stmt .)
    RETURN          reduce using rule 15 (stmt -> if_stmt .)
    SWITCH          reduce using rule 15 (stmt -> if_stmt .)
    TRY             reduce using rule 15 (stmt -> if_stmt .)
    WHILE           reduce using rule 15 (stmt -> if_stmt .)
    UNWIND_PROTECT  reduce using rule 15 (stmt -> if_stmt .)
    IDENT           reduce using rule 15 (stmt -> if_stmt .)
    NEG             reduce using rule 15 (stmt -> if_stmt .)
    LPAREN          reduce using rule 15 (stmt -> if_stmt .)
    END_EXPR        reduce using rule 15 (stmt -> if_stmt .)
    NUMBER          reduce using rule 15 (stmt -> if_stmt .)
    STRING          reduce using rule 15 (stmt -> if_stmt .)
    COLON           reduce using rule 15 (stmt -> if_stmt .)
    LBRACKET        reduce using rule 15 (stmt -> if_stmt .)
    LBRACE          reduce using rule 15 (stmt -> if_stmt .)
    MINUS           reduce using rule 15 (stmt -> if_stmt .)
    PLUS            reduce using rule 15 (stmt -> if_stmt .)
    HANDLE          reduce using rule 15 (stmt -> if_stmt .)
    PLUSPLUS        reduce using rule 15 (stmt -> if_stmt .)
    MINUSMINUS      reduce using rule 15 (stmt -> if_stmt .)
    UNWIND_PROTECT_CLEANUP reduce using rule 15 (stmt -> if_stmt .)
    CASE            reduce using rule 15 (stmt -> if_stmt .)
    OTHERWISE       reduce using rule 15 (stmt -> if_stmt .)
    CATCH           reduce using rule 15 (stmt -> if_stmt .)
    END_UNWIND_PROTECT reduce using rule 15 (stmt -> if_stmt .)
    ELSE            reduce using rule 15 (stmt -> if_stmt .)
    ELSEIF          reduce using rule 15 (stmt -> if_stmt .)
    FUNCTION        reduce using rule 15 (stmt -> if_stmt .)
    $end            reduce using rule 15 (stmt -> if_stmt .)


state 9

    (81) expr -> colon .

    FIELD           reduce using rule 81 (expr -> colon .)
    TRANSPOSE       reduce using rule 81 (expr -> colon .)
    LBRACE          reduce using rule 81 (expr -> colon .)
    LPAREN          reduce using rule 81 (expr -> colon .)
    AND             reduce using rule 81 (expr -> colon .)
    ANDAND          reduce using rule 81 (expr -> colon .)
    BACKSLASH       reduce using rule 81 (expr -> colon .)
    COLON           reduce using rule 81 (expr -> colon .)
    DIV             reduce using rule 81 (expr -> colon .)
    DOT             reduce using rule 81 (expr -> colon .)
    DOTDIV          reduce using rule 81 (expr -> colon .)
    DOTEXP          reduce using rule 81 (expr -> colon .)
    DOTMUL          reduce using rule 81 (expr -> colon .)
    DOTMULEQ        reduce using rule 81 (expr -> colon .)
    EQEQ            reduce using rule 81 (expr -> colon .)
    EXP             reduce using rule 81 (expr -> colon .)
    GE              reduce using rule 81 (expr -> colon .)
    GT              reduce using rule 81 (expr -> colon .)
    LE              reduce using rule 81 (expr -> colon .)
    LT              reduce using rule 81 (expr -> colon .)
    MINUS           reduce using rule 81 (expr -> colon .)
    MUL             reduce using rule 81 (expr -> colon .)
    NE              reduce using rule 81 (expr -> colon .)
    OR              reduce using rule 81 (expr -> colon .)
    OROR            reduce using rule 81 (expr -> colon .)
    PLUS            reduce using rule 81 (expr -> colon .)
    EQ              reduce using rule 81 (expr -> colon .)
    MULEQ           reduce using rule 81 (expr -> colon .)
    DIVEQ           reduce using rule 81 (expr -> colon .)
    MINUSEQ         reduce using rule 81 (expr -> colon .)
    PLUSEQ          reduce using rule 81 (expr -> colon .)
    OREQ            reduce using rule 81 (expr -> colon .)
    ANDEQ           reduce using rule 81 (expr -> colon .)
    COMMA           reduce using rule 81 (expr -> colon .)
    SEMI            reduce using rule 81 (expr -> colon .)
    RBRACKET        reduce using rule 81 (expr -> colon .)
    RBRACE          reduce using rule 81 (expr -> colon .)
    CASE            reduce using rule 81 (expr -> colon .)
    OTHERWISE       reduce using rule 81 (expr -> colon .)
    END_STMT        reduce using rule 81 (expr -> colon .)
    RPAREN          reduce using rule 81 (expr -> colon .)
    error           reduce using rule 81 (expr -> colon .)


state 10

    (21) stmt -> unwind .

    END_STMT        reduce using rule 21 (stmt -> unwind .)
    CONTINUE        reduce using rule 21 (stmt -> unwind .)
    BREAK           reduce using rule 21 (stmt -> unwind .)
    GLOBAL          reduce using rule 21 (stmt -> unwind .)
    PERSISTENT      reduce using rule 21 (stmt -> unwind .)
    FOR             reduce using rule 21 (stmt -> unwind .)
    IF              reduce using rule 21 (stmt -> unwind .)
    SEMI            reduce using rule 21 (stmt -> unwind .)
    COMMA           reduce using rule 21 (stmt -> unwind .)
    RETURN          reduce using rule 21 (stmt -> unwind .)
    SWITCH          reduce using rule 21 (stmt -> unwind .)
    TRY             reduce using rule 21 (stmt -> unwind .)
    WHILE           reduce using rule 21 (stmt -> unwind .)
    UNWIND_PROTECT  reduce using rule 21 (stmt -> unwind .)
    IDENT           reduce using rule 21 (stmt -> unwind .)
    NEG             reduce using rule 21 (stmt -> unwind .)
    LPAREN          reduce using rule 21 (stmt -> unwind .)
    END_EXPR        reduce using rule 21 (stmt -> unwind .)
    NUMBER          reduce using rule 21 (stmt -> unwind .)
    STRING          reduce using rule 21 (stmt -> unwind .)
    COLON           reduce using rule 21 (stmt -> unwind .)
    LBRACKET        reduce using rule 21 (stmt -> unwind .)
    LBRACE          reduce using rule 21 (stmt -> unwind .)
    MINUS           reduce using rule 21 (stmt -> unwind .)
    PLUS            reduce using rule 21 (stmt -> unwind .)
    HANDLE          reduce using rule 21 (stmt -> unwind .)
    PLUSPLUS        reduce using rule 21 (stmt -> unwind .)
    MINUSMINUS      reduce using rule 21 (stmt -> unwind .)
    UNWIND_PROTECT_CLEANUP reduce using rule 21 (stmt -> unwind .)
    CASE            reduce using rule 21 (stmt -> unwind .)
    OTHERWISE       reduce using rule 21 (stmt -> unwind .)
    CATCH           reduce using rule 21 (stmt -> unwind .)
    END_UNWIND_PROTECT reduce using rule 21 (stmt -> unwind .)
    ELSE            reduce using rule 21 (stmt -> unwind .)
    ELSEIF          reduce using rule 21 (stmt -> unwind .)
    FUNCTION        reduce using rule 21 (stmt -> unwind .)
    $end            reduce using rule 21 (stmt -> unwind .)


state 11

    (34) return_stmt -> RETURN . SEMI

    SEMI            shift and go to state 65


state 12

    (65) expr_stmt -> expr_list . SEMI

    SEMI            shift and go to state 66


state 13

    (83) expr -> matrix .

    FIELD           reduce using rule 83 (expr -> matrix .)
    TRANSPOSE       reduce using rule 83 (expr -> matrix .)
    LBRACE          reduce using rule 83 (expr -> matrix .)
    LPAREN          reduce using rule 83 (expr -> matrix .)
    AND             reduce using rule 83 (expr -> matrix .)
    ANDAND          reduce using rule 83 (expr -> matrix .)
    BACKSLASH       reduce using rule 83 (expr -> matrix .)
    COLON           reduce using rule 83 (expr -> matrix .)
    DIV             reduce using rule 83 (expr -> matrix .)
    DOT             reduce using rule 83 (expr -> matrix .)
    DOTDIV          reduce using rule 83 (expr -> matrix .)
    DOTEXP          reduce using rule 83 (expr -> matrix .)
    DOTMUL          reduce using rule 83 (expr -> matrix .)
    DOTMULEQ        reduce using rule 83 (expr -> matrix .)
    EQEQ            reduce using rule 83 (expr -> matrix .)
    EXP             reduce using rule 83 (expr -> matrix .)
    GE              reduce using rule 83 (expr -> matrix .)
    GT              reduce using rule 83 (expr -> matrix .)
    LE              reduce using rule 83 (expr -> matrix .)
    LT              reduce using rule 83 (expr -> matrix .)
    MINUS           reduce using rule 83 (expr -> matrix .)
    MUL             reduce using rule 83 (expr -> matrix .)
    NE              reduce using rule 83 (expr -> matrix .)
    OR              reduce using rule 83 (expr -> matrix .)
    OROR            reduce using rule 83 (expr -> matrix .)
    PLUS            reduce using rule 83 (expr -> matrix .)
    EQ              reduce using rule 83 (expr -> matrix .)
    MULEQ           reduce using rule 83 (expr -> matrix .)
    DIVEQ           reduce using rule 83 (expr -> matrix .)
    MINUSEQ         reduce using rule 83 (expr -> matrix .)
    PLUSEQ          reduce using rule 83 (expr -> matrix .)
    OREQ            reduce using rule 83 (expr -> matrix .)
    ANDEQ           reduce using rule 83 (expr -> matrix .)
    COMMA           reduce using rule 83 (expr -> matrix .)
    SEMI            reduce using rule 83 (expr -> matrix .)
    RBRACKET        reduce using rule 83 (expr -> matrix .)
    RBRACE          reduce using rule 83 (expr -> matrix .)
    CASE            reduce using rule 83 (expr -> matrix .)
    OTHERWISE       reduce using rule 83 (expr -> matrix .)
    END_STMT        reduce using rule 83 (expr -> matrix .)
    RPAREN          reduce using rule 83 (expr -> matrix .)
    error           reduce using rule 83 (expr -> matrix .)


state 14

    (97) colon -> COLON .

    FIELD           reduce using rule 97 (colon -> COLON .)
    TRANSPOSE       reduce using rule 97 (colon -> COLON .)
    LBRACE          reduce using rule 97 (colon -> COLON .)
    LPAREN          reduce using rule 97 (colon -> COLON .)
    AND             reduce using rule 97 (colon -> COLON .)
    ANDAND          reduce using rule 97 (colon -> COLON .)
    BACKSLASH       reduce using rule 97 (colon -> COLON .)
    COLON           reduce using rule 97 (colon -> COLON .)
    DIV             reduce using rule 97 (colon -> COLON .)
    DOT             reduce using rule 97 (colon -> COLON .)
    DOTDIV          reduce using rule 97 (colon -> COLON .)
    DOTEXP          reduce using rule 97 (colon -> COLON .)
    DOTMUL          reduce using rule 97 (colon -> COLON .)
    DOTMULEQ        reduce using rule 97 (colon -> COLON .)
    EQEQ            reduce using rule 97 (colon -> COLON .)
    EXP             reduce using rule 97 (colon -> COLON .)
    GE              reduce using rule 97 (colon -> COLON .)
    GT              reduce using rule 97 (colon -> COLON .)
    LE              reduce using rule 97 (colon -> COLON .)
    LT              reduce using rule 97 (colon -> COLON .)
    MINUS           reduce using rule 97 (colon -> COLON .)
    MUL             reduce using rule 97 (colon -> COLON .)
    NE              reduce using rule 97 (colon -> COLON .)
    OR              reduce using rule 97 (colon -> COLON .)
    OROR            reduce using rule 97 (colon -> COLON .)
    PLUS            reduce using rule 97 (colon -> COLON .)
    EQ              reduce using rule 97 (colon -> COLON .)
    MULEQ           reduce using rule 97 (colon -> COLON .)
    DIVEQ           reduce using rule 97 (colon -> COLON .)
    MINUSEQ         reduce using rule 97 (colon -> COLON .)
    PLUSEQ          reduce using rule 97 (colon -> COLON .)
    OREQ            reduce using rule 97 (colon -> COLON .)
    ANDEQ           reduce using rule 97 (colon -> COLON .)
    COMMA           reduce using rule 97 (colon -> COLON .)
    SEMI            reduce using rule 97 (colon -> COLON .)
    RBRACKET        reduce using rule 97 (colon -> COLON .)
    RBRACE          reduce using rule 97 (colon -> COLON .)
    CASE            reduce using rule 97 (colon -> COLON .)
    OTHERWISE       reduce using rule 97 (colon -> COLON .)
    END_STMT        reduce using rule 97 (colon -> COLON .)
    RPAREN          reduce using rule 97 (colon -> COLON .)
    error           reduce using rule 97 (colon -> COLON .)


state 15

    (93) ident -> IDENT .

    PLUSPLUS        reduce using rule 93 (ident -> IDENT .)
    MINUSMINUS      reduce using rule 93 (ident -> IDENT .)
    STRING          reduce using rule 93 (ident -> IDENT .)
    NUMBER          reduce using rule 93 (ident -> IDENT .)
    IDENT           reduce using rule 93 (ident -> IDENT .)
    GLOBAL          reduce using rule 93 (ident -> IDENT .)
    FIELD           reduce using rule 93 (ident -> IDENT .)
    TRANSPOSE       reduce using rule 93 (ident -> IDENT .)
    LBRACE          reduce using rule 93 (ident -> IDENT .)
    LPAREN          reduce using rule 93 (ident -> IDENT .)
    AND             reduce using rule 93 (ident -> IDENT .)
    ANDAND          reduce using rule 93 (ident -> IDENT .)
    BACKSLASH       reduce using rule 93 (ident -> IDENT .)
    COLON           reduce using rule 93 (ident -> IDENT .)
    DIV             reduce using rule 93 (ident -> IDENT .)
    DOT             reduce using rule 93 (ident -> IDENT .)
    DOTDIV          reduce using rule 93 (ident -> IDENT .)
    DOTEXP          reduce using rule 93 (ident -> IDENT .)
    DOTMUL          reduce using rule 93 (ident -> IDENT .)
    DOTMULEQ        reduce using rule 93 (ident -> IDENT .)
    EQEQ            reduce using rule 93 (ident -> IDENT .)
    EXP             reduce using rule 93 (ident -> IDENT .)
    GE              reduce using rule 93 (ident -> IDENT .)
    GT              reduce using rule 93 (ident -> IDENT .)
    LE              reduce using rule 93 (ident -> IDENT .)
    LT              reduce using rule 93 (ident -> IDENT .)
    MINUS           reduce using rule 93 (ident -> IDENT .)
    MUL             reduce using rule 93 (ident -> IDENT .)
    NE              reduce using rule 93 (ident -> IDENT .)
    OR              reduce using rule 93 (ident -> IDENT .)
    OROR            reduce using rule 93 (ident -> IDENT .)
    PLUS            reduce using rule 93 (ident -> IDENT .)
    EQ              reduce using rule 93 (ident -> IDENT .)
    MULEQ           reduce using rule 93 (ident -> IDENT .)
    DIVEQ           reduce using rule 93 (ident -> IDENT .)
    MINUSEQ         reduce using rule 93 (ident -> IDENT .)
    PLUSEQ          reduce using rule 93 (ident -> IDENT .)
    OREQ            reduce using rule 93 (ident -> IDENT .)
    ANDEQ           reduce using rule 93 (ident -> IDENT .)
    COMMA           reduce using rule 93 (ident -> IDENT .)
    SEMI            reduce using rule 93 (ident -> IDENT .)
    RBRACKET        reduce using rule 93 (ident -> IDENT .)
    RBRACE          reduce using rule 93 (ident -> IDENT .)
    CASE            reduce using rule 93 (ident -> IDENT .)
    OTHERWISE       reduce using rule 93 (ident -> IDENT .)
    END_STMT        reduce using rule 93 (ident -> IDENT .)
    RPAREN          reduce using rule 93 (ident -> IDENT .)
    error           reduce using rule 93 (ident -> IDENT .)


state 16

    (74) for_stmt -> FOR . ident EQ expr SEMI stmt_list END_STMT
    (75) for_stmt -> FOR . LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (76) for_stmt -> FOR . matrix EQ expr SEMI stmt_list END_STMT
    (93) ident -> . IDENT
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET

    LPAREN          shift and go to state 68
    IDENT           shift and go to state 15
    LBRACKET        shift and go to state 1

    ident                          shift and go to state 67
    matrix                         shift and go to state 69

state 17

    (102) expr1 -> PLUSPLUS . ident
    (93) ident -> . IDENT

    IDENT           shift and go to state 15

    ident                          shift and go to state 70

state 18

    (57) stmt_list -> stmt .

    CONTINUE        reduce using rule 57 (stmt_list -> stmt .)
    BREAK           reduce using rule 57 (stmt_list -> stmt .)
    GLOBAL          reduce using rule 57 (stmt_list -> stmt .)
    PERSISTENT      reduce using rule 57 (stmt_list -> stmt .)
    FOR             reduce using rule 57 (stmt_list -> stmt .)
    IF              reduce using rule 57 (stmt_list -> stmt .)
    SEMI            reduce using rule 57 (stmt_list -> stmt .)
    COMMA           reduce using rule 57 (stmt_list -> stmt .)
    RETURN          reduce using rule 57 (stmt_list -> stmt .)
    SWITCH          reduce using rule 57 (stmt_list -> stmt .)
    TRY             reduce using rule 57 (stmt_list -> stmt .)
    WHILE           reduce using rule 57 (stmt_list -> stmt .)
    UNWIND_PROTECT  reduce using rule 57 (stmt_list -> stmt .)
    IDENT           reduce using rule 57 (stmt_list -> stmt .)
    NEG             reduce using rule 57 (stmt_list -> stmt .)
    LPAREN          reduce using rule 57 (stmt_list -> stmt .)
    END_EXPR        reduce using rule 57 (stmt_list -> stmt .)
    NUMBER          reduce using rule 57 (stmt_list -> stmt .)
    STRING          reduce using rule 57 (stmt_list -> stmt .)
    COLON           reduce using rule 57 (stmt_list -> stmt .)
    LBRACKET        reduce using rule 57 (stmt_list -> stmt .)
    LBRACE          reduce using rule 57 (stmt_list -> stmt .)
    MINUS           reduce using rule 57 (stmt_list -> stmt .)
    PLUS            reduce using rule 57 (stmt_list -> stmt .)
    HANDLE          reduce using rule 57 (stmt_list -> stmt .)
    PLUSPLUS        reduce using rule 57 (stmt_list -> stmt .)
    MINUSMINUS      reduce using rule 57 (stmt_list -> stmt .)
    ELSE            reduce using rule 57 (stmt_list -> stmt .)
    ELSEIF          reduce using rule 57 (stmt_list -> stmt .)
    END_STMT        reduce using rule 57 (stmt_list -> stmt .)
    UNWIND_PROTECT_CLEANUP reduce using rule 57 (stmt_list -> stmt .)
    END_UNWIND_PROTECT reduce using rule 57 (stmt_list -> stmt .)
    FUNCTION        reduce using rule 57 (stmt_list -> stmt .)
    $end            reduce using rule 57 (stmt_list -> stmt .)
    CASE            reduce using rule 57 (stmt_list -> stmt .)
    OTHERWISE       reduce using rule 57 (stmt_list -> stmt .)
    CATCH           reduce using rule 57 (stmt_list -> stmt .)


state 19

    (41) try_catch -> TRY . stmt_list CATCH stmt_list END_STMT
    (42) try_catch -> TRY . stmt_list END_STMT
    (57) stmt_list -> . stmt
    (58) stmt_list -> . stmt_list stmt
    (8) stmt -> . continue_stmt
    (9) stmt -> . break_stmt
    (10) stmt -> . expr_stmt
    (11) stmt -> . global_stmt
    (12) stmt -> . persistent_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (21) stmt -> . unwind
    (35) continue_stmt -> . CONTINUE SEMI
    (36) break_stmt -> . BREAK SEMI
    (65) expr_stmt -> . expr_list SEMI
    (32) global_stmt -> . GLOBAL global_list SEMI
    (33) persistent_stmt -> . PERSISTENT expr SEMI
    (29) command -> . ident args SEMI
    (74) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (75) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (76) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (69) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (70) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (43) null_stmt -> . SEMI
    (44) null_stmt -> . COMMA
    (34) return_stmt -> . RETURN SEMI
    (37) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (41) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (42) try_catch -> . TRY stmt_list END_STMT
    (66) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (22) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (93) ident -> . IDENT
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 38
    GLOBAL          shift and go to state 25
    PERSISTENT      shift and go to state 36
    FOR             shift and go to state 16
    IF              shift and go to state 51
    SEMI            shift and go to state 44
    COMMA           shift and go to state 46
    RETURN          shift and go to state 11
    SWITCH          shift and go to state 33
    TRY             shift and go to state 19
    WHILE           shift and go to state 27
    UNWIND_PROTECT  shift and go to state 6
    IDENT           shift and go to state 15
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    unwind                         shift and go to state 10
    expr_list                      shift and go to state 12
    number                         shift and go to state 26
    return_stmt                    shift and go to state 28
    switch_stmt                    shift and go to state 29
    break_stmt                     shift and go to state 42
    lambda_expr                    shift and go to state 30
    end                            shift and go to state 43
    matrix                         shift and go to state 13
    continue_stmt                  shift and go to state 31
    cellarray                      shift and go to state 21
    expr2                          shift and go to state 3
    expr1                          shift and go to state 45
    global_stmt                    shift and go to state 47
    string                         shift and go to state 41
    colon                          shift and go to state 9
    persistent_stmt                shift and go to state 5
    stmt                           shift and go to state 18
    for_stmt                       shift and go to state 53
    expr_stmt                      shift and go to state 7
    stmt_list                      shift and go to state 71
    ident                          shift and go to state 34
    if_stmt                        shift and go to state 8
    expr                           shift and go to state 35
    try_catch                      shift and go to state 37
    exprs                          shift and go to state 54
    while_stmt                     shift and go to state 55
    command                        shift and go to state 56
    null_stmt                      shift and go to state 57

state 20

    (104) cellarray -> LBRACE . RBRACE
    (105) cellarray -> LBRACE . expr_list RBRACE
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    RBRACE          shift and go to state 73
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr_list                      shift and go to state 72
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    exprs                          shift and go to state 54
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    expr                           shift and go to state 35
    matrix                         shift and go to state 13

state 21

    (84) expr -> cellarray .

    FIELD           reduce using rule 84 (expr -> cellarray .)
    TRANSPOSE       reduce using rule 84 (expr -> cellarray .)
    LBRACE          reduce using rule 84 (expr -> cellarray .)
    LPAREN          reduce using rule 84 (expr -> cellarray .)
    AND             reduce using rule 84 (expr -> cellarray .)
    ANDAND          reduce using rule 84 (expr -> cellarray .)
    BACKSLASH       reduce using rule 84 (expr -> cellarray .)
    COLON           reduce using rule 84 (expr -> cellarray .)
    DIV             reduce using rule 84 (expr -> cellarray .)
    DOT             reduce using rule 84 (expr -> cellarray .)
    DOTDIV          reduce using rule 84 (expr -> cellarray .)
    DOTEXP          reduce using rule 84 (expr -> cellarray .)
    DOTMUL          reduce using rule 84 (expr -> cellarray .)
    DOTMULEQ        reduce using rule 84 (expr -> cellarray .)
    EQEQ            reduce using rule 84 (expr -> cellarray .)
    EXP             reduce using rule 84 (expr -> cellarray .)
    GE              reduce using rule 84 (expr -> cellarray .)
    GT              reduce using rule 84 (expr -> cellarray .)
    LE              reduce using rule 84 (expr -> cellarray .)
    LT              reduce using rule 84 (expr -> cellarray .)
    MINUS           reduce using rule 84 (expr -> cellarray .)
    MUL             reduce using rule 84 (expr -> cellarray .)
    NE              reduce using rule 84 (expr -> cellarray .)
    OR              reduce using rule 84 (expr -> cellarray .)
    OROR            reduce using rule 84 (expr -> cellarray .)
    PLUS            reduce using rule 84 (expr -> cellarray .)
    EQ              reduce using rule 84 (expr -> cellarray .)
    MULEQ           reduce using rule 84 (expr -> cellarray .)
    DIVEQ           reduce using rule 84 (expr -> cellarray .)
    MINUSEQ         reduce using rule 84 (expr -> cellarray .)
    PLUSEQ          reduce using rule 84 (expr -> cellarray .)
    OREQ            reduce using rule 84 (expr -> cellarray .)
    ANDEQ           reduce using rule 84 (expr -> cellarray .)
    COMMA           reduce using rule 84 (expr -> cellarray .)
    SEMI            reduce using rule 84 (expr -> cellarray .)
    RBRACKET        reduce using rule 84 (expr -> cellarray .)
    RBRACE          reduce using rule 84 (expr -> cellarray .)
    CASE            reduce using rule 84 (expr -> cellarray .)
    OTHERWISE       reduce using rule 84 (expr -> cellarray .)
    END_STMT        reduce using rule 84 (expr -> cellarray .)
    RPAREN          reduce using rule 84 (expr -> cellarray .)
    error           reduce using rule 84 (expr -> cellarray .)


state 22

    (35) continue_stmt -> CONTINUE . SEMI

    SEMI            shift and go to state 74


state 23

    (95) end -> END_EXPR .

    FIELD           reduce using rule 95 (end -> END_EXPR .)
    TRANSPOSE       reduce using rule 95 (end -> END_EXPR .)
    LBRACE          reduce using rule 95 (end -> END_EXPR .)
    LPAREN          reduce using rule 95 (end -> END_EXPR .)
    AND             reduce using rule 95 (end -> END_EXPR .)
    ANDAND          reduce using rule 95 (end -> END_EXPR .)
    BACKSLASH       reduce using rule 95 (end -> END_EXPR .)
    COLON           reduce using rule 95 (end -> END_EXPR .)
    DIV             reduce using rule 95 (end -> END_EXPR .)
    DOT             reduce using rule 95 (end -> END_EXPR .)
    DOTDIV          reduce using rule 95 (end -> END_EXPR .)
    DOTEXP          reduce using rule 95 (end -> END_EXPR .)
    DOTMUL          reduce using rule 95 (end -> END_EXPR .)
    DOTMULEQ        reduce using rule 95 (end -> END_EXPR .)
    EQEQ            reduce using rule 95 (end -> END_EXPR .)
    EXP             reduce using rule 95 (end -> END_EXPR .)
    GE              reduce using rule 95 (end -> END_EXPR .)
    GT              reduce using rule 95 (end -> END_EXPR .)
    LE              reduce using rule 95 (end -> END_EXPR .)
    LT              reduce using rule 95 (end -> END_EXPR .)
    MINUS           reduce using rule 95 (end -> END_EXPR .)
    MUL             reduce using rule 95 (end -> END_EXPR .)
    NE              reduce using rule 95 (end -> END_EXPR .)
    OR              reduce using rule 95 (end -> END_EXPR .)
    OROR            reduce using rule 95 (end -> END_EXPR .)
    PLUS            reduce using rule 95 (end -> END_EXPR .)
    EQ              reduce using rule 95 (end -> END_EXPR .)
    MULEQ           reduce using rule 95 (end -> END_EXPR .)
    DIVEQ           reduce using rule 95 (end -> END_EXPR .)
    MINUSEQ         reduce using rule 95 (end -> END_EXPR .)
    PLUSEQ          reduce using rule 95 (end -> END_EXPR .)
    OREQ            reduce using rule 95 (end -> END_EXPR .)
    ANDEQ           reduce using rule 95 (end -> END_EXPR .)
    COMMA           reduce using rule 95 (end -> END_EXPR .)
    SEMI            reduce using rule 95 (end -> END_EXPR .)
    RBRACKET        reduce using rule 95 (end -> END_EXPR .)
    RBRACE          reduce using rule 95 (end -> END_EXPR .)
    RPAREN          reduce using rule 95 (end -> END_EXPR .)
    CASE            reduce using rule 95 (end -> END_EXPR .)
    OTHERWISE       reduce using rule 95 (end -> END_EXPR .)
    END_STMT        reduce using rule 95 (end -> END_EXPR .)
    error           reduce using rule 95 (end -> END_EXPR .)


state 24

    (82) expr -> NEG .
    (100) expr1 -> NEG . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    FIELD           reduce using rule 82 (expr -> NEG .)
    TRANSPOSE       reduce using rule 82 (expr -> NEG .)
    AND             reduce using rule 82 (expr -> NEG .)
    ANDAND          reduce using rule 82 (expr -> NEG .)
    BACKSLASH       reduce using rule 82 (expr -> NEG .)
    COLON           reduce using rule 82 (expr -> NEG .)
    DIV             reduce using rule 82 (expr -> NEG .)
    DOT             reduce using rule 82 (expr -> NEG .)
    DOTDIV          reduce using rule 82 (expr -> NEG .)
    DOTEXP          reduce using rule 82 (expr -> NEG .)
    DOTMUL          reduce using rule 82 (expr -> NEG .)
    DOTMULEQ        reduce using rule 82 (expr -> NEG .)
    EQEQ            reduce using rule 82 (expr -> NEG .)
    EXP             reduce using rule 82 (expr -> NEG .)
    GE              reduce using rule 82 (expr -> NEG .)
    GT              reduce using rule 82 (expr -> NEG .)
    LE              reduce using rule 82 (expr -> NEG .)
    LT              reduce using rule 82 (expr -> NEG .)
    MINUS           reduce using rule 82 (expr -> NEG .)
    MUL             reduce using rule 82 (expr -> NEG .)
    NE              reduce using rule 82 (expr -> NEG .)
    OR              reduce using rule 82 (expr -> NEG .)
    OROR            reduce using rule 82 (expr -> NEG .)
    PLUS            reduce using rule 82 (expr -> NEG .)
    EQ              reduce using rule 82 (expr -> NEG .)
    MULEQ           reduce using rule 82 (expr -> NEG .)
    DIVEQ           reduce using rule 82 (expr -> NEG .)
    MINUSEQ         reduce using rule 82 (expr -> NEG .)
    PLUSEQ          reduce using rule 82 (expr -> NEG .)
    OREQ            reduce using rule 82 (expr -> NEG .)
    ANDEQ           reduce using rule 82 (expr -> NEG .)
    COMMA           reduce using rule 82 (expr -> NEG .)
    SEMI            reduce using rule 82 (expr -> NEG .)
    RBRACKET        reduce using rule 82 (expr -> NEG .)
    RBRACE          reduce using rule 82 (expr -> NEG .)
    CASE            reduce using rule 82 (expr -> NEG .)
    OTHERWISE       reduce using rule 82 (expr -> NEG .)
    END_STMT        reduce using rule 82 (expr -> NEG .)
    RPAREN          reduce using rule 82 (expr -> NEG .)
    error           reduce using rule 82 (expr -> NEG .)
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

  ! LBRACE          [ reduce using rule 82 (expr -> NEG .) ]
  ! LPAREN          [ reduce using rule 82 (expr -> NEG .) ]
  ! COLON           [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 2 ]
  ! PLUS            [ shift and go to state 4 ]

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 75
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 25

    (32) global_stmt -> GLOBAL . global_list SEMI
    (30) global_list -> . ident
    (31) global_list -> . global_list ident
    (93) ident -> . IDENT

    IDENT           shift and go to state 15

    ident                          shift and go to state 76
    global_list                    shift and go to state 77

state 26

    (79) expr -> number .

    FIELD           reduce using rule 79 (expr -> number .)
    TRANSPOSE       reduce using rule 79 (expr -> number .)
    LBRACE          reduce using rule 79 (expr -> number .)
    LPAREN          reduce using rule 79 (expr -> number .)
    AND             reduce using rule 79 (expr -> number .)
    ANDAND          reduce using rule 79 (expr -> number .)
    BACKSLASH       reduce using rule 79 (expr -> number .)
    COLON           reduce using rule 79 (expr -> number .)
    DIV             reduce using rule 79 (expr -> number .)
    DOT             reduce using rule 79 (expr -> number .)
    DOTDIV          reduce using rule 79 (expr -> number .)
    DOTEXP          reduce using rule 79 (expr -> number .)
    DOTMUL          reduce using rule 79 (expr -> number .)
    DOTMULEQ        reduce using rule 79 (expr -> number .)
    EQEQ            reduce using rule 79 (expr -> number .)
    EXP             reduce using rule 79 (expr -> number .)
    GE              reduce using rule 79 (expr -> number .)
    GT              reduce using rule 79 (expr -> number .)
    LE              reduce using rule 79 (expr -> number .)
    LT              reduce using rule 79 (expr -> number .)
    MINUS           reduce using rule 79 (expr -> number .)
    MUL             reduce using rule 79 (expr -> number .)
    NE              reduce using rule 79 (expr -> number .)
    OR              reduce using rule 79 (expr -> number .)
    OROR            reduce using rule 79 (expr -> number .)
    PLUS            reduce using rule 79 (expr -> number .)
    EQ              reduce using rule 79 (expr -> number .)
    MULEQ           reduce using rule 79 (expr -> number .)
    DIVEQ           reduce using rule 79 (expr -> number .)
    MINUSEQ         reduce using rule 79 (expr -> number .)
    PLUSEQ          reduce using rule 79 (expr -> number .)
    OREQ            reduce using rule 79 (expr -> number .)
    ANDEQ           reduce using rule 79 (expr -> number .)
    COMMA           reduce using rule 79 (expr -> number .)
    SEMI            reduce using rule 79 (expr -> number .)
    RBRACKET        reduce using rule 79 (expr -> number .)
    RBRACE          reduce using rule 79 (expr -> number .)
    CASE            reduce using rule 79 (expr -> number .)
    OTHERWISE       reduce using rule 79 (expr -> number .)
    END_STMT        reduce using rule 79 (expr -> number .)
    RPAREN          reduce using rule 79 (expr -> number .)
    error           reduce using rule 79 (expr -> number .)


state 27

    (66) while_stmt -> WHILE . expr SEMI stmt_list END_STMT
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 78
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 28

    (17) stmt -> return_stmt .

    END_STMT        reduce using rule 17 (stmt -> return_stmt .)
    CONTINUE        reduce using rule 17 (stmt -> return_stmt .)
    BREAK           reduce using rule 17 (stmt -> return_stmt .)
    GLOBAL          reduce using rule 17 (stmt -> return_stmt .)
    PERSISTENT      reduce using rule 17 (stmt -> return_stmt .)
    FOR             reduce using rule 17 (stmt -> return_stmt .)
    IF              reduce using rule 17 (stmt -> return_stmt .)
    SEMI            reduce using rule 17 (stmt -> return_stmt .)
    COMMA           reduce using rule 17 (stmt -> return_stmt .)
    RETURN          reduce using rule 17 (stmt -> return_stmt .)
    SWITCH          reduce using rule 17 (stmt -> return_stmt .)
    TRY             reduce using rule 17 (stmt -> return_stmt .)
    WHILE           reduce using rule 17 (stmt -> return_stmt .)
    UNWIND_PROTECT  reduce using rule 17 (stmt -> return_stmt .)
    IDENT           reduce using rule 17 (stmt -> return_stmt .)
    NEG             reduce using rule 17 (stmt -> return_stmt .)
    LPAREN          reduce using rule 17 (stmt -> return_stmt .)
    END_EXPR        reduce using rule 17 (stmt -> return_stmt .)
    NUMBER          reduce using rule 17 (stmt -> return_stmt .)
    STRING          reduce using rule 17 (stmt -> return_stmt .)
    COLON           reduce using rule 17 (stmt -> return_stmt .)
    LBRACKET        reduce using rule 17 (stmt -> return_stmt .)
    LBRACE          reduce using rule 17 (stmt -> return_stmt .)
    MINUS           reduce using rule 17 (stmt -> return_stmt .)
    PLUS            reduce using rule 17 (stmt -> return_stmt .)
    HANDLE          reduce using rule 17 (stmt -> return_stmt .)
    PLUSPLUS        reduce using rule 17 (stmt -> return_stmt .)
    MINUSMINUS      reduce using rule 17 (stmt -> return_stmt .)
    UNWIND_PROTECT_CLEANUP reduce using rule 17 (stmt -> return_stmt .)
    CASE            reduce using rule 17 (stmt -> return_stmt .)
    OTHERWISE       reduce using rule 17 (stmt -> return_stmt .)
    CATCH           reduce using rule 17 (stmt -> return_stmt .)
    END_UNWIND_PROTECT reduce using rule 17 (stmt -> return_stmt .)
    ELSE            reduce using rule 17 (stmt -> return_stmt .)
    ELSEIF          reduce using rule 17 (stmt -> return_stmt .)
    FUNCTION        reduce using rule 17 (stmt -> return_stmt .)
    $end            reduce using rule 17 (stmt -> return_stmt .)


state 29

    (18) stmt -> switch_stmt .

    END_STMT        reduce using rule 18 (stmt -> switch_stmt .)
    CONTINUE        reduce using rule 18 (stmt -> switch_stmt .)
    BREAK           reduce using rule 18 (stmt -> switch_stmt .)
    GLOBAL          reduce using rule 18 (stmt -> switch_stmt .)
    PERSISTENT      reduce using rule 18 (stmt -> switch_stmt .)
    FOR             reduce using rule 18 (stmt -> switch_stmt .)
    IF              reduce using rule 18 (stmt -> switch_stmt .)
    SEMI            reduce using rule 18 (stmt -> switch_stmt .)
    COMMA           reduce using rule 18 (stmt -> switch_stmt .)
    RETURN          reduce using rule 18 (stmt -> switch_stmt .)
    SWITCH          reduce using rule 18 (stmt -> switch_stmt .)
    TRY             reduce using rule 18 (stmt -> switch_stmt .)
    WHILE           reduce using rule 18 (stmt -> switch_stmt .)
    UNWIND_PROTECT  reduce using rule 18 (stmt -> switch_stmt .)
    IDENT           reduce using rule 18 (stmt -> switch_stmt .)
    NEG             reduce using rule 18 (stmt -> switch_stmt .)
    LPAREN          reduce using rule 18 (stmt -> switch_stmt .)
    END_EXPR        reduce using rule 18 (stmt -> switch_stmt .)
    NUMBER          reduce using rule 18 (stmt -> switch_stmt .)
    STRING          reduce using rule 18 (stmt -> switch_stmt .)
    COLON           reduce using rule 18 (stmt -> switch_stmt .)
    LBRACKET        reduce using rule 18 (stmt -> switch_stmt .)
    LBRACE          reduce using rule 18 (stmt -> switch_stmt .)
    MINUS           reduce using rule 18 (stmt -> switch_stmt .)
    PLUS            reduce using rule 18 (stmt -> switch_stmt .)
    HANDLE          reduce using rule 18 (stmt -> switch_stmt .)
    PLUSPLUS        reduce using rule 18 (stmt -> switch_stmt .)
    MINUSMINUS      reduce using rule 18 (stmt -> switch_stmt .)
    UNWIND_PROTECT_CLEANUP reduce using rule 18 (stmt -> switch_stmt .)
    CASE            reduce using rule 18 (stmt -> switch_stmt .)
    OTHERWISE       reduce using rule 18 (stmt -> switch_stmt .)
    CATCH           reduce using rule 18 (stmt -> switch_stmt .)
    END_UNWIND_PROTECT reduce using rule 18 (stmt -> switch_stmt .)
    ELSE            reduce using rule 18 (stmt -> switch_stmt .)
    ELSEIF          reduce using rule 18 (stmt -> switch_stmt .)
    FUNCTION        reduce using rule 18 (stmt -> switch_stmt .)
    $end            reduce using rule 18 (stmt -> switch_stmt .)


state 30

    (87) expr -> lambda_expr .

    FIELD           reduce using rule 87 (expr -> lambda_expr .)
    TRANSPOSE       reduce using rule 87 (expr -> lambda_expr .)
    LBRACE          reduce using rule 87 (expr -> lambda_expr .)
    LPAREN          reduce using rule 87 (expr -> lambda_expr .)
    AND             reduce using rule 87 (expr -> lambda_expr .)
    ANDAND          reduce using rule 87 (expr -> lambda_expr .)
    BACKSLASH       reduce using rule 87 (expr -> lambda_expr .)
    COLON           reduce using rule 87 (expr -> lambda_expr .)
    DIV             reduce using rule 87 (expr -> lambda_expr .)
    DOT             reduce using rule 87 (expr -> lambda_expr .)
    DOTDIV          reduce using rule 87 (expr -> lambda_expr .)
    DOTEXP          reduce using rule 87 (expr -> lambda_expr .)
    DOTMUL          reduce using rule 87 (expr -> lambda_expr .)
    DOTMULEQ        reduce using rule 87 (expr -> lambda_expr .)
    EQEQ            reduce using rule 87 (expr -> lambda_expr .)
    EXP             reduce using rule 87 (expr -> lambda_expr .)
    GE              reduce using rule 87 (expr -> lambda_expr .)
    GT              reduce using rule 87 (expr -> lambda_expr .)
    LE              reduce using rule 87 (expr -> lambda_expr .)
    LT              reduce using rule 87 (expr -> lambda_expr .)
    MINUS           reduce using rule 87 (expr -> lambda_expr .)
    MUL             reduce using rule 87 (expr -> lambda_expr .)
    NE              reduce using rule 87 (expr -> lambda_expr .)
    OR              reduce using rule 87 (expr -> lambda_expr .)
    OROR            reduce using rule 87 (expr -> lambda_expr .)
    PLUS            reduce using rule 87 (expr -> lambda_expr .)
    EQ              reduce using rule 87 (expr -> lambda_expr .)
    MULEQ           reduce using rule 87 (expr -> lambda_expr .)
    DIVEQ           reduce using rule 87 (expr -> lambda_expr .)
    MINUSEQ         reduce using rule 87 (expr -> lambda_expr .)
    PLUSEQ          reduce using rule 87 (expr -> lambda_expr .)
    OREQ            reduce using rule 87 (expr -> lambda_expr .)
    ANDEQ           reduce using rule 87 (expr -> lambda_expr .)
    COMMA           reduce using rule 87 (expr -> lambda_expr .)
    SEMI            reduce using rule 87 (expr -> lambda_expr .)
    RBRACKET        reduce using rule 87 (expr -> lambda_expr .)
    RBRACE          reduce using rule 87 (expr -> lambda_expr .)
    CASE            reduce using rule 87 (expr -> lambda_expr .)
    OTHERWISE       reduce using rule 87 (expr -> lambda_expr .)
    END_STMT        reduce using rule 87 (expr -> lambda_expr .)
    RPAREN          reduce using rule 87 (expr -> lambda_expr .)
    error           reduce using rule 87 (expr -> lambda_expr .)


state 31

    (8) stmt -> continue_stmt .

    END_STMT        reduce using rule 8 (stmt -> continue_stmt .)
    CONTINUE        reduce using rule 8 (stmt -> continue_stmt .)
    BREAK           reduce using rule 8 (stmt -> continue_stmt .)
    GLOBAL          reduce using rule 8 (stmt -> continue_stmt .)
    PERSISTENT      reduce using rule 8 (stmt -> continue_stmt .)
    FOR             reduce using rule 8 (stmt -> continue_stmt .)
    IF              reduce using rule 8 (stmt -> continue_stmt .)
    SEMI            reduce using rule 8 (stmt -> continue_stmt .)
    COMMA           reduce using rule 8 (stmt -> continue_stmt .)
    RETURN          reduce using rule 8 (stmt -> continue_stmt .)
    SWITCH          reduce using rule 8 (stmt -> continue_stmt .)
    TRY             reduce using rule 8 (stmt -> continue_stmt .)
    WHILE           reduce using rule 8 (stmt -> continue_stmt .)
    UNWIND_PROTECT  reduce using rule 8 (stmt -> continue_stmt .)
    IDENT           reduce using rule 8 (stmt -> continue_stmt .)
    NEG             reduce using rule 8 (stmt -> continue_stmt .)
    LPAREN          reduce using rule 8 (stmt -> continue_stmt .)
    END_EXPR        reduce using rule 8 (stmt -> continue_stmt .)
    NUMBER          reduce using rule 8 (stmt -> continue_stmt .)
    STRING          reduce using rule 8 (stmt -> continue_stmt .)
    COLON           reduce using rule 8 (stmt -> continue_stmt .)
    LBRACKET        reduce using rule 8 (stmt -> continue_stmt .)
    LBRACE          reduce using rule 8 (stmt -> continue_stmt .)
    MINUS           reduce using rule 8 (stmt -> continue_stmt .)
    PLUS            reduce using rule 8 (stmt -> continue_stmt .)
    HANDLE          reduce using rule 8 (stmt -> continue_stmt .)
    PLUSPLUS        reduce using rule 8 (stmt -> continue_stmt .)
    MINUSMINUS      reduce using rule 8 (stmt -> continue_stmt .)
    UNWIND_PROTECT_CLEANUP reduce using rule 8 (stmt -> continue_stmt .)
    CASE            reduce using rule 8 (stmt -> continue_stmt .)
    OTHERWISE       reduce using rule 8 (stmt -> continue_stmt .)
    CATCH           reduce using rule 8 (stmt -> continue_stmt .)
    END_UNWIND_PROTECT reduce using rule 8 (stmt -> continue_stmt .)
    ELSE            reduce using rule 8 (stmt -> continue_stmt .)
    ELSEIF          reduce using rule 8 (stmt -> continue_stmt .)
    FUNCTION        reduce using rule 8 (stmt -> continue_stmt .)
    $end            reduce using rule 8 (stmt -> continue_stmt .)


state 32

    (0) S' -> top .
    (3) top -> top . func_decl stmt_list_opt
    (4) top -> top . func_decl stmt_list END_STMT semi_opt
    (45) func_decl -> . FUNCTION ident args_opt SEMI
    (46) func_decl -> . FUNCTION ret EQ ident args_opt SEMI

    FUNCTION        shift and go to state 80

    func_decl                      shift and go to state 79

state 33

    (37) switch_stmt -> SWITCH . expr semi_opt case_list END_STMT
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 81
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 34

    (29) command -> ident . args SEMI
    (77) expr -> ident .
    (88) expr -> ident . PLUSPLUS
    (89) expr -> ident . MINUSMINUS
    (27) args -> . arg1
    (28) args -> . args arg1
    (23) arg1 -> . STRING
    (24) arg1 -> . NUMBER
    (25) arg1 -> . IDENT
    (26) arg1 -> . GLOBAL

    FIELD           reduce using rule 77 (expr -> ident .)
    TRANSPOSE       reduce using rule 77 (expr -> ident .)
    LBRACE          reduce using rule 77 (expr -> ident .)
    LPAREN          reduce using rule 77 (expr -> ident .)
    AND             reduce using rule 77 (expr -> ident .)
    ANDAND          reduce using rule 77 (expr -> ident .)
    BACKSLASH       reduce using rule 77 (expr -> ident .)
    COLON           reduce using rule 77 (expr -> ident .)
    DIV             reduce using rule 77 (expr -> ident .)
    DOT             reduce using rule 77 (expr -> ident .)
    DOTDIV          reduce using rule 77 (expr -> ident .)
    DOTEXP          reduce using rule 77 (expr -> ident .)
    DOTMUL          reduce using rule 77 (expr -> ident .)
    DOTMULEQ        reduce using rule 77 (expr -> ident .)
    EQEQ            reduce using rule 77 (expr -> ident .)
    EXP             reduce using rule 77 (expr -> ident .)
    GE              reduce using rule 77 (expr -> ident .)
    GT              reduce using rule 77 (expr -> ident .)
    LE              reduce using rule 77 (expr -> ident .)
    LT              reduce using rule 77 (expr -> ident .)
    MINUS           reduce using rule 77 (expr -> ident .)
    MUL             reduce using rule 77 (expr -> ident .)
    NE              reduce using rule 77 (expr -> ident .)
    OR              reduce using rule 77 (expr -> ident .)
    OROR            reduce using rule 77 (expr -> ident .)
    PLUS            reduce using rule 77 (expr -> ident .)
    EQ              reduce using rule 77 (expr -> ident .)
    MULEQ           reduce using rule 77 (expr -> ident .)
    DIVEQ           reduce using rule 77 (expr -> ident .)
    MINUSEQ         reduce using rule 77 (expr -> ident .)
    PLUSEQ          reduce using rule 77 (expr -> ident .)
    OREQ            reduce using rule 77 (expr -> ident .)
    ANDEQ           reduce using rule 77 (expr -> ident .)
    COMMA           reduce using rule 77 (expr -> ident .)
    SEMI            reduce using rule 77 (expr -> ident .)
    PLUSPLUS        shift and go to state 83
    MINUSMINUS      shift and go to state 89
    STRING          shift and go to state 82
    NUMBER          shift and go to state 86
    IDENT           shift and go to state 87
    GLOBAL          shift and go to state 88

    arg1                           shift and go to state 84
    args                           shift and go to state 85

state 35

    (63) exprs -> expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    COMMA           reduce using rule 63 (exprs -> expr .)
    SEMI            reduce using rule 63 (exprs -> expr .)
    RBRACKET        reduce using rule 63 (exprs -> expr .)
    RBRACE          reduce using rule 63 (exprs -> expr .)
    RPAREN          reduce using rule 63 (exprs -> expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    AND             shift and go to state 119
    ANDAND          shift and go to state 112
    BACKSLASH       shift and go to state 103
    COLON           shift and go to state 107
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    DOTMULEQ        shift and go to state 104
    EQEQ            shift and go to state 92
    EXP             shift and go to state 94
    GE              shift and go to state 116
    GT              shift and go to state 113
    LE              shift and go to state 100
    LT              shift and go to state 106
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    NE              shift and go to state 93
    OR              shift and go to state 122
    OROR            shift and go to state 91
    PLUS            shift and go to state 109
    EQ              shift and go to state 101
    MULEQ           shift and go to state 108
    DIVEQ           shift and go to state 111
    MINUSEQ         shift and go to state 105
    PLUSEQ          shift and go to state 121
    OREQ            shift and go to state 110
    ANDEQ           shift and go to state 114


state 36

    (33) persistent_stmt -> PERSISTENT . expr SEMI
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 123
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 37

    (19) stmt -> try_catch .

    END_STMT        reduce using rule 19 (stmt -> try_catch .)
    CONTINUE        reduce using rule 19 (stmt -> try_catch .)
    BREAK           reduce using rule 19 (stmt -> try_catch .)
    GLOBAL          reduce using rule 19 (stmt -> try_catch .)
    PERSISTENT      reduce using rule 19 (stmt -> try_catch .)
    FOR             reduce using rule 19 (stmt -> try_catch .)
    IF              reduce using rule 19 (stmt -> try_catch .)
    SEMI            reduce using rule 19 (stmt -> try_catch .)
    COMMA           reduce using rule 19 (stmt -> try_catch .)
    RETURN          reduce using rule 19 (stmt -> try_catch .)
    SWITCH          reduce using rule 19 (stmt -> try_catch .)
    TRY             reduce using rule 19 (stmt -> try_catch .)
    WHILE           reduce using rule 19 (stmt -> try_catch .)
    UNWIND_PROTECT  reduce using rule 19 (stmt -> try_catch .)
    IDENT           reduce using rule 19 (stmt -> try_catch .)
    NEG             reduce using rule 19 (stmt -> try_catch .)
    LPAREN          reduce using rule 19 (stmt -> try_catch .)
    END_EXPR        reduce using rule 19 (stmt -> try_catch .)
    NUMBER          reduce using rule 19 (stmt -> try_catch .)
    STRING          reduce using rule 19 (stmt -> try_catch .)
    COLON           reduce using rule 19 (stmt -> try_catch .)
    LBRACKET        reduce using rule 19 (stmt -> try_catch .)
    LBRACE          reduce using rule 19 (stmt -> try_catch .)
    MINUS           reduce using rule 19 (stmt -> try_catch .)
    PLUS            reduce using rule 19 (stmt -> try_catch .)
    HANDLE          reduce using rule 19 (stmt -> try_catch .)
    PLUSPLUS        reduce using rule 19 (stmt -> try_catch .)
    MINUSMINUS      reduce using rule 19 (stmt -> try_catch .)
    UNWIND_PROTECT_CLEANUP reduce using rule 19 (stmt -> try_catch .)
    CASE            reduce using rule 19 (stmt -> try_catch .)
    OTHERWISE       reduce using rule 19 (stmt -> try_catch .)
    CATCH           reduce using rule 19 (stmt -> try_catch .)
    END_UNWIND_PROTECT reduce using rule 19 (stmt -> try_catch .)
    ELSE            reduce using rule 19 (stmt -> try_catch .)
    ELSEIF          reduce using rule 19 (stmt -> try_catch .)
    FUNCTION        reduce using rule 19 (stmt -> try_catch .)
    $end            reduce using rule 19 (stmt -> try_catch .)


state 38

    (36) break_stmt -> BREAK . SEMI

    SEMI            shift and go to state 124


state 39

    (94) number -> NUMBER .

    FIELD           reduce using rule 94 (number -> NUMBER .)
    TRANSPOSE       reduce using rule 94 (number -> NUMBER .)
    LBRACE          reduce using rule 94 (number -> NUMBER .)
    LPAREN          reduce using rule 94 (number -> NUMBER .)
    AND             reduce using rule 94 (number -> NUMBER .)
    ANDAND          reduce using rule 94 (number -> NUMBER .)
    BACKSLASH       reduce using rule 94 (number -> NUMBER .)
    COLON           reduce using rule 94 (number -> NUMBER .)
    DIV             reduce using rule 94 (number -> NUMBER .)
    DOT             reduce using rule 94 (number -> NUMBER .)
    DOTDIV          reduce using rule 94 (number -> NUMBER .)
    DOTEXP          reduce using rule 94 (number -> NUMBER .)
    DOTMUL          reduce using rule 94 (number -> NUMBER .)
    DOTMULEQ        reduce using rule 94 (number -> NUMBER .)
    EQEQ            reduce using rule 94 (number -> NUMBER .)
    EXP             reduce using rule 94 (number -> NUMBER .)
    GE              reduce using rule 94 (number -> NUMBER .)
    GT              reduce using rule 94 (number -> NUMBER .)
    LE              reduce using rule 94 (number -> NUMBER .)
    LT              reduce using rule 94 (number -> NUMBER .)
    MINUS           reduce using rule 94 (number -> NUMBER .)
    MUL             reduce using rule 94 (number -> NUMBER .)
    NE              reduce using rule 94 (number -> NUMBER .)
    OR              reduce using rule 94 (number -> NUMBER .)
    OROR            reduce using rule 94 (number -> NUMBER .)
    PLUS            reduce using rule 94 (number -> NUMBER .)
    EQ              reduce using rule 94 (number -> NUMBER .)
    MULEQ           reduce using rule 94 (number -> NUMBER .)
    DIVEQ           reduce using rule 94 (number -> NUMBER .)
    MINUSEQ         reduce using rule 94 (number -> NUMBER .)
    PLUSEQ          reduce using rule 94 (number -> NUMBER .)
    OREQ            reduce using rule 94 (number -> NUMBER .)
    ANDEQ           reduce using rule 94 (number -> NUMBER .)
    COMMA           reduce using rule 94 (number -> NUMBER .)
    SEMI            reduce using rule 94 (number -> NUMBER .)
    RBRACKET        reduce using rule 94 (number -> NUMBER .)
    RBRACE          reduce using rule 94 (number -> NUMBER .)
    RPAREN          reduce using rule 94 (number -> NUMBER .)
    CASE            reduce using rule 94 (number -> NUMBER .)
    OTHERWISE       reduce using rule 94 (number -> NUMBER .)
    END_STMT        reduce using rule 94 (number -> NUMBER .)
    error           reduce using rule 94 (number -> NUMBER .)


state 40

    (101) expr1 -> HANDLE . ident
    (92) lambda_expr -> HANDLE . lambda_args expr
    (93) ident -> . IDENT
    (90) lambda_args -> . LPAREN RPAREN
    (91) lambda_args -> . LPAREN arg_list RPAREN

    IDENT           shift and go to state 15
    LPAREN          shift and go to state 127

    lambda_args                    shift and go to state 125
    ident                          shift and go to state 126

state 41

    (80) expr -> string .

    FIELD           reduce using rule 80 (expr -> string .)
    TRANSPOSE       reduce using rule 80 (expr -> string .)
    LBRACE          reduce using rule 80 (expr -> string .)
    LPAREN          reduce using rule 80 (expr -> string .)
    AND             reduce using rule 80 (expr -> string .)
    ANDAND          reduce using rule 80 (expr -> string .)
    BACKSLASH       reduce using rule 80 (expr -> string .)
    COLON           reduce using rule 80 (expr -> string .)
    DIV             reduce using rule 80 (expr -> string .)
    DOT             reduce using rule 80 (expr -> string .)
    DOTDIV          reduce using rule 80 (expr -> string .)
    DOTEXP          reduce using rule 80 (expr -> string .)
    DOTMUL          reduce using rule 80 (expr -> string .)
    DOTMULEQ        reduce using rule 80 (expr -> string .)
    EQEQ            reduce using rule 80 (expr -> string .)
    EXP             reduce using rule 80 (expr -> string .)
    GE              reduce using rule 80 (expr -> string .)
    GT              reduce using rule 80 (expr -> string .)
    LE              reduce using rule 80 (expr -> string .)
    LT              reduce using rule 80 (expr -> string .)
    MINUS           reduce using rule 80 (expr -> string .)
    MUL             reduce using rule 80 (expr -> string .)
    NE              reduce using rule 80 (expr -> string .)
    OR              reduce using rule 80 (expr -> string .)
    OROR            reduce using rule 80 (expr -> string .)
    PLUS            reduce using rule 80 (expr -> string .)
    EQ              reduce using rule 80 (expr -> string .)
    MULEQ           reduce using rule 80 (expr -> string .)
    DIVEQ           reduce using rule 80 (expr -> string .)
    MINUSEQ         reduce using rule 80 (expr -> string .)
    PLUSEQ          reduce using rule 80 (expr -> string .)
    OREQ            reduce using rule 80 (expr -> string .)
    ANDEQ           reduce using rule 80 (expr -> string .)
    COMMA           reduce using rule 80 (expr -> string .)
    SEMI            reduce using rule 80 (expr -> string .)
    RBRACKET        reduce using rule 80 (expr -> string .)
    RBRACE          reduce using rule 80 (expr -> string .)
    CASE            reduce using rule 80 (expr -> string .)
    OTHERWISE       reduce using rule 80 (expr -> string .)
    END_STMT        reduce using rule 80 (expr -> string .)
    RPAREN          reduce using rule 80 (expr -> string .)
    error           reduce using rule 80 (expr -> string .)


state 42

    (9) stmt -> break_stmt .

    END_STMT        reduce using rule 9 (stmt -> break_stmt .)
    CONTINUE        reduce using rule 9 (stmt -> break_stmt .)
    BREAK           reduce using rule 9 (stmt -> break_stmt .)
    GLOBAL          reduce using rule 9 (stmt -> break_stmt .)
    PERSISTENT      reduce using rule 9 (stmt -> break_stmt .)
    FOR             reduce using rule 9 (stmt -> break_stmt .)
    IF              reduce using rule 9 (stmt -> break_stmt .)
    SEMI            reduce using rule 9 (stmt -> break_stmt .)
    COMMA           reduce using rule 9 (stmt -> break_stmt .)
    RETURN          reduce using rule 9 (stmt -> break_stmt .)
    SWITCH          reduce using rule 9 (stmt -> break_stmt .)
    TRY             reduce using rule 9 (stmt -> break_stmt .)
    WHILE           reduce using rule 9 (stmt -> break_stmt .)
    UNWIND_PROTECT  reduce using rule 9 (stmt -> break_stmt .)
    IDENT           reduce using rule 9 (stmt -> break_stmt .)
    NEG             reduce using rule 9 (stmt -> break_stmt .)
    LPAREN          reduce using rule 9 (stmt -> break_stmt .)
    END_EXPR        reduce using rule 9 (stmt -> break_stmt .)
    NUMBER          reduce using rule 9 (stmt -> break_stmt .)
    STRING          reduce using rule 9 (stmt -> break_stmt .)
    COLON           reduce using rule 9 (stmt -> break_stmt .)
    LBRACKET        reduce using rule 9 (stmt -> break_stmt .)
    LBRACE          reduce using rule 9 (stmt -> break_stmt .)
    MINUS           reduce using rule 9 (stmt -> break_stmt .)
    PLUS            reduce using rule 9 (stmt -> break_stmt .)
    HANDLE          reduce using rule 9 (stmt -> break_stmt .)
    PLUSPLUS        reduce using rule 9 (stmt -> break_stmt .)
    MINUSMINUS      reduce using rule 9 (stmt -> break_stmt .)
    UNWIND_PROTECT_CLEANUP reduce using rule 9 (stmt -> break_stmt .)
    CASE            reduce using rule 9 (stmt -> break_stmt .)
    OTHERWISE       reduce using rule 9 (stmt -> break_stmt .)
    CATCH           reduce using rule 9 (stmt -> break_stmt .)
    END_UNWIND_PROTECT reduce using rule 9 (stmt -> break_stmt .)
    ELSE            reduce using rule 9 (stmt -> break_stmt .)
    ELSEIF          reduce using rule 9 (stmt -> break_stmt .)
    FUNCTION        reduce using rule 9 (stmt -> break_stmt .)
    $end            reduce using rule 9 (stmt -> break_stmt .)


state 43

    (78) expr -> end .

    FIELD           reduce using rule 78 (expr -> end .)
    TRANSPOSE       reduce using rule 78 (expr -> end .)
    LBRACE          reduce using rule 78 (expr -> end .)
    LPAREN          reduce using rule 78 (expr -> end .)
    AND             reduce using rule 78 (expr -> end .)
    ANDAND          reduce using rule 78 (expr -> end .)
    BACKSLASH       reduce using rule 78 (expr -> end .)
    COLON           reduce using rule 78 (expr -> end .)
    DIV             reduce using rule 78 (expr -> end .)
    DOT             reduce using rule 78 (expr -> end .)
    DOTDIV          reduce using rule 78 (expr -> end .)
    DOTEXP          reduce using rule 78 (expr -> end .)
    DOTMUL          reduce using rule 78 (expr -> end .)
    DOTMULEQ        reduce using rule 78 (expr -> end .)
    EQEQ            reduce using rule 78 (expr -> end .)
    EXP             reduce using rule 78 (expr -> end .)
    GE              reduce using rule 78 (expr -> end .)
    GT              reduce using rule 78 (expr -> end .)
    LE              reduce using rule 78 (expr -> end .)
    LT              reduce using rule 78 (expr -> end .)
    MINUS           reduce using rule 78 (expr -> end .)
    MUL             reduce using rule 78 (expr -> end .)
    NE              reduce using rule 78 (expr -> end .)
    OR              reduce using rule 78 (expr -> end .)
    OROR            reduce using rule 78 (expr -> end .)
    PLUS            reduce using rule 78 (expr -> end .)
    EQ              reduce using rule 78 (expr -> end .)
    MULEQ           reduce using rule 78 (expr -> end .)
    DIVEQ           reduce using rule 78 (expr -> end .)
    MINUSEQ         reduce using rule 78 (expr -> end .)
    PLUSEQ          reduce using rule 78 (expr -> end .)
    OREQ            reduce using rule 78 (expr -> end .)
    ANDEQ           reduce using rule 78 (expr -> end .)
    COMMA           reduce using rule 78 (expr -> end .)
    SEMI            reduce using rule 78 (expr -> end .)
    RBRACKET        reduce using rule 78 (expr -> end .)
    RBRACE          reduce using rule 78 (expr -> end .)
    CASE            reduce using rule 78 (expr -> end .)
    OTHERWISE       reduce using rule 78 (expr -> end .)
    END_STMT        reduce using rule 78 (expr -> end .)
    RPAREN          reduce using rule 78 (expr -> end .)
    error           reduce using rule 78 (expr -> end .)


state 44

    (43) null_stmt -> SEMI .

    END_STMT        reduce using rule 43 (null_stmt -> SEMI .)
    CONTINUE        reduce using rule 43 (null_stmt -> SEMI .)
    BREAK           reduce using rule 43 (null_stmt -> SEMI .)
    GLOBAL          reduce using rule 43 (null_stmt -> SEMI .)
    PERSISTENT      reduce using rule 43 (null_stmt -> SEMI .)
    FOR             reduce using rule 43 (null_stmt -> SEMI .)
    IF              reduce using rule 43 (null_stmt -> SEMI .)
    SEMI            reduce using rule 43 (null_stmt -> SEMI .)
    COMMA           reduce using rule 43 (null_stmt -> SEMI .)
    RETURN          reduce using rule 43 (null_stmt -> SEMI .)
    SWITCH          reduce using rule 43 (null_stmt -> SEMI .)
    TRY             reduce using rule 43 (null_stmt -> SEMI .)
    WHILE           reduce using rule 43 (null_stmt -> SEMI .)
    UNWIND_PROTECT  reduce using rule 43 (null_stmt -> SEMI .)
    IDENT           reduce using rule 43 (null_stmt -> SEMI .)
    NEG             reduce using rule 43 (null_stmt -> SEMI .)
    LPAREN          reduce using rule 43 (null_stmt -> SEMI .)
    END_EXPR        reduce using rule 43 (null_stmt -> SEMI .)
    NUMBER          reduce using rule 43 (null_stmt -> SEMI .)
    STRING          reduce using rule 43 (null_stmt -> SEMI .)
    COLON           reduce using rule 43 (null_stmt -> SEMI .)
    LBRACKET        reduce using rule 43 (null_stmt -> SEMI .)
    LBRACE          reduce using rule 43 (null_stmt -> SEMI .)
    MINUS           reduce using rule 43 (null_stmt -> SEMI .)
    PLUS            reduce using rule 43 (null_stmt -> SEMI .)
    HANDLE          reduce using rule 43 (null_stmt -> SEMI .)
    PLUSPLUS        reduce using rule 43 (null_stmt -> SEMI .)
    MINUSMINUS      reduce using rule 43 (null_stmt -> SEMI .)
    FUNCTION        reduce using rule 43 (null_stmt -> SEMI .)
    $end            reduce using rule 43 (null_stmt -> SEMI .)
    ELSE            reduce using rule 43 (null_stmt -> SEMI .)
    ELSEIF          reduce using rule 43 (null_stmt -> SEMI .)
    CATCH           reduce using rule 43 (null_stmt -> SEMI .)
    END_UNWIND_PROTECT reduce using rule 43 (null_stmt -> SEMI .)
    UNWIND_PROTECT_CLEANUP reduce using rule 43 (null_stmt -> SEMI .)
    CASE            reduce using rule 43 (null_stmt -> SEMI .)
    OTHERWISE       reduce using rule 43 (null_stmt -> SEMI .)


state 45

    (86) expr -> expr1 .

    FIELD           reduce using rule 86 (expr -> expr1 .)
    TRANSPOSE       reduce using rule 86 (expr -> expr1 .)
    LBRACE          reduce using rule 86 (expr -> expr1 .)
    LPAREN          reduce using rule 86 (expr -> expr1 .)
    AND             reduce using rule 86 (expr -> expr1 .)
    ANDAND          reduce using rule 86 (expr -> expr1 .)
    BACKSLASH       reduce using rule 86 (expr -> expr1 .)
    COLON           reduce using rule 86 (expr -> expr1 .)
    DIV             reduce using rule 86 (expr -> expr1 .)
    DOT             reduce using rule 86 (expr -> expr1 .)
    DOTDIV          reduce using rule 86 (expr -> expr1 .)
    DOTEXP          reduce using rule 86 (expr -> expr1 .)
    DOTMUL          reduce using rule 86 (expr -> expr1 .)
    DOTMULEQ        reduce using rule 86 (expr -> expr1 .)
    EQEQ            reduce using rule 86 (expr -> expr1 .)
    EXP             reduce using rule 86 (expr -> expr1 .)
    GE              reduce using rule 86 (expr -> expr1 .)
    GT              reduce using rule 86 (expr -> expr1 .)
    LE              reduce using rule 86 (expr -> expr1 .)
    LT              reduce using rule 86 (expr -> expr1 .)
    MINUS           reduce using rule 86 (expr -> expr1 .)
    MUL             reduce using rule 86 (expr -> expr1 .)
    NE              reduce using rule 86 (expr -> expr1 .)
    OR              reduce using rule 86 (expr -> expr1 .)
    OROR            reduce using rule 86 (expr -> expr1 .)
    PLUS            reduce using rule 86 (expr -> expr1 .)
    EQ              reduce using rule 86 (expr -> expr1 .)
    MULEQ           reduce using rule 86 (expr -> expr1 .)
    DIVEQ           reduce using rule 86 (expr -> expr1 .)
    MINUSEQ         reduce using rule 86 (expr -> expr1 .)
    PLUSEQ          reduce using rule 86 (expr -> expr1 .)
    OREQ            reduce using rule 86 (expr -> expr1 .)
    ANDEQ           reduce using rule 86 (expr -> expr1 .)
    COMMA           reduce using rule 86 (expr -> expr1 .)
    SEMI            reduce using rule 86 (expr -> expr1 .)
    RBRACKET        reduce using rule 86 (expr -> expr1 .)
    RBRACE          reduce using rule 86 (expr -> expr1 .)
    CASE            reduce using rule 86 (expr -> expr1 .)
    OTHERWISE       reduce using rule 86 (expr -> expr1 .)
    END_STMT        reduce using rule 86 (expr -> expr1 .)
    RPAREN          reduce using rule 86 (expr -> expr1 .)
    error           reduce using rule 86 (expr -> expr1 .)


state 46

    (44) null_stmt -> COMMA .

    END_STMT        reduce using rule 44 (null_stmt -> COMMA .)
    CONTINUE        reduce using rule 44 (null_stmt -> COMMA .)
    BREAK           reduce using rule 44 (null_stmt -> COMMA .)
    GLOBAL          reduce using rule 44 (null_stmt -> COMMA .)
    PERSISTENT      reduce using rule 44 (null_stmt -> COMMA .)
    FOR             reduce using rule 44 (null_stmt -> COMMA .)
    IF              reduce using rule 44 (null_stmt -> COMMA .)
    SEMI            reduce using rule 44 (null_stmt -> COMMA .)
    COMMA           reduce using rule 44 (null_stmt -> COMMA .)
    RETURN          reduce using rule 44 (null_stmt -> COMMA .)
    SWITCH          reduce using rule 44 (null_stmt -> COMMA .)
    TRY             reduce using rule 44 (null_stmt -> COMMA .)
    WHILE           reduce using rule 44 (null_stmt -> COMMA .)
    UNWIND_PROTECT  reduce using rule 44 (null_stmt -> COMMA .)
    IDENT           reduce using rule 44 (null_stmt -> COMMA .)
    NEG             reduce using rule 44 (null_stmt -> COMMA .)
    LPAREN          reduce using rule 44 (null_stmt -> COMMA .)
    END_EXPR        reduce using rule 44 (null_stmt -> COMMA .)
    NUMBER          reduce using rule 44 (null_stmt -> COMMA .)
    STRING          reduce using rule 44 (null_stmt -> COMMA .)
    COLON           reduce using rule 44 (null_stmt -> COMMA .)
    LBRACKET        reduce using rule 44 (null_stmt -> COMMA .)
    LBRACE          reduce using rule 44 (null_stmt -> COMMA .)
    MINUS           reduce using rule 44 (null_stmt -> COMMA .)
    PLUS            reduce using rule 44 (null_stmt -> COMMA .)
    HANDLE          reduce using rule 44 (null_stmt -> COMMA .)
    PLUSPLUS        reduce using rule 44 (null_stmt -> COMMA .)
    MINUSMINUS      reduce using rule 44 (null_stmt -> COMMA .)
    FUNCTION        reduce using rule 44 (null_stmt -> COMMA .)
    $end            reduce using rule 44 (null_stmt -> COMMA .)
    ELSE            reduce using rule 44 (null_stmt -> COMMA .)
    ELSEIF          reduce using rule 44 (null_stmt -> COMMA .)
    CATCH           reduce using rule 44 (null_stmt -> COMMA .)
    END_UNWIND_PROTECT reduce using rule 44 (null_stmt -> COMMA .)
    UNWIND_PROTECT_CLEANUP reduce using rule 44 (null_stmt -> COMMA .)
    CASE            reduce using rule 44 (null_stmt -> COMMA .)
    OTHERWISE       reduce using rule 44 (null_stmt -> COMMA .)


state 47

    (11) stmt -> global_stmt .

    END_STMT        reduce using rule 11 (stmt -> global_stmt .)
    CONTINUE        reduce using rule 11 (stmt -> global_stmt .)
    BREAK           reduce using rule 11 (stmt -> global_stmt .)
    GLOBAL          reduce using rule 11 (stmt -> global_stmt .)
    PERSISTENT      reduce using rule 11 (stmt -> global_stmt .)
    FOR             reduce using rule 11 (stmt -> global_stmt .)
    IF              reduce using rule 11 (stmt -> global_stmt .)
    SEMI            reduce using rule 11 (stmt -> global_stmt .)
    COMMA           reduce using rule 11 (stmt -> global_stmt .)
    RETURN          reduce using rule 11 (stmt -> global_stmt .)
    SWITCH          reduce using rule 11 (stmt -> global_stmt .)
    TRY             reduce using rule 11 (stmt -> global_stmt .)
    WHILE           reduce using rule 11 (stmt -> global_stmt .)
    UNWIND_PROTECT  reduce using rule 11 (stmt -> global_stmt .)
    IDENT           reduce using rule 11 (stmt -> global_stmt .)
    NEG             reduce using rule 11 (stmt -> global_stmt .)
    LPAREN          reduce using rule 11 (stmt -> global_stmt .)
    END_EXPR        reduce using rule 11 (stmt -> global_stmt .)
    NUMBER          reduce using rule 11 (stmt -> global_stmt .)
    STRING          reduce using rule 11 (stmt -> global_stmt .)
    COLON           reduce using rule 11 (stmt -> global_stmt .)
    LBRACKET        reduce using rule 11 (stmt -> global_stmt .)
    LBRACE          reduce using rule 11 (stmt -> global_stmt .)
    MINUS           reduce using rule 11 (stmt -> global_stmt .)
    PLUS            reduce using rule 11 (stmt -> global_stmt .)
    HANDLE          reduce using rule 11 (stmt -> global_stmt .)
    PLUSPLUS        reduce using rule 11 (stmt -> global_stmt .)
    MINUSMINUS      reduce using rule 11 (stmt -> global_stmt .)
    UNWIND_PROTECT_CLEANUP reduce using rule 11 (stmt -> global_stmt .)
    CASE            reduce using rule 11 (stmt -> global_stmt .)
    OTHERWISE       reduce using rule 11 (stmt -> global_stmt .)
    CATCH           reduce using rule 11 (stmt -> global_stmt .)
    END_UNWIND_PROTECT reduce using rule 11 (stmt -> global_stmt .)
    ELSE            reduce using rule 11 (stmt -> global_stmt .)
    ELSEIF          reduce using rule 11 (stmt -> global_stmt .)
    FUNCTION        reduce using rule 11 (stmt -> global_stmt .)
    $end            reduce using rule 11 (stmt -> global_stmt .)


state 48

    (96) string -> STRING .

    FIELD           reduce using rule 96 (string -> STRING .)
    TRANSPOSE       reduce using rule 96 (string -> STRING .)
    LBRACE          reduce using rule 96 (string -> STRING .)
    LPAREN          reduce using rule 96 (string -> STRING .)
    AND             reduce using rule 96 (string -> STRING .)
    ANDAND          reduce using rule 96 (string -> STRING .)
    BACKSLASH       reduce using rule 96 (string -> STRING .)
    COLON           reduce using rule 96 (string -> STRING .)
    DIV             reduce using rule 96 (string -> STRING .)
    DOT             reduce using rule 96 (string -> STRING .)
    DOTDIV          reduce using rule 96 (string -> STRING .)
    DOTEXP          reduce using rule 96 (string -> STRING .)
    DOTMUL          reduce using rule 96 (string -> STRING .)
    DOTMULEQ        reduce using rule 96 (string -> STRING .)
    EQEQ            reduce using rule 96 (string -> STRING .)
    EXP             reduce using rule 96 (string -> STRING .)
    GE              reduce using rule 96 (string -> STRING .)
    GT              reduce using rule 96 (string -> STRING .)
    LE              reduce using rule 96 (string -> STRING .)
    LT              reduce using rule 96 (string -> STRING .)
    MINUS           reduce using rule 96 (string -> STRING .)
    MUL             reduce using rule 96 (string -> STRING .)
    NE              reduce using rule 96 (string -> STRING .)
    OR              reduce using rule 96 (string -> STRING .)
    OROR            reduce using rule 96 (string -> STRING .)
    PLUS            reduce using rule 96 (string -> STRING .)
    EQ              reduce using rule 96 (string -> STRING .)
    MULEQ           reduce using rule 96 (string -> STRING .)
    DIVEQ           reduce using rule 96 (string -> STRING .)
    MINUSEQ         reduce using rule 96 (string -> STRING .)
    PLUSEQ          reduce using rule 96 (string -> STRING .)
    OREQ            reduce using rule 96 (string -> STRING .)
    ANDEQ           reduce using rule 96 (string -> STRING .)
    COMMA           reduce using rule 96 (string -> STRING .)
    SEMI            reduce using rule 96 (string -> STRING .)
    RPAREN          reduce using rule 96 (string -> STRING .)
    RBRACKET        reduce using rule 96 (string -> STRING .)
    RBRACE          reduce using rule 96 (string -> STRING .)
    CASE            reduce using rule 96 (string -> STRING .)
    OTHERWISE       reduce using rule 96 (string -> STRING .)
    END_STMT        reduce using rule 96 (string -> STRING .)
    error           reduce using rule 96 (string -> STRING .)


state 49

    (111) expr -> LPAREN . expr RPAREN
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 128
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 50

    (103) expr1 -> MINUSMINUS . ident
    (93) ident -> . IDENT

    IDENT           shift and go to state 15

    ident                          shift and go to state 129

state 51

    (69) if_stmt -> IF . expr sep stmt_list_opt elseif_stmt END_STMT
    (70) if_stmt -> IF . expr error stmt_list_opt elseif_stmt END_STMT
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    expr2                          shift and go to state 3
    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 130
    number                         shift and go to state 26
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 52

    (2) top -> stmt_list .
    (58) stmt_list -> stmt_list . stmt
    (8) stmt -> . continue_stmt
    (9) stmt -> . break_stmt
    (10) stmt -> . expr_stmt
    (11) stmt -> . global_stmt
    (12) stmt -> . persistent_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (21) stmt -> . unwind
    (35) continue_stmt -> . CONTINUE SEMI
    (36) break_stmt -> . BREAK SEMI
    (65) expr_stmt -> . expr_list SEMI
    (32) global_stmt -> . GLOBAL global_list SEMI
    (33) persistent_stmt -> . PERSISTENT expr SEMI
    (29) command -> . ident args SEMI
    (74) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (75) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (76) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (69) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (70) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (43) null_stmt -> . SEMI
    (44) null_stmt -> . COMMA
    (34) return_stmt -> . RETURN SEMI
    (37) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (41) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (42) try_catch -> . TRY stmt_list END_STMT
    (66) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (22) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (93) ident -> . IDENT
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    FUNCTION        reduce using rule 2 (top -> stmt_list .)
    $end            reduce using rule 2 (top -> stmt_list .)
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 38
    GLOBAL          shift and go to state 25
    PERSISTENT      shift and go to state 36
    FOR             shift and go to state 16
    IF              shift and go to state 51
    SEMI            shift and go to state 44
    COMMA           shift and go to state 46
    RETURN          shift and go to state 11
    SWITCH          shift and go to state 33
    TRY             shift and go to state 19
    WHILE           shift and go to state 27
    UNWIND_PROTECT  shift and go to state 6
    IDENT           shift and go to state 15
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    unwind                         shift and go to state 10
    expr_list                      shift and go to state 12
    number                         shift and go to state 26
    return_stmt                    shift and go to state 28
    switch_stmt                    shift and go to state 29
    break_stmt                     shift and go to state 42
    lambda_expr                    shift and go to state 30
    end                            shift and go to state 43
    matrix                         shift and go to state 13
    continue_stmt                  shift and go to state 31
    cellarray                      shift and go to state 21
    expr2                          shift and go to state 3
    expr1                          shift and go to state 45
    global_stmt                    shift and go to state 47
    string                         shift and go to state 41
    colon                          shift and go to state 9
    persistent_stmt                shift and go to state 5
    stmt                           shift and go to state 131
    for_stmt                       shift and go to state 53
    expr_stmt                      shift and go to state 7
    ident                          shift and go to state 34
    if_stmt                        shift and go to state 8
    expr                           shift and go to state 35
    try_catch                      shift and go to state 37
    exprs                          shift and go to state 54
    while_stmt                     shift and go to state 55
    command                        shift and go to state 56
    null_stmt                      shift and go to state 57

state 53

    (14) stmt -> for_stmt .

    END_STMT        reduce using rule 14 (stmt -> for_stmt .)
    CONTINUE        reduce using rule 14 (stmt -> for_stmt .)
    BREAK           reduce using rule 14 (stmt -> for_stmt .)
    GLOBAL          reduce using rule 14 (stmt -> for_stmt .)
    PERSISTENT      reduce using rule 14 (stmt -> for_stmt .)
    FOR             reduce using rule 14 (stmt -> for_stmt .)
    IF              reduce using rule 14 (stmt -> for_stmt .)
    SEMI            reduce using rule 14 (stmt -> for_stmt .)
    COMMA           reduce using rule 14 (stmt -> for_stmt .)
    RETURN          reduce using rule 14 (stmt -> for_stmt .)
    SWITCH          reduce using rule 14 (stmt -> for_stmt .)
    TRY             reduce using rule 14 (stmt -> for_stmt .)
    WHILE           reduce using rule 14 (stmt -> for_stmt .)
    UNWIND_PROTECT  reduce using rule 14 (stmt -> for_stmt .)
    IDENT           reduce using rule 14 (stmt -> for_stmt .)
    NEG             reduce using rule 14 (stmt -> for_stmt .)
    LPAREN          reduce using rule 14 (stmt -> for_stmt .)
    END_EXPR        reduce using rule 14 (stmt -> for_stmt .)
    NUMBER          reduce using rule 14 (stmt -> for_stmt .)
    STRING          reduce using rule 14 (stmt -> for_stmt .)
    COLON           reduce using rule 14 (stmt -> for_stmt .)
    LBRACKET        reduce using rule 14 (stmt -> for_stmt .)
    LBRACE          reduce using rule 14 (stmt -> for_stmt .)
    MINUS           reduce using rule 14 (stmt -> for_stmt .)
    PLUS            reduce using rule 14 (stmt -> for_stmt .)
    HANDLE          reduce using rule 14 (stmt -> for_stmt .)
    PLUSPLUS        reduce using rule 14 (stmt -> for_stmt .)
    MINUSMINUS      reduce using rule 14 (stmt -> for_stmt .)
    UNWIND_PROTECT_CLEANUP reduce using rule 14 (stmt -> for_stmt .)
    CASE            reduce using rule 14 (stmt -> for_stmt .)
    OTHERWISE       reduce using rule 14 (stmt -> for_stmt .)
    CATCH           reduce using rule 14 (stmt -> for_stmt .)
    END_UNWIND_PROTECT reduce using rule 14 (stmt -> for_stmt .)
    ELSE            reduce using rule 14 (stmt -> for_stmt .)
    ELSEIF          reduce using rule 14 (stmt -> for_stmt .)
    FUNCTION        reduce using rule 14 (stmt -> for_stmt .)
    $end            reduce using rule 14 (stmt -> for_stmt .)


state 54

    (61) expr_list -> exprs .
    (62) expr_list -> exprs . COMMA
    (64) exprs -> exprs . COMMA expr

    SEMI            reduce using rule 61 (expr_list -> exprs .)
    RBRACKET        reduce using rule 61 (expr_list -> exprs .)
    RBRACE          reduce using rule 61 (expr_list -> exprs .)
    RPAREN          reduce using rule 61 (expr_list -> exprs .)
    COMMA           shift and go to state 132


state 55

    (20) stmt -> while_stmt .

    END_STMT        reduce using rule 20 (stmt -> while_stmt .)
    CONTINUE        reduce using rule 20 (stmt -> while_stmt .)
    BREAK           reduce using rule 20 (stmt -> while_stmt .)
    GLOBAL          reduce using rule 20 (stmt -> while_stmt .)
    PERSISTENT      reduce using rule 20 (stmt -> while_stmt .)
    FOR             reduce using rule 20 (stmt -> while_stmt .)
    IF              reduce using rule 20 (stmt -> while_stmt .)
    SEMI            reduce using rule 20 (stmt -> while_stmt .)
    COMMA           reduce using rule 20 (stmt -> while_stmt .)
    RETURN          reduce using rule 20 (stmt -> while_stmt .)
    SWITCH          reduce using rule 20 (stmt -> while_stmt .)
    TRY             reduce using rule 20 (stmt -> while_stmt .)
    WHILE           reduce using rule 20 (stmt -> while_stmt .)
    UNWIND_PROTECT  reduce using rule 20 (stmt -> while_stmt .)
    IDENT           reduce using rule 20 (stmt -> while_stmt .)
    NEG             reduce using rule 20 (stmt -> while_stmt .)
    LPAREN          reduce using rule 20 (stmt -> while_stmt .)
    END_EXPR        reduce using rule 20 (stmt -> while_stmt .)
    NUMBER          reduce using rule 20 (stmt -> while_stmt .)
    STRING          reduce using rule 20 (stmt -> while_stmt .)
    COLON           reduce using rule 20 (stmt -> while_stmt .)
    LBRACKET        reduce using rule 20 (stmt -> while_stmt .)
    LBRACE          reduce using rule 20 (stmt -> while_stmt .)
    MINUS           reduce using rule 20 (stmt -> while_stmt .)
    PLUS            reduce using rule 20 (stmt -> while_stmt .)
    HANDLE          reduce using rule 20 (stmt -> while_stmt .)
    PLUSPLUS        reduce using rule 20 (stmt -> while_stmt .)
    MINUSMINUS      reduce using rule 20 (stmt -> while_stmt .)
    UNWIND_PROTECT_CLEANUP reduce using rule 20 (stmt -> while_stmt .)
    CASE            reduce using rule 20 (stmt -> while_stmt .)
    OTHERWISE       reduce using rule 20 (stmt -> while_stmt .)
    CATCH           reduce using rule 20 (stmt -> while_stmt .)
    END_UNWIND_PROTECT reduce using rule 20 (stmt -> while_stmt .)
    ELSE            reduce using rule 20 (stmt -> while_stmt .)
    ELSEIF          reduce using rule 20 (stmt -> while_stmt .)
    FUNCTION        reduce using rule 20 (stmt -> while_stmt .)
    $end            reduce using rule 20 (stmt -> while_stmt .)


state 56

    (13) stmt -> command .

    END_STMT        reduce using rule 13 (stmt -> command .)
    CONTINUE        reduce using rule 13 (stmt -> command .)
    BREAK           reduce using rule 13 (stmt -> command .)
    GLOBAL          reduce using rule 13 (stmt -> command .)
    PERSISTENT      reduce using rule 13 (stmt -> command .)
    FOR             reduce using rule 13 (stmt -> command .)
    IF              reduce using rule 13 (stmt -> command .)
    SEMI            reduce using rule 13 (stmt -> command .)
    COMMA           reduce using rule 13 (stmt -> command .)
    RETURN          reduce using rule 13 (stmt -> command .)
    SWITCH          reduce using rule 13 (stmt -> command .)
    TRY             reduce using rule 13 (stmt -> command .)
    WHILE           reduce using rule 13 (stmt -> command .)
    UNWIND_PROTECT  reduce using rule 13 (stmt -> command .)
    IDENT           reduce using rule 13 (stmt -> command .)
    NEG             reduce using rule 13 (stmt -> command .)
    LPAREN          reduce using rule 13 (stmt -> command .)
    END_EXPR        reduce using rule 13 (stmt -> command .)
    NUMBER          reduce using rule 13 (stmt -> command .)
    STRING          reduce using rule 13 (stmt -> command .)
    COLON           reduce using rule 13 (stmt -> command .)
    LBRACKET        reduce using rule 13 (stmt -> command .)
    LBRACE          reduce using rule 13 (stmt -> command .)
    MINUS           reduce using rule 13 (stmt -> command .)
    PLUS            reduce using rule 13 (stmt -> command .)
    HANDLE          reduce using rule 13 (stmt -> command .)
    PLUSPLUS        reduce using rule 13 (stmt -> command .)
    MINUSMINUS      reduce using rule 13 (stmt -> command .)
    UNWIND_PROTECT_CLEANUP reduce using rule 13 (stmt -> command .)
    CASE            reduce using rule 13 (stmt -> command .)
    OTHERWISE       reduce using rule 13 (stmt -> command .)
    CATCH           reduce using rule 13 (stmt -> command .)
    END_UNWIND_PROTECT reduce using rule 13 (stmt -> command .)
    ELSE            reduce using rule 13 (stmt -> command .)
    ELSEIF          reduce using rule 13 (stmt -> command .)
    FUNCTION        reduce using rule 13 (stmt -> command .)
    $end            reduce using rule 13 (stmt -> command .)


state 57

    (16) stmt -> null_stmt .

    END_STMT        reduce using rule 16 (stmt -> null_stmt .)
    CONTINUE        reduce using rule 16 (stmt -> null_stmt .)
    BREAK           reduce using rule 16 (stmt -> null_stmt .)
    GLOBAL          reduce using rule 16 (stmt -> null_stmt .)
    PERSISTENT      reduce using rule 16 (stmt -> null_stmt .)
    FOR             reduce using rule 16 (stmt -> null_stmt .)
    IF              reduce using rule 16 (stmt -> null_stmt .)
    SEMI            reduce using rule 16 (stmt -> null_stmt .)
    COMMA           reduce using rule 16 (stmt -> null_stmt .)
    RETURN          reduce using rule 16 (stmt -> null_stmt .)
    SWITCH          reduce using rule 16 (stmt -> null_stmt .)
    TRY             reduce using rule 16 (stmt -> null_stmt .)
    WHILE           reduce using rule 16 (stmt -> null_stmt .)
    UNWIND_PROTECT  reduce using rule 16 (stmt -> null_stmt .)
    IDENT           reduce using rule 16 (stmt -> null_stmt .)
    NEG             reduce using rule 16 (stmt -> null_stmt .)
    LPAREN          reduce using rule 16 (stmt -> null_stmt .)
    END_EXPR        reduce using rule 16 (stmt -> null_stmt .)
    NUMBER          reduce using rule 16 (stmt -> null_stmt .)
    STRING          reduce using rule 16 (stmt -> null_stmt .)
    COLON           reduce using rule 16 (stmt -> null_stmt .)
    LBRACKET        reduce using rule 16 (stmt -> null_stmt .)
    LBRACE          reduce using rule 16 (stmt -> null_stmt .)
    MINUS           reduce using rule 16 (stmt -> null_stmt .)
    PLUS            reduce using rule 16 (stmt -> null_stmt .)
    HANDLE          reduce using rule 16 (stmt -> null_stmt .)
    PLUSPLUS        reduce using rule 16 (stmt -> null_stmt .)
    MINUSMINUS      reduce using rule 16 (stmt -> null_stmt .)
    UNWIND_PROTECT_CLEANUP reduce using rule 16 (stmt -> null_stmt .)
    CASE            reduce using rule 16 (stmt -> null_stmt .)
    OTHERWISE       reduce using rule 16 (stmt -> null_stmt .)
    CATCH           reduce using rule 16 (stmt -> null_stmt .)
    END_UNWIND_PROTECT reduce using rule 16 (stmt -> null_stmt .)
    ELSE            reduce using rule 16 (stmt -> null_stmt .)
    ELSEIF          reduce using rule 16 (stmt -> null_stmt .)
    FUNCTION        reduce using rule 16 (stmt -> null_stmt .)
    $end            reduce using rule 16 (stmt -> null_stmt .)


state 58

    (109) matrix -> LBRACKET expr_list . RBRACKET
    (110) matrix -> LBRACKET expr_list . SEMI RBRACKET
    (59) concat_list -> expr_list . SEMI expr_list

    RBRACKET        shift and go to state 133
    SEMI            shift and go to state 134


state 59

    (107) matrix -> LBRACKET concat_list . RBRACKET
    (108) matrix -> LBRACKET concat_list . SEMI RBRACKET
    (60) concat_list -> concat_list . SEMI expr_list

    RBRACKET        shift and go to state 135
    SEMI            shift and go to state 136


state 60

    (77) expr -> ident .
    (88) expr -> ident . PLUSPLUS
    (89) expr -> ident . MINUSMINUS

    FIELD           reduce using rule 77 (expr -> ident .)
    TRANSPOSE       reduce using rule 77 (expr -> ident .)
    LBRACE          reduce using rule 77 (expr -> ident .)
    LPAREN          reduce using rule 77 (expr -> ident .)
    AND             reduce using rule 77 (expr -> ident .)
    ANDAND          reduce using rule 77 (expr -> ident .)
    BACKSLASH       reduce using rule 77 (expr -> ident .)
    COLON           reduce using rule 77 (expr -> ident .)
    DIV             reduce using rule 77 (expr -> ident .)
    DOT             reduce using rule 77 (expr -> ident .)
    DOTDIV          reduce using rule 77 (expr -> ident .)
    DOTEXP          reduce using rule 77 (expr -> ident .)
    DOTMUL          reduce using rule 77 (expr -> ident .)
    DOTMULEQ        reduce using rule 77 (expr -> ident .)
    EQEQ            reduce using rule 77 (expr -> ident .)
    EXP             reduce using rule 77 (expr -> ident .)
    GE              reduce using rule 77 (expr -> ident .)
    GT              reduce using rule 77 (expr -> ident .)
    LE              reduce using rule 77 (expr -> ident .)
    LT              reduce using rule 77 (expr -> ident .)
    MINUS           reduce using rule 77 (expr -> ident .)
    MUL             reduce using rule 77 (expr -> ident .)
    NE              reduce using rule 77 (expr -> ident .)
    OR              reduce using rule 77 (expr -> ident .)
    OROR            reduce using rule 77 (expr -> ident .)
    PLUS            reduce using rule 77 (expr -> ident .)
    EQ              reduce using rule 77 (expr -> ident .)
    MULEQ           reduce using rule 77 (expr -> ident .)
    DIVEQ           reduce using rule 77 (expr -> ident .)
    MINUSEQ         reduce using rule 77 (expr -> ident .)
    PLUSEQ          reduce using rule 77 (expr -> ident .)
    OREQ            reduce using rule 77 (expr -> ident .)
    ANDEQ           reduce using rule 77 (expr -> ident .)
    COMMA           reduce using rule 77 (expr -> ident .)
    SEMI            reduce using rule 77 (expr -> ident .)
    RBRACKET        reduce using rule 77 (expr -> ident .)
    RBRACE          reduce using rule 77 (expr -> ident .)
    CASE            reduce using rule 77 (expr -> ident .)
    OTHERWISE       reduce using rule 77 (expr -> ident .)
    END_STMT        reduce using rule 77 (expr -> ident .)
    RPAREN          reduce using rule 77 (expr -> ident .)
    error           reduce using rule 77 (expr -> ident .)
    PLUSPLUS        shift and go to state 83
    MINUSMINUS      shift and go to state 89


state 61

    (106) matrix -> LBRACKET RBRACKET .

    FIELD           reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    TRANSPOSE       reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    LBRACE          reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    LPAREN          reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    AND             reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    ANDAND          reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    BACKSLASH       reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    COLON           reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    DIV             reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    DOT             reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    DOTDIV          reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    DOTEXP          reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    DOTMUL          reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    DOTMULEQ        reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    EQEQ            reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    EXP             reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    GE              reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    GT              reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    LE              reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    LT              reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    MUL             reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    NE              reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    OR              reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    OROR            reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    EQ              reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    MULEQ           reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    DIVEQ           reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    MINUSEQ         reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    PLUSEQ          reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    OREQ            reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    ANDEQ           reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    SEMI            reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    RBRACE          reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    CASE            reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    OTHERWISE       reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    END_STMT        reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 106 (matrix -> LBRACKET RBRACKET .)
    error           reduce using rule 106 (matrix -> LBRACKET RBRACKET .)


state 62

    (98) expr1 -> MINUS expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    AND             reduce using rule 98 (expr1 -> MINUS expr .)
    ANDAND          reduce using rule 98 (expr1 -> MINUS expr .)
    BACKSLASH       reduce using rule 98 (expr1 -> MINUS expr .)
    COLON           reduce using rule 98 (expr1 -> MINUS expr .)
    DIV             reduce using rule 98 (expr1 -> MINUS expr .)
    DOTDIV          reduce using rule 98 (expr1 -> MINUS expr .)
    DOTMUL          reduce using rule 98 (expr1 -> MINUS expr .)
    DOTMULEQ        reduce using rule 98 (expr1 -> MINUS expr .)
    EQEQ            reduce using rule 98 (expr1 -> MINUS expr .)
    GE              reduce using rule 98 (expr1 -> MINUS expr .)
    GT              reduce using rule 98 (expr1 -> MINUS expr .)
    LE              reduce using rule 98 (expr1 -> MINUS expr .)
    LT              reduce using rule 98 (expr1 -> MINUS expr .)
    MINUS           reduce using rule 98 (expr1 -> MINUS expr .)
    MUL             reduce using rule 98 (expr1 -> MINUS expr .)
    NE              reduce using rule 98 (expr1 -> MINUS expr .)
    OR              reduce using rule 98 (expr1 -> MINUS expr .)
    OROR            reduce using rule 98 (expr1 -> MINUS expr .)
    PLUS            reduce using rule 98 (expr1 -> MINUS expr .)
    EQ              reduce using rule 98 (expr1 -> MINUS expr .)
    MULEQ           reduce using rule 98 (expr1 -> MINUS expr .)
    DIVEQ           reduce using rule 98 (expr1 -> MINUS expr .)
    MINUSEQ         reduce using rule 98 (expr1 -> MINUS expr .)
    PLUSEQ          reduce using rule 98 (expr1 -> MINUS expr .)
    OREQ            reduce using rule 98 (expr1 -> MINUS expr .)
    ANDEQ           reduce using rule 98 (expr1 -> MINUS expr .)
    COMMA           reduce using rule 98 (expr1 -> MINUS expr .)
    SEMI            reduce using rule 98 (expr1 -> MINUS expr .)
    RBRACKET        reduce using rule 98 (expr1 -> MINUS expr .)
    RBRACE          reduce using rule 98 (expr1 -> MINUS expr .)
    CASE            reduce using rule 98 (expr1 -> MINUS expr .)
    OTHERWISE       reduce using rule 98 (expr1 -> MINUS expr .)
    END_STMT        reduce using rule 98 (expr1 -> MINUS expr .)
    RPAREN          reduce using rule 98 (expr1 -> MINUS expr .)
    error           reduce using rule 98 (expr1 -> MINUS expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    DOT             shift and go to state 99
    DOTEXP          shift and go to state 118
    EXP             shift and go to state 94

  ! FIELD           [ reduce using rule 98 (expr1 -> MINUS expr .) ]
  ! TRANSPOSE       [ reduce using rule 98 (expr1 -> MINUS expr .) ]
  ! LBRACE          [ reduce using rule 98 (expr1 -> MINUS expr .) ]
  ! LPAREN          [ reduce using rule 98 (expr1 -> MINUS expr .) ]
  ! DOT             [ reduce using rule 98 (expr1 -> MINUS expr .) ]
  ! DOTEXP          [ reduce using rule 98 (expr1 -> MINUS expr .) ]
  ! EXP             [ reduce using rule 98 (expr1 -> MINUS expr .) ]
  ! AND             [ shift and go to state 119 ]
  ! ANDAND          [ shift and go to state 112 ]
  ! BACKSLASH       [ shift and go to state 103 ]
  ! COLON           [ shift and go to state 107 ]
  ! DIV             [ shift and go to state 96 ]
  ! DOTDIV          [ shift and go to state 90 ]
  ! DOTMUL          [ shift and go to state 97 ]
  ! DOTMULEQ        [ shift and go to state 104 ]
  ! EQEQ            [ shift and go to state 92 ]
  ! GE              [ shift and go to state 116 ]
  ! GT              [ shift and go to state 113 ]
  ! LE              [ shift and go to state 100 ]
  ! LT              [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 98 ]
  ! MUL             [ shift and go to state 95 ]
  ! NE              [ shift and go to state 93 ]
  ! OR              [ shift and go to state 122 ]
  ! OROR            [ shift and go to state 91 ]
  ! PLUS            [ shift and go to state 109 ]
  ! EQ              [ shift and go to state 101 ]
  ! MULEQ           [ shift and go to state 108 ]
  ! DIVEQ           [ shift and go to state 111 ]
  ! MINUSEQ         [ shift and go to state 105 ]
  ! PLUSEQ          [ shift and go to state 121 ]
  ! OREQ            [ shift and go to state 110 ]
  ! ANDEQ           [ shift and go to state 114 ]


state 63

    (99) expr1 -> PLUS expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    AND             reduce using rule 99 (expr1 -> PLUS expr .)
    ANDAND          reduce using rule 99 (expr1 -> PLUS expr .)
    BACKSLASH       reduce using rule 99 (expr1 -> PLUS expr .)
    COLON           reduce using rule 99 (expr1 -> PLUS expr .)
    DIV             reduce using rule 99 (expr1 -> PLUS expr .)
    DOTDIV          reduce using rule 99 (expr1 -> PLUS expr .)
    DOTMUL          reduce using rule 99 (expr1 -> PLUS expr .)
    DOTMULEQ        reduce using rule 99 (expr1 -> PLUS expr .)
    EQEQ            reduce using rule 99 (expr1 -> PLUS expr .)
    GE              reduce using rule 99 (expr1 -> PLUS expr .)
    GT              reduce using rule 99 (expr1 -> PLUS expr .)
    LE              reduce using rule 99 (expr1 -> PLUS expr .)
    LT              reduce using rule 99 (expr1 -> PLUS expr .)
    MINUS           reduce using rule 99 (expr1 -> PLUS expr .)
    MUL             reduce using rule 99 (expr1 -> PLUS expr .)
    NE              reduce using rule 99 (expr1 -> PLUS expr .)
    OR              reduce using rule 99 (expr1 -> PLUS expr .)
    OROR            reduce using rule 99 (expr1 -> PLUS expr .)
    PLUS            reduce using rule 99 (expr1 -> PLUS expr .)
    EQ              reduce using rule 99 (expr1 -> PLUS expr .)
    MULEQ           reduce using rule 99 (expr1 -> PLUS expr .)
    DIVEQ           reduce using rule 99 (expr1 -> PLUS expr .)
    MINUSEQ         reduce using rule 99 (expr1 -> PLUS expr .)
    PLUSEQ          reduce using rule 99 (expr1 -> PLUS expr .)
    OREQ            reduce using rule 99 (expr1 -> PLUS expr .)
    ANDEQ           reduce using rule 99 (expr1 -> PLUS expr .)
    COMMA           reduce using rule 99 (expr1 -> PLUS expr .)
    SEMI            reduce using rule 99 (expr1 -> PLUS expr .)
    RBRACKET        reduce using rule 99 (expr1 -> PLUS expr .)
    RBRACE          reduce using rule 99 (expr1 -> PLUS expr .)
    CASE            reduce using rule 99 (expr1 -> PLUS expr .)
    OTHERWISE       reduce using rule 99 (expr1 -> PLUS expr .)
    END_STMT        reduce using rule 99 (expr1 -> PLUS expr .)
    RPAREN          reduce using rule 99 (expr1 -> PLUS expr .)
    error           reduce using rule 99 (expr1 -> PLUS expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    DOT             shift and go to state 99
    DOTEXP          shift and go to state 118
    EXP             shift and go to state 94

  ! FIELD           [ reduce using rule 99 (expr1 -> PLUS expr .) ]
  ! TRANSPOSE       [ reduce using rule 99 (expr1 -> PLUS expr .) ]
  ! LBRACE          [ reduce using rule 99 (expr1 -> PLUS expr .) ]
  ! LPAREN          [ reduce using rule 99 (expr1 -> PLUS expr .) ]
  ! DOT             [ reduce using rule 99 (expr1 -> PLUS expr .) ]
  ! DOTEXP          [ reduce using rule 99 (expr1 -> PLUS expr .) ]
  ! EXP             [ reduce using rule 99 (expr1 -> PLUS expr .) ]
  ! AND             [ shift and go to state 119 ]
  ! ANDAND          [ shift and go to state 112 ]
  ! BACKSLASH       [ shift and go to state 103 ]
  ! COLON           [ shift and go to state 107 ]
  ! DIV             [ shift and go to state 96 ]
  ! DOTDIV          [ shift and go to state 90 ]
  ! DOTMUL          [ shift and go to state 97 ]
  ! DOTMULEQ        [ shift and go to state 104 ]
  ! EQEQ            [ shift and go to state 92 ]
  ! GE              [ shift and go to state 116 ]
  ! GT              [ shift and go to state 113 ]
  ! LE              [ shift and go to state 100 ]
  ! LT              [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 98 ]
  ! MUL             [ shift and go to state 95 ]
  ! NE              [ shift and go to state 93 ]
  ! OR              [ shift and go to state 122 ]
  ! OROR            [ shift and go to state 91 ]
  ! PLUS            [ shift and go to state 109 ]
  ! EQ              [ shift and go to state 101 ]
  ! MULEQ           [ shift and go to state 108 ]
  ! DIVEQ           [ shift and go to state 111 ]
  ! MINUSEQ         [ shift and go to state 105 ]
  ! PLUSEQ          [ shift and go to state 121 ]
  ! OREQ            [ shift and go to state 110 ]
  ! ANDEQ           [ shift and go to state 114 ]


state 64

    (22) unwind -> UNWIND_PROTECT stmt_list . UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (58) stmt_list -> stmt_list . stmt
    (8) stmt -> . continue_stmt
    (9) stmt -> . break_stmt
    (10) stmt -> . expr_stmt
    (11) stmt -> . global_stmt
    (12) stmt -> . persistent_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (21) stmt -> . unwind
    (35) continue_stmt -> . CONTINUE SEMI
    (36) break_stmt -> . BREAK SEMI
    (65) expr_stmt -> . expr_list SEMI
    (32) global_stmt -> . GLOBAL global_list SEMI
    (33) persistent_stmt -> . PERSISTENT expr SEMI
    (29) command -> . ident args SEMI
    (74) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (75) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (76) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (69) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (70) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (43) null_stmt -> . SEMI
    (44) null_stmt -> . COMMA
    (34) return_stmt -> . RETURN SEMI
    (37) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (41) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (42) try_catch -> . TRY stmt_list END_STMT
    (66) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (22) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (93) ident -> . IDENT
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    UNWIND_PROTECT_CLEANUP shift and go to state 137
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 38
    GLOBAL          shift and go to state 25
    PERSISTENT      shift and go to state 36
    FOR             shift and go to state 16
    IF              shift and go to state 51
    SEMI            shift and go to state 44
    COMMA           shift and go to state 46
    RETURN          shift and go to state 11
    SWITCH          shift and go to state 33
    TRY             shift and go to state 19
    WHILE           shift and go to state 27
    UNWIND_PROTECT  shift and go to state 6
    IDENT           shift and go to state 15
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    unwind                         shift and go to state 10
    expr_list                      shift and go to state 12
    number                         shift and go to state 26
    return_stmt                    shift and go to state 28
    switch_stmt                    shift and go to state 29
    break_stmt                     shift and go to state 42
    lambda_expr                    shift and go to state 30
    end                            shift and go to state 43
    matrix                         shift and go to state 13
    continue_stmt                  shift and go to state 31
    cellarray                      shift and go to state 21
    expr2                          shift and go to state 3
    expr1                          shift and go to state 45
    global_stmt                    shift and go to state 47
    string                         shift and go to state 41
    colon                          shift and go to state 9
    persistent_stmt                shift and go to state 5
    stmt                           shift and go to state 131
    for_stmt                       shift and go to state 53
    expr_stmt                      shift and go to state 7
    ident                          shift and go to state 34
    if_stmt                        shift and go to state 8
    expr                           shift and go to state 35
    try_catch                      shift and go to state 37
    exprs                          shift and go to state 54
    while_stmt                     shift and go to state 55
    command                        shift and go to state 56
    null_stmt                      shift and go to state 57

state 65

    (34) return_stmt -> RETURN SEMI .

    UNWIND_PROTECT_CLEANUP reduce using rule 34 (return_stmt -> RETURN SEMI .)
    CONTINUE        reduce using rule 34 (return_stmt -> RETURN SEMI .)
    BREAK           reduce using rule 34 (return_stmt -> RETURN SEMI .)
    GLOBAL          reduce using rule 34 (return_stmt -> RETURN SEMI .)
    PERSISTENT      reduce using rule 34 (return_stmt -> RETURN SEMI .)
    FOR             reduce using rule 34 (return_stmt -> RETURN SEMI .)
    IF              reduce using rule 34 (return_stmt -> RETURN SEMI .)
    SEMI            reduce using rule 34 (return_stmt -> RETURN SEMI .)
    COMMA           reduce using rule 34 (return_stmt -> RETURN SEMI .)
    RETURN          reduce using rule 34 (return_stmt -> RETURN SEMI .)
    SWITCH          reduce using rule 34 (return_stmt -> RETURN SEMI .)
    TRY             reduce using rule 34 (return_stmt -> RETURN SEMI .)
    WHILE           reduce using rule 34 (return_stmt -> RETURN SEMI .)
    UNWIND_PROTECT  reduce using rule 34 (return_stmt -> RETURN SEMI .)
    IDENT           reduce using rule 34 (return_stmt -> RETURN SEMI .)
    NEG             reduce using rule 34 (return_stmt -> RETURN SEMI .)
    LPAREN          reduce using rule 34 (return_stmt -> RETURN SEMI .)
    END_EXPR        reduce using rule 34 (return_stmt -> RETURN SEMI .)
    NUMBER          reduce using rule 34 (return_stmt -> RETURN SEMI .)
    STRING          reduce using rule 34 (return_stmt -> RETURN SEMI .)
    COLON           reduce using rule 34 (return_stmt -> RETURN SEMI .)
    LBRACKET        reduce using rule 34 (return_stmt -> RETURN SEMI .)
    LBRACE          reduce using rule 34 (return_stmt -> RETURN SEMI .)
    MINUS           reduce using rule 34 (return_stmt -> RETURN SEMI .)
    PLUS            reduce using rule 34 (return_stmt -> RETURN SEMI .)
    HANDLE          reduce using rule 34 (return_stmt -> RETURN SEMI .)
    PLUSPLUS        reduce using rule 34 (return_stmt -> RETURN SEMI .)
    MINUSMINUS      reduce using rule 34 (return_stmt -> RETURN SEMI .)
    END_STMT        reduce using rule 34 (return_stmt -> RETURN SEMI .)
    FUNCTION        reduce using rule 34 (return_stmt -> RETURN SEMI .)
    $end            reduce using rule 34 (return_stmt -> RETURN SEMI .)
    END_UNWIND_PROTECT reduce using rule 34 (return_stmt -> RETURN SEMI .)
    ELSE            reduce using rule 34 (return_stmt -> RETURN SEMI .)
    ELSEIF          reduce using rule 34 (return_stmt -> RETURN SEMI .)
    CASE            reduce using rule 34 (return_stmt -> RETURN SEMI .)
    OTHERWISE       reduce using rule 34 (return_stmt -> RETURN SEMI .)
    CATCH           reduce using rule 34 (return_stmt -> RETURN SEMI .)


state 66

    (65) expr_stmt -> expr_list SEMI .

    END_STMT        reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    CONTINUE        reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    BREAK           reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    GLOBAL          reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    PERSISTENT      reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    FOR             reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    IF              reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    SEMI            reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    COMMA           reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    RETURN          reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    SWITCH          reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    TRY             reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    WHILE           reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    UNWIND_PROTECT  reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    IDENT           reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    NEG             reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    LPAREN          reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    END_EXPR        reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    NUMBER          reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    STRING          reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    COLON           reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    LBRACKET        reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    LBRACE          reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    MINUS           reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    PLUS            reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    HANDLE          reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    PLUSPLUS        reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    MINUSMINUS      reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    FUNCTION        reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    $end            reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    END_UNWIND_PROTECT reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    ELSE            reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    ELSEIF          reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    UNWIND_PROTECT_CLEANUP reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    CATCH           reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    CASE            reduce using rule 65 (expr_stmt -> expr_list SEMI .)
    OTHERWISE       reduce using rule 65 (expr_stmt -> expr_list SEMI .)


state 67

    (74) for_stmt -> FOR ident . EQ expr SEMI stmt_list END_STMT

    EQ              shift and go to state 138


state 68

    (75) for_stmt -> FOR LPAREN . ident EQ expr RPAREN SEMI stmt_list END_STMT
    (93) ident -> . IDENT

    IDENT           shift and go to state 15

    ident                          shift and go to state 139

state 69

    (76) for_stmt -> FOR matrix . EQ expr SEMI stmt_list END_STMT

    EQ              shift and go to state 140


state 70

    (102) expr1 -> PLUSPLUS ident .

    FIELD           reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    TRANSPOSE       reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    LBRACE          reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    LPAREN          reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    AND             reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    ANDAND          reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    BACKSLASH       reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    COLON           reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    DIV             reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    DOT             reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    DOTDIV          reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    DOTEXP          reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    DOTMUL          reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    DOTMULEQ        reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    EQEQ            reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    EXP             reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    GE              reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    GT              reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    LE              reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    LT              reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    MINUS           reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    MUL             reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    NE              reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    OR              reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    OROR            reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    PLUS            reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    EQ              reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    MULEQ           reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    DIVEQ           reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    MINUSEQ         reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    PLUSEQ          reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    OREQ            reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    ANDEQ           reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    COMMA           reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    SEMI            reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    RBRACKET        reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    RBRACE          reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    CASE            reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    OTHERWISE       reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    END_STMT        reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    RPAREN          reduce using rule 102 (expr1 -> PLUSPLUS ident .)
    error           reduce using rule 102 (expr1 -> PLUSPLUS ident .)


state 71

    (41) try_catch -> TRY stmt_list . CATCH stmt_list END_STMT
    (42) try_catch -> TRY stmt_list . END_STMT
    (58) stmt_list -> stmt_list . stmt
    (8) stmt -> . continue_stmt
    (9) stmt -> . break_stmt
    (10) stmt -> . expr_stmt
    (11) stmt -> . global_stmt
    (12) stmt -> . persistent_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (21) stmt -> . unwind
    (35) continue_stmt -> . CONTINUE SEMI
    (36) break_stmt -> . BREAK SEMI
    (65) expr_stmt -> . expr_list SEMI
    (32) global_stmt -> . GLOBAL global_list SEMI
    (33) persistent_stmt -> . PERSISTENT expr SEMI
    (29) command -> . ident args SEMI
    (74) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (75) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (76) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (69) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (70) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (43) null_stmt -> . SEMI
    (44) null_stmt -> . COMMA
    (34) return_stmt -> . RETURN SEMI
    (37) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (41) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (42) try_catch -> . TRY stmt_list END_STMT
    (66) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (22) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (93) ident -> . IDENT
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    CATCH           shift and go to state 142
    END_STMT        shift and go to state 141
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 38
    GLOBAL          shift and go to state 25
    PERSISTENT      shift and go to state 36
    FOR             shift and go to state 16
    IF              shift and go to state 51
    SEMI            shift and go to state 44
    COMMA           shift and go to state 46
    RETURN          shift and go to state 11
    SWITCH          shift and go to state 33
    TRY             shift and go to state 19
    WHILE           shift and go to state 27
    UNWIND_PROTECT  shift and go to state 6
    IDENT           shift and go to state 15
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    unwind                         shift and go to state 10
    expr_list                      shift and go to state 12
    number                         shift and go to state 26
    return_stmt                    shift and go to state 28
    switch_stmt                    shift and go to state 29
    break_stmt                     shift and go to state 42
    lambda_expr                    shift and go to state 30
    end                            shift and go to state 43
    matrix                         shift and go to state 13
    continue_stmt                  shift and go to state 31
    cellarray                      shift and go to state 21
    expr2                          shift and go to state 3
    expr1                          shift and go to state 45
    global_stmt                    shift and go to state 47
    string                         shift and go to state 41
    colon                          shift and go to state 9
    persistent_stmt                shift and go to state 5
    stmt                           shift and go to state 131
    for_stmt                       shift and go to state 53
    expr_stmt                      shift and go to state 7
    ident                          shift and go to state 34
    if_stmt                        shift and go to state 8
    expr                           shift and go to state 35
    try_catch                      shift and go to state 37
    exprs                          shift and go to state 54
    while_stmt                     shift and go to state 55
    command                        shift and go to state 56
    null_stmt                      shift and go to state 57

state 72

    (105) cellarray -> LBRACE expr_list . RBRACE

    RBRACE          shift and go to state 143


state 73

    (104) cellarray -> LBRACE RBRACE .

    FIELD           reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    TRANSPOSE       reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    LBRACE          reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    LPAREN          reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    AND             reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    ANDAND          reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    BACKSLASH       reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    COLON           reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    DIV             reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    DOT             reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    DOTDIV          reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    DOTEXP          reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    DOTMUL          reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    DOTMULEQ        reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    EQEQ            reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    EXP             reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    GE              reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    GT              reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    LE              reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    LT              reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    MINUS           reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    MUL             reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    NE              reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    OR              reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    OROR            reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    PLUS            reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    EQ              reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    MULEQ           reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    DIVEQ           reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    MINUSEQ         reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    PLUSEQ          reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    OREQ            reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    ANDEQ           reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    COMMA           reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    SEMI            reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    RBRACKET        reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    RBRACE          reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    CASE            reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    OTHERWISE       reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    END_STMT        reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    RPAREN          reduce using rule 104 (cellarray -> LBRACE RBRACE .)
    error           reduce using rule 104 (cellarray -> LBRACE RBRACE .)


state 74

    (35) continue_stmt -> CONTINUE SEMI .

    END_STMT        reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    BREAK           reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    GLOBAL          reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    PERSISTENT      reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    FOR             reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    IF              reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    SEMI            reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    COMMA           reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    RETURN          reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    SWITCH          reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    TRY             reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    WHILE           reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    UNWIND_PROTECT  reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    IDENT           reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    NEG             reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    LPAREN          reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    END_EXPR        reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    NUMBER          reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    STRING          reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    COLON           reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    LBRACKET        reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    LBRACE          reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    MINUS           reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    PLUS            reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    HANDLE          reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    PLUSPLUS        reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    MINUSMINUS      reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    FUNCTION        reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    $end            reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    END_UNWIND_PROTECT reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    ELSE            reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    ELSEIF          reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    CASE            reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    OTHERWISE       reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    UNWIND_PROTECT_CLEANUP reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)
    CATCH           reduce using rule 35 (continue_stmt -> CONTINUE SEMI .)


state 75

    (100) expr1 -> NEG expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    AND             reduce using rule 100 (expr1 -> NEG expr .)
    ANDAND          reduce using rule 100 (expr1 -> NEG expr .)
    BACKSLASH       reduce using rule 100 (expr1 -> NEG expr .)
    COLON           reduce using rule 100 (expr1 -> NEG expr .)
    DIV             reduce using rule 100 (expr1 -> NEG expr .)
    DOTDIV          reduce using rule 100 (expr1 -> NEG expr .)
    DOTMUL          reduce using rule 100 (expr1 -> NEG expr .)
    DOTMULEQ        reduce using rule 100 (expr1 -> NEG expr .)
    EQEQ            reduce using rule 100 (expr1 -> NEG expr .)
    GE              reduce using rule 100 (expr1 -> NEG expr .)
    GT              reduce using rule 100 (expr1 -> NEG expr .)
    LE              reduce using rule 100 (expr1 -> NEG expr .)
    LT              reduce using rule 100 (expr1 -> NEG expr .)
    MINUS           reduce using rule 100 (expr1 -> NEG expr .)
    MUL             reduce using rule 100 (expr1 -> NEG expr .)
    NE              reduce using rule 100 (expr1 -> NEG expr .)
    OR              reduce using rule 100 (expr1 -> NEG expr .)
    OROR            reduce using rule 100 (expr1 -> NEG expr .)
    PLUS            reduce using rule 100 (expr1 -> NEG expr .)
    EQ              reduce using rule 100 (expr1 -> NEG expr .)
    MULEQ           reduce using rule 100 (expr1 -> NEG expr .)
    DIVEQ           reduce using rule 100 (expr1 -> NEG expr .)
    MINUSEQ         reduce using rule 100 (expr1 -> NEG expr .)
    PLUSEQ          reduce using rule 100 (expr1 -> NEG expr .)
    OREQ            reduce using rule 100 (expr1 -> NEG expr .)
    ANDEQ           reduce using rule 100 (expr1 -> NEG expr .)
    COMMA           reduce using rule 100 (expr1 -> NEG expr .)
    SEMI            reduce using rule 100 (expr1 -> NEG expr .)
    RBRACKET        reduce using rule 100 (expr1 -> NEG expr .)
    RBRACE          reduce using rule 100 (expr1 -> NEG expr .)
    CASE            reduce using rule 100 (expr1 -> NEG expr .)
    OTHERWISE       reduce using rule 100 (expr1 -> NEG expr .)
    END_STMT        reduce using rule 100 (expr1 -> NEG expr .)
    RPAREN          reduce using rule 100 (expr1 -> NEG expr .)
    error           reduce using rule 100 (expr1 -> NEG expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    DOT             shift and go to state 99
    DOTEXP          shift and go to state 118
    EXP             shift and go to state 94

  ! FIELD           [ reduce using rule 100 (expr1 -> NEG expr .) ]
  ! TRANSPOSE       [ reduce using rule 100 (expr1 -> NEG expr .) ]
  ! LBRACE          [ reduce using rule 100 (expr1 -> NEG expr .) ]
  ! LPAREN          [ reduce using rule 100 (expr1 -> NEG expr .) ]
  ! DOT             [ reduce using rule 100 (expr1 -> NEG expr .) ]
  ! DOTEXP          [ reduce using rule 100 (expr1 -> NEG expr .) ]
  ! EXP             [ reduce using rule 100 (expr1 -> NEG expr .) ]
  ! AND             [ shift and go to state 119 ]
  ! ANDAND          [ shift and go to state 112 ]
  ! BACKSLASH       [ shift and go to state 103 ]
  ! COLON           [ shift and go to state 107 ]
  ! DIV             [ shift and go to state 96 ]
  ! DOTDIV          [ shift and go to state 90 ]
  ! DOTMUL          [ shift and go to state 97 ]
  ! DOTMULEQ        [ shift and go to state 104 ]
  ! EQEQ            [ shift and go to state 92 ]
  ! GE              [ shift and go to state 116 ]
  ! GT              [ shift and go to state 113 ]
  ! LE              [ shift and go to state 100 ]
  ! LT              [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 98 ]
  ! MUL             [ shift and go to state 95 ]
  ! NE              [ shift and go to state 93 ]
  ! OR              [ shift and go to state 122 ]
  ! OROR            [ shift and go to state 91 ]
  ! PLUS            [ shift and go to state 109 ]
  ! EQ              [ shift and go to state 101 ]
  ! MULEQ           [ shift and go to state 108 ]
  ! DIVEQ           [ shift and go to state 111 ]
  ! MINUSEQ         [ shift and go to state 105 ]
  ! PLUSEQ          [ shift and go to state 121 ]
  ! OREQ            [ shift and go to state 110 ]
  ! ANDEQ           [ shift and go to state 114 ]


state 76

    (30) global_list -> ident .

    SEMI            reduce using rule 30 (global_list -> ident .)
    IDENT           reduce using rule 30 (global_list -> ident .)


state 77

    (32) global_stmt -> GLOBAL global_list . SEMI
    (31) global_list -> global_list . ident
    (93) ident -> . IDENT

    SEMI            shift and go to state 145
    IDENT           shift and go to state 15

    ident                          shift and go to state 144

state 78

    (66) while_stmt -> WHILE expr . SEMI stmt_list END_STMT
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    SEMI            shift and go to state 146
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    AND             shift and go to state 119
    ANDAND          shift and go to state 112
    BACKSLASH       shift and go to state 103
    COLON           shift and go to state 107
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    DOTMULEQ        shift and go to state 104
    EQEQ            shift and go to state 92
    EXP             shift and go to state 94
    GE              shift and go to state 116
    GT              shift and go to state 113
    LE              shift and go to state 100
    LT              shift and go to state 106
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    NE              shift and go to state 93
    OR              shift and go to state 122
    OROR            shift and go to state 91
    PLUS            shift and go to state 109
    EQ              shift and go to state 101
    MULEQ           shift and go to state 108
    DIVEQ           shift and go to state 111
    MINUSEQ         shift and go to state 105
    PLUSEQ          shift and go to state 121
    OREQ            shift and go to state 110
    ANDEQ           shift and go to state 114


state 79

    (3) top -> top func_decl . stmt_list_opt
    (4) top -> top func_decl . stmt_list END_STMT semi_opt
    (55) stmt_list_opt -> .
    (56) stmt_list_opt -> . stmt_list
    (57) stmt_list -> . stmt
    (58) stmt_list -> . stmt_list stmt
    (8) stmt -> . continue_stmt
    (9) stmt -> . break_stmt
    (10) stmt -> . expr_stmt
    (11) stmt -> . global_stmt
    (12) stmt -> . persistent_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (21) stmt -> . unwind
    (35) continue_stmt -> . CONTINUE SEMI
    (36) break_stmt -> . BREAK SEMI
    (65) expr_stmt -> . expr_list SEMI
    (32) global_stmt -> . GLOBAL global_list SEMI
    (33) persistent_stmt -> . PERSISTENT expr SEMI
    (29) command -> . ident args SEMI
    (74) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (75) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (76) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (69) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (70) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (43) null_stmt -> . SEMI
    (44) null_stmt -> . COMMA
    (34) return_stmt -> . RETURN SEMI
    (37) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (41) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (42) try_catch -> . TRY stmt_list END_STMT
    (66) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (22) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (93) ident -> . IDENT
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    FUNCTION        reduce using rule 55 (stmt_list_opt -> .)
    $end            reduce using rule 55 (stmt_list_opt -> .)
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 38
    GLOBAL          shift and go to state 25
    PERSISTENT      shift and go to state 36
    FOR             shift and go to state 16
    IF              shift and go to state 51
    SEMI            shift and go to state 44
    COMMA           shift and go to state 46
    RETURN          shift and go to state 11
    SWITCH          shift and go to state 33
    TRY             shift and go to state 19
    WHILE           shift and go to state 27
    UNWIND_PROTECT  shift and go to state 6
    IDENT           shift and go to state 15
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    unwind                         shift and go to state 10
    expr_list                      shift and go to state 12
    number                         shift and go to state 26
    stmt_list_opt                  shift and go to state 147
    return_stmt                    shift and go to state 28
    switch_stmt                    shift and go to state 29
    break_stmt                     shift and go to state 42
    lambda_expr                    shift and go to state 30
    end                            shift and go to state 43
    matrix                         shift and go to state 13
    continue_stmt                  shift and go to state 31
    cellarray                      shift and go to state 21
    expr2                          shift and go to state 3
    expr1                          shift and go to state 45
    global_stmt                    shift and go to state 47
    string                         shift and go to state 41
    colon                          shift and go to state 9
    persistent_stmt                shift and go to state 5
    stmt                           shift and go to state 18
    for_stmt                       shift and go to state 53
    expr_stmt                      shift and go to state 7
    stmt_list                      shift and go to state 148
    ident                          shift and go to state 34
    if_stmt                        shift and go to state 8
    expr                           shift and go to state 35
    try_catch                      shift and go to state 37
    exprs                          shift and go to state 54
    while_stmt                     shift and go to state 55
    command                        shift and go to state 56
    null_stmt                      shift and go to state 57

state 80

    (45) func_decl -> FUNCTION . ident args_opt SEMI
    (46) func_decl -> FUNCTION . ret EQ ident args_opt SEMI
    (93) ident -> . IDENT
    (52) ret -> . ident
    (53) ret -> . LBRACKET RBRACKET
    (54) ret -> . LBRACKET expr_list RBRACKET

    IDENT           shift and go to state 15
    LBRACKET        shift and go to state 151

    ident                          shift and go to state 149
    ret                            shift and go to state 150

state 81

    (37) switch_stmt -> SWITCH expr . semi_opt case_list END_STMT
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr
    (5) semi_opt -> .
    (6) semi_opt -> . semi_opt SEMI
    (7) semi_opt -> . semi_opt COMMA

    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    AND             shift and go to state 119
    ANDAND          shift and go to state 112
    BACKSLASH       shift and go to state 103
    COLON           shift and go to state 107
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    DOTMULEQ        shift and go to state 104
    EQEQ            shift and go to state 92
    EXP             shift and go to state 94
    GE              shift and go to state 116
    GT              shift and go to state 113
    LE              shift and go to state 100
    LT              shift and go to state 106
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    NE              shift and go to state 93
    OR              shift and go to state 122
    OROR            shift and go to state 91
    PLUS            shift and go to state 109
    EQ              shift and go to state 101
    MULEQ           shift and go to state 108
    DIVEQ           shift and go to state 111
    MINUSEQ         shift and go to state 105
    PLUSEQ          shift and go to state 121
    OREQ            shift and go to state 110
    ANDEQ           shift and go to state 114
    SEMI            reduce using rule 5 (semi_opt -> .)
    COMMA           reduce using rule 5 (semi_opt -> .)
    CASE            reduce using rule 5 (semi_opt -> .)
    OTHERWISE       reduce using rule 5 (semi_opt -> .)
    END_STMT        reduce using rule 5 (semi_opt -> .)

    semi_opt                       shift and go to state 152

state 82

    (23) arg1 -> STRING .

    SEMI            reduce using rule 23 (arg1 -> STRING .)
    STRING          reduce using rule 23 (arg1 -> STRING .)
    NUMBER          reduce using rule 23 (arg1 -> STRING .)
    IDENT           reduce using rule 23 (arg1 -> STRING .)
    GLOBAL          reduce using rule 23 (arg1 -> STRING .)


state 83

    (88) expr -> ident PLUSPLUS .

    FIELD           reduce using rule 88 (expr -> ident PLUSPLUS .)
    TRANSPOSE       reduce using rule 88 (expr -> ident PLUSPLUS .)
    LBRACE          reduce using rule 88 (expr -> ident PLUSPLUS .)
    LPAREN          reduce using rule 88 (expr -> ident PLUSPLUS .)
    AND             reduce using rule 88 (expr -> ident PLUSPLUS .)
    ANDAND          reduce using rule 88 (expr -> ident PLUSPLUS .)
    BACKSLASH       reduce using rule 88 (expr -> ident PLUSPLUS .)
    COLON           reduce using rule 88 (expr -> ident PLUSPLUS .)
    DIV             reduce using rule 88 (expr -> ident PLUSPLUS .)
    DOT             reduce using rule 88 (expr -> ident PLUSPLUS .)
    DOTDIV          reduce using rule 88 (expr -> ident PLUSPLUS .)
    DOTEXP          reduce using rule 88 (expr -> ident PLUSPLUS .)
    DOTMUL          reduce using rule 88 (expr -> ident PLUSPLUS .)
    DOTMULEQ        reduce using rule 88 (expr -> ident PLUSPLUS .)
    EQEQ            reduce using rule 88 (expr -> ident PLUSPLUS .)
    EXP             reduce using rule 88 (expr -> ident PLUSPLUS .)
    GE              reduce using rule 88 (expr -> ident PLUSPLUS .)
    GT              reduce using rule 88 (expr -> ident PLUSPLUS .)
    LE              reduce using rule 88 (expr -> ident PLUSPLUS .)
    LT              reduce using rule 88 (expr -> ident PLUSPLUS .)
    MINUS           reduce using rule 88 (expr -> ident PLUSPLUS .)
    MUL             reduce using rule 88 (expr -> ident PLUSPLUS .)
    NE              reduce using rule 88 (expr -> ident PLUSPLUS .)
    OR              reduce using rule 88 (expr -> ident PLUSPLUS .)
    OROR            reduce using rule 88 (expr -> ident PLUSPLUS .)
    PLUS            reduce using rule 88 (expr -> ident PLUSPLUS .)
    EQ              reduce using rule 88 (expr -> ident PLUSPLUS .)
    MULEQ           reduce using rule 88 (expr -> ident PLUSPLUS .)
    DIVEQ           reduce using rule 88 (expr -> ident PLUSPLUS .)
    MINUSEQ         reduce using rule 88 (expr -> ident PLUSPLUS .)
    PLUSEQ          reduce using rule 88 (expr -> ident PLUSPLUS .)
    OREQ            reduce using rule 88 (expr -> ident PLUSPLUS .)
    ANDEQ           reduce using rule 88 (expr -> ident PLUSPLUS .)
    COMMA           reduce using rule 88 (expr -> ident PLUSPLUS .)
    SEMI            reduce using rule 88 (expr -> ident PLUSPLUS .)
    RBRACKET        reduce using rule 88 (expr -> ident PLUSPLUS .)
    RBRACE          reduce using rule 88 (expr -> ident PLUSPLUS .)
    CASE            reduce using rule 88 (expr -> ident PLUSPLUS .)
    OTHERWISE       reduce using rule 88 (expr -> ident PLUSPLUS .)
    END_STMT        reduce using rule 88 (expr -> ident PLUSPLUS .)
    RPAREN          reduce using rule 88 (expr -> ident PLUSPLUS .)
    error           reduce using rule 88 (expr -> ident PLUSPLUS .)


state 84

    (27) args -> arg1 .

    SEMI            reduce using rule 27 (args -> arg1 .)
    STRING          reduce using rule 27 (args -> arg1 .)
    NUMBER          reduce using rule 27 (args -> arg1 .)
    IDENT           reduce using rule 27 (args -> arg1 .)
    GLOBAL          reduce using rule 27 (args -> arg1 .)


state 85

    (29) command -> ident args . SEMI
    (28) args -> args . arg1
    (23) arg1 -> . STRING
    (24) arg1 -> . NUMBER
    (25) arg1 -> . IDENT
    (26) arg1 -> . GLOBAL

    SEMI            shift and go to state 153
    STRING          shift and go to state 82
    NUMBER          shift and go to state 86
    IDENT           shift and go to state 87
    GLOBAL          shift and go to state 88

    arg1                           shift and go to state 154

state 86

    (24) arg1 -> NUMBER .

    SEMI            reduce using rule 24 (arg1 -> NUMBER .)
    STRING          reduce using rule 24 (arg1 -> NUMBER .)
    NUMBER          reduce using rule 24 (arg1 -> NUMBER .)
    IDENT           reduce using rule 24 (arg1 -> NUMBER .)
    GLOBAL          reduce using rule 24 (arg1 -> NUMBER .)


state 87

    (25) arg1 -> IDENT .

    SEMI            reduce using rule 25 (arg1 -> IDENT .)
    STRING          reduce using rule 25 (arg1 -> IDENT .)
    NUMBER          reduce using rule 25 (arg1 -> IDENT .)
    IDENT           reduce using rule 25 (arg1 -> IDENT .)
    GLOBAL          reduce using rule 25 (arg1 -> IDENT .)


state 88

    (26) arg1 -> GLOBAL .

    SEMI            reduce using rule 26 (arg1 -> GLOBAL .)
    STRING          reduce using rule 26 (arg1 -> GLOBAL .)
    NUMBER          reduce using rule 26 (arg1 -> GLOBAL .)
    IDENT           reduce using rule 26 (arg1 -> GLOBAL .)
    GLOBAL          reduce using rule 26 (arg1 -> GLOBAL .)


state 89

    (89) expr -> ident MINUSMINUS .

    FIELD           reduce using rule 89 (expr -> ident MINUSMINUS .)
    TRANSPOSE       reduce using rule 89 (expr -> ident MINUSMINUS .)
    LBRACE          reduce using rule 89 (expr -> ident MINUSMINUS .)
    LPAREN          reduce using rule 89 (expr -> ident MINUSMINUS .)
    AND             reduce using rule 89 (expr -> ident MINUSMINUS .)
    ANDAND          reduce using rule 89 (expr -> ident MINUSMINUS .)
    BACKSLASH       reduce using rule 89 (expr -> ident MINUSMINUS .)
    COLON           reduce using rule 89 (expr -> ident MINUSMINUS .)
    DIV             reduce using rule 89 (expr -> ident MINUSMINUS .)
    DOT             reduce using rule 89 (expr -> ident MINUSMINUS .)
    DOTDIV          reduce using rule 89 (expr -> ident MINUSMINUS .)
    DOTEXP          reduce using rule 89 (expr -> ident MINUSMINUS .)
    DOTMUL          reduce using rule 89 (expr -> ident MINUSMINUS .)
    DOTMULEQ        reduce using rule 89 (expr -> ident MINUSMINUS .)
    EQEQ            reduce using rule 89 (expr -> ident MINUSMINUS .)
    EXP             reduce using rule 89 (expr -> ident MINUSMINUS .)
    GE              reduce using rule 89 (expr -> ident MINUSMINUS .)
    GT              reduce using rule 89 (expr -> ident MINUSMINUS .)
    LE              reduce using rule 89 (expr -> ident MINUSMINUS .)
    LT              reduce using rule 89 (expr -> ident MINUSMINUS .)
    MINUS           reduce using rule 89 (expr -> ident MINUSMINUS .)
    MUL             reduce using rule 89 (expr -> ident MINUSMINUS .)
    NE              reduce using rule 89 (expr -> ident MINUSMINUS .)
    OR              reduce using rule 89 (expr -> ident MINUSMINUS .)
    OROR            reduce using rule 89 (expr -> ident MINUSMINUS .)
    PLUS            reduce using rule 89 (expr -> ident MINUSMINUS .)
    EQ              reduce using rule 89 (expr -> ident MINUSMINUS .)
    MULEQ           reduce using rule 89 (expr -> ident MINUSMINUS .)
    DIVEQ           reduce using rule 89 (expr -> ident MINUSMINUS .)
    MINUSEQ         reduce using rule 89 (expr -> ident MINUSMINUS .)
    PLUSEQ          reduce using rule 89 (expr -> ident MINUSMINUS .)
    OREQ            reduce using rule 89 (expr -> ident MINUSMINUS .)
    ANDEQ           reduce using rule 89 (expr -> ident MINUSMINUS .)
    COMMA           reduce using rule 89 (expr -> ident MINUSMINUS .)
    SEMI            reduce using rule 89 (expr -> ident MINUSMINUS .)
    RBRACKET        reduce using rule 89 (expr -> ident MINUSMINUS .)
    RBRACE          reduce using rule 89 (expr -> ident MINUSMINUS .)
    CASE            reduce using rule 89 (expr -> ident MINUSMINUS .)
    OTHERWISE       reduce using rule 89 (expr -> ident MINUSMINUS .)
    END_STMT        reduce using rule 89 (expr -> ident MINUSMINUS .)
    RPAREN          reduce using rule 89 (expr -> ident MINUSMINUS .)
    error           reduce using rule 89 (expr -> ident MINUSMINUS .)


state 90

    (124) expr2 -> expr DOTDIV . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 155
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 91

    (138) expr2 -> expr OROR . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 156
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 92

    (128) expr2 -> expr EQEQ . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 157
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 93

    (136) expr2 -> expr NE . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 158
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 94

    (129) expr2 -> expr EXP . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 159
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 95

    (135) expr2 -> expr MUL . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 160
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 96

    (122) expr2 -> expr DIV . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 161
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 97

    (126) expr2 -> expr DOTMUL . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 162
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 98

    (134) expr2 -> expr MINUS . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 163
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 99

    (123) expr2 -> expr DOT . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 164
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 100

    (132) expr2 -> expr LE . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 165
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 101

    (140) expr2 -> expr EQ . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 166
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 102

    (113) expr -> expr TRANSPOSE .

    FIELD           reduce using rule 113 (expr -> expr TRANSPOSE .)
    TRANSPOSE       reduce using rule 113 (expr -> expr TRANSPOSE .)
    LBRACE          reduce using rule 113 (expr -> expr TRANSPOSE .)
    LPAREN          reduce using rule 113 (expr -> expr TRANSPOSE .)
    AND             reduce using rule 113 (expr -> expr TRANSPOSE .)
    ANDAND          reduce using rule 113 (expr -> expr TRANSPOSE .)
    BACKSLASH       reduce using rule 113 (expr -> expr TRANSPOSE .)
    COLON           reduce using rule 113 (expr -> expr TRANSPOSE .)
    DIV             reduce using rule 113 (expr -> expr TRANSPOSE .)
    DOT             reduce using rule 113 (expr -> expr TRANSPOSE .)
    DOTDIV          reduce using rule 113 (expr -> expr TRANSPOSE .)
    DOTEXP          reduce using rule 113 (expr -> expr TRANSPOSE .)
    DOTMUL          reduce using rule 113 (expr -> expr TRANSPOSE .)
    DOTMULEQ        reduce using rule 113 (expr -> expr TRANSPOSE .)
    EQEQ            reduce using rule 113 (expr -> expr TRANSPOSE .)
    EXP             reduce using rule 113 (expr -> expr TRANSPOSE .)
    GE              reduce using rule 113 (expr -> expr TRANSPOSE .)
    GT              reduce using rule 113 (expr -> expr TRANSPOSE .)
    LE              reduce using rule 113 (expr -> expr TRANSPOSE .)
    LT              reduce using rule 113 (expr -> expr TRANSPOSE .)
    MINUS           reduce using rule 113 (expr -> expr TRANSPOSE .)
    MUL             reduce using rule 113 (expr -> expr TRANSPOSE .)
    NE              reduce using rule 113 (expr -> expr TRANSPOSE .)
    OR              reduce using rule 113 (expr -> expr TRANSPOSE .)
    OROR            reduce using rule 113 (expr -> expr TRANSPOSE .)
    PLUS            reduce using rule 113 (expr -> expr TRANSPOSE .)
    EQ              reduce using rule 113 (expr -> expr TRANSPOSE .)
    MULEQ           reduce using rule 113 (expr -> expr TRANSPOSE .)
    DIVEQ           reduce using rule 113 (expr -> expr TRANSPOSE .)
    MINUSEQ         reduce using rule 113 (expr -> expr TRANSPOSE .)
    PLUSEQ          reduce using rule 113 (expr -> expr TRANSPOSE .)
    OREQ            reduce using rule 113 (expr -> expr TRANSPOSE .)
    ANDEQ           reduce using rule 113 (expr -> expr TRANSPOSE .)
    COMMA           reduce using rule 113 (expr -> expr TRANSPOSE .)
    SEMI            reduce using rule 113 (expr -> expr TRANSPOSE .)
    RBRACKET        reduce using rule 113 (expr -> expr TRANSPOSE .)
    RBRACE          reduce using rule 113 (expr -> expr TRANSPOSE .)
    CASE            reduce using rule 113 (expr -> expr TRANSPOSE .)
    OTHERWISE       reduce using rule 113 (expr -> expr TRANSPOSE .)
    END_STMT        reduce using rule 113 (expr -> expr TRANSPOSE .)
    RPAREN          reduce using rule 113 (expr -> expr TRANSPOSE .)
    error           reduce using rule 113 (expr -> expr TRANSPOSE .)


state 103

    (120) expr2 -> expr BACKSLASH . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 167
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 104

    (127) expr2 -> expr DOTMULEQ . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 168
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 105

    (143) expr2 -> expr MINUSEQ . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 169
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 106

    (133) expr2 -> expr LT . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 170
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 107

    (121) expr2 -> expr COLON . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 171
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 108

    (141) expr2 -> expr MULEQ . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 172
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 109

    (139) expr2 -> expr PLUS . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 173
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 110

    (145) expr2 -> expr OREQ . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 174
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 111

    (142) expr2 -> expr DIVEQ . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 175
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 112

    (119) expr2 -> expr ANDAND . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 176
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 113

    (131) expr2 -> expr GT . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 177
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 114

    (146) expr2 -> expr ANDEQ . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 178
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 115

    (112) expr -> expr FIELD .

    FIELD           reduce using rule 112 (expr -> expr FIELD .)
    TRANSPOSE       reduce using rule 112 (expr -> expr FIELD .)
    LBRACE          reduce using rule 112 (expr -> expr FIELD .)
    LPAREN          reduce using rule 112 (expr -> expr FIELD .)
    AND             reduce using rule 112 (expr -> expr FIELD .)
    ANDAND          reduce using rule 112 (expr -> expr FIELD .)
    BACKSLASH       reduce using rule 112 (expr -> expr FIELD .)
    COLON           reduce using rule 112 (expr -> expr FIELD .)
    DIV             reduce using rule 112 (expr -> expr FIELD .)
    DOT             reduce using rule 112 (expr -> expr FIELD .)
    DOTDIV          reduce using rule 112 (expr -> expr FIELD .)
    DOTEXP          reduce using rule 112 (expr -> expr FIELD .)
    DOTMUL          reduce using rule 112 (expr -> expr FIELD .)
    DOTMULEQ        reduce using rule 112 (expr -> expr FIELD .)
    EQEQ            reduce using rule 112 (expr -> expr FIELD .)
    EXP             reduce using rule 112 (expr -> expr FIELD .)
    GE              reduce using rule 112 (expr -> expr FIELD .)
    GT              reduce using rule 112 (expr -> expr FIELD .)
    LE              reduce using rule 112 (expr -> expr FIELD .)
    LT              reduce using rule 112 (expr -> expr FIELD .)
    MINUS           reduce using rule 112 (expr -> expr FIELD .)
    MUL             reduce using rule 112 (expr -> expr FIELD .)
    NE              reduce using rule 112 (expr -> expr FIELD .)
    OR              reduce using rule 112 (expr -> expr FIELD .)
    OROR            reduce using rule 112 (expr -> expr FIELD .)
    PLUS            reduce using rule 112 (expr -> expr FIELD .)
    EQ              reduce using rule 112 (expr -> expr FIELD .)
    MULEQ           reduce using rule 112 (expr -> expr FIELD .)
    DIVEQ           reduce using rule 112 (expr -> expr FIELD .)
    MINUSEQ         reduce using rule 112 (expr -> expr FIELD .)
    PLUSEQ          reduce using rule 112 (expr -> expr FIELD .)
    OREQ            reduce using rule 112 (expr -> expr FIELD .)
    ANDEQ           reduce using rule 112 (expr -> expr FIELD .)
    COMMA           reduce using rule 112 (expr -> expr FIELD .)
    SEMI            reduce using rule 112 (expr -> expr FIELD .)
    RBRACKET        reduce using rule 112 (expr -> expr FIELD .)
    RBRACE          reduce using rule 112 (expr -> expr FIELD .)
    CASE            reduce using rule 112 (expr -> expr FIELD .)
    OTHERWISE       reduce using rule 112 (expr -> expr FIELD .)
    END_STMT        reduce using rule 112 (expr -> expr FIELD .)
    RPAREN          reduce using rule 112 (expr -> expr FIELD .)
    error           reduce using rule 112 (expr -> expr FIELD .)


state 116

    (130) expr2 -> expr GE . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 179
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 117

    (116) expr -> expr LPAREN . expr_list RPAREN
    (117) expr -> expr LPAREN . RPAREN
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    RPAREN          shift and go to state 180
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 35
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    exprs                          shift and go to state 54
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    expr_list                      shift and go to state 181
    matrix                         shift and go to state 13

state 118

    (125) expr2 -> expr DOTEXP . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 182
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 119

    (118) expr2 -> expr AND . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 183
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 120

    (114) expr -> expr LBRACE . expr_list RBRACE
    (115) expr -> expr LBRACE . RBRACE
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    RBRACE          shift and go to state 185
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 35
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    exprs                          shift and go to state 54
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    expr_list                      shift and go to state 184
    matrix                         shift and go to state 13

state 121

    (144) expr2 -> expr PLUSEQ . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 186
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 122

    (137) expr2 -> expr OR . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 187
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 123

    (33) persistent_stmt -> PERSISTENT expr . SEMI
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    SEMI            shift and go to state 188
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    AND             shift and go to state 119
    ANDAND          shift and go to state 112
    BACKSLASH       shift and go to state 103
    COLON           shift and go to state 107
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    DOTMULEQ        shift and go to state 104
    EQEQ            shift and go to state 92
    EXP             shift and go to state 94
    GE              shift and go to state 116
    GT              shift and go to state 113
    LE              shift and go to state 100
    LT              shift and go to state 106
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    NE              shift and go to state 93
    OR              shift and go to state 122
    OROR            shift and go to state 91
    PLUS            shift and go to state 109
    EQ              shift and go to state 101
    MULEQ           shift and go to state 108
    DIVEQ           shift and go to state 111
    MINUSEQ         shift and go to state 105
    PLUSEQ          shift and go to state 121
    OREQ            shift and go to state 110
    ANDEQ           shift and go to state 114


state 124

    (36) break_stmt -> BREAK SEMI .

    END_UNWIND_PROTECT reduce using rule 36 (break_stmt -> BREAK SEMI .)
    CONTINUE        reduce using rule 36 (break_stmt -> BREAK SEMI .)
    BREAK           reduce using rule 36 (break_stmt -> BREAK SEMI .)
    GLOBAL          reduce using rule 36 (break_stmt -> BREAK SEMI .)
    PERSISTENT      reduce using rule 36 (break_stmt -> BREAK SEMI .)
    FOR             reduce using rule 36 (break_stmt -> BREAK SEMI .)
    IF              reduce using rule 36 (break_stmt -> BREAK SEMI .)
    SEMI            reduce using rule 36 (break_stmt -> BREAK SEMI .)
    COMMA           reduce using rule 36 (break_stmt -> BREAK SEMI .)
    RETURN          reduce using rule 36 (break_stmt -> BREAK SEMI .)
    SWITCH          reduce using rule 36 (break_stmt -> BREAK SEMI .)
    TRY             reduce using rule 36 (break_stmt -> BREAK SEMI .)
    WHILE           reduce using rule 36 (break_stmt -> BREAK SEMI .)
    UNWIND_PROTECT  reduce using rule 36 (break_stmt -> BREAK SEMI .)
    IDENT           reduce using rule 36 (break_stmt -> BREAK SEMI .)
    NEG             reduce using rule 36 (break_stmt -> BREAK SEMI .)
    LPAREN          reduce using rule 36 (break_stmt -> BREAK SEMI .)
    END_EXPR        reduce using rule 36 (break_stmt -> BREAK SEMI .)
    NUMBER          reduce using rule 36 (break_stmt -> BREAK SEMI .)
    STRING          reduce using rule 36 (break_stmt -> BREAK SEMI .)
    COLON           reduce using rule 36 (break_stmt -> BREAK SEMI .)
    LBRACKET        reduce using rule 36 (break_stmt -> BREAK SEMI .)
    LBRACE          reduce using rule 36 (break_stmt -> BREAK SEMI .)
    MINUS           reduce using rule 36 (break_stmt -> BREAK SEMI .)
    PLUS            reduce using rule 36 (break_stmt -> BREAK SEMI .)
    HANDLE          reduce using rule 36 (break_stmt -> BREAK SEMI .)
    PLUSPLUS        reduce using rule 36 (break_stmt -> BREAK SEMI .)
    MINUSMINUS      reduce using rule 36 (break_stmt -> BREAK SEMI .)
    END_STMT        reduce using rule 36 (break_stmt -> BREAK SEMI .)
    CASE            reduce using rule 36 (break_stmt -> BREAK SEMI .)
    OTHERWISE       reduce using rule 36 (break_stmt -> BREAK SEMI .)
    ELSE            reduce using rule 36 (break_stmt -> BREAK SEMI .)
    ELSEIF          reduce using rule 36 (break_stmt -> BREAK SEMI .)
    UNWIND_PROTECT_CLEANUP reduce using rule 36 (break_stmt -> BREAK SEMI .)
    FUNCTION        reduce using rule 36 (break_stmt -> BREAK SEMI .)
    $end            reduce using rule 36 (break_stmt -> BREAK SEMI .)
    CATCH           reduce using rule 36 (break_stmt -> BREAK SEMI .)


state 125

    (92) lambda_expr -> HANDLE lambda_args . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 189
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 126

    (101) expr1 -> HANDLE ident .

    FIELD           reduce using rule 101 (expr1 -> HANDLE ident .)
    TRANSPOSE       reduce using rule 101 (expr1 -> HANDLE ident .)
    LBRACE          reduce using rule 101 (expr1 -> HANDLE ident .)
    LPAREN          reduce using rule 101 (expr1 -> HANDLE ident .)
    AND             reduce using rule 101 (expr1 -> HANDLE ident .)
    ANDAND          reduce using rule 101 (expr1 -> HANDLE ident .)
    BACKSLASH       reduce using rule 101 (expr1 -> HANDLE ident .)
    COLON           reduce using rule 101 (expr1 -> HANDLE ident .)
    DIV             reduce using rule 101 (expr1 -> HANDLE ident .)
    DOT             reduce using rule 101 (expr1 -> HANDLE ident .)
    DOTDIV          reduce using rule 101 (expr1 -> HANDLE ident .)
    DOTEXP          reduce using rule 101 (expr1 -> HANDLE ident .)
    DOTMUL          reduce using rule 101 (expr1 -> HANDLE ident .)
    DOTMULEQ        reduce using rule 101 (expr1 -> HANDLE ident .)
    EQEQ            reduce using rule 101 (expr1 -> HANDLE ident .)
    EXP             reduce using rule 101 (expr1 -> HANDLE ident .)
    GE              reduce using rule 101 (expr1 -> HANDLE ident .)
    GT              reduce using rule 101 (expr1 -> HANDLE ident .)
    LE              reduce using rule 101 (expr1 -> HANDLE ident .)
    LT              reduce using rule 101 (expr1 -> HANDLE ident .)
    MINUS           reduce using rule 101 (expr1 -> HANDLE ident .)
    MUL             reduce using rule 101 (expr1 -> HANDLE ident .)
    NE              reduce using rule 101 (expr1 -> HANDLE ident .)
    OR              reduce using rule 101 (expr1 -> HANDLE ident .)
    OROR            reduce using rule 101 (expr1 -> HANDLE ident .)
    PLUS            reduce using rule 101 (expr1 -> HANDLE ident .)
    EQ              reduce using rule 101 (expr1 -> HANDLE ident .)
    MULEQ           reduce using rule 101 (expr1 -> HANDLE ident .)
    DIVEQ           reduce using rule 101 (expr1 -> HANDLE ident .)
    MINUSEQ         reduce using rule 101 (expr1 -> HANDLE ident .)
    PLUSEQ          reduce using rule 101 (expr1 -> HANDLE ident .)
    OREQ            reduce using rule 101 (expr1 -> HANDLE ident .)
    ANDEQ           reduce using rule 101 (expr1 -> HANDLE ident .)
    COMMA           reduce using rule 101 (expr1 -> HANDLE ident .)
    SEMI            reduce using rule 101 (expr1 -> HANDLE ident .)
    RBRACKET        reduce using rule 101 (expr1 -> HANDLE ident .)
    RBRACE          reduce using rule 101 (expr1 -> HANDLE ident .)
    CASE            reduce using rule 101 (expr1 -> HANDLE ident .)
    OTHERWISE       reduce using rule 101 (expr1 -> HANDLE ident .)
    END_STMT        reduce using rule 101 (expr1 -> HANDLE ident .)
    RPAREN          reduce using rule 101 (expr1 -> HANDLE ident .)
    error           reduce using rule 101 (expr1 -> HANDLE ident .)


state 127

    (90) lambda_args -> LPAREN . RPAREN
    (91) lambda_args -> LPAREN . arg_list RPAREN
    (50) arg_list -> . ident
    (51) arg_list -> . arg_list COMMA ident
    (93) ident -> . IDENT

    RPAREN          shift and go to state 190
    IDENT           shift and go to state 15

    ident                          shift and go to state 191
    arg_list                       shift and go to state 192

state 128

    (111) expr -> LPAREN expr . RPAREN
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    RPAREN          shift and go to state 193
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    AND             shift and go to state 119
    ANDAND          shift and go to state 112
    BACKSLASH       shift and go to state 103
    COLON           shift and go to state 107
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    DOTMULEQ        shift and go to state 104
    EQEQ            shift and go to state 92
    EXP             shift and go to state 94
    GE              shift and go to state 116
    GT              shift and go to state 113
    LE              shift and go to state 100
    LT              shift and go to state 106
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    NE              shift and go to state 93
    OR              shift and go to state 122
    OROR            shift and go to state 91
    PLUS            shift and go to state 109
    EQ              shift and go to state 101
    MULEQ           shift and go to state 108
    DIVEQ           shift and go to state 111
    MINUSEQ         shift and go to state 105
    PLUSEQ          shift and go to state 121
    OREQ            shift and go to state 110
    ANDEQ           shift and go to state 114


state 129

    (103) expr1 -> MINUSMINUS ident .

    FIELD           reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    TRANSPOSE       reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    LBRACE          reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    LPAREN          reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    AND             reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    ANDAND          reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    BACKSLASH       reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    COLON           reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    DIV             reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    DOT             reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    DOTDIV          reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    DOTEXP          reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    DOTMUL          reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    DOTMULEQ        reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    EQEQ            reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    EXP             reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    GE              reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    GT              reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    LE              reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    LT              reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    MINUS           reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    MUL             reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    NE              reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    OR              reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    OROR            reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    PLUS            reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    EQ              reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    MULEQ           reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    DIVEQ           reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    MINUSEQ         reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    PLUSEQ          reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    OREQ            reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    ANDEQ           reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    COMMA           reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    SEMI            reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    RBRACKET        reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    RBRACE          reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    CASE            reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    OTHERWISE       reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    END_STMT        reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    RPAREN          reduce using rule 103 (expr1 -> MINUSMINUS ident .)
    error           reduce using rule 103 (expr1 -> MINUSMINUS ident .)


state 130

    (69) if_stmt -> IF expr . sep stmt_list_opt elseif_stmt END_STMT
    (70) if_stmt -> IF expr . error stmt_list_opt elseif_stmt END_STMT
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr
    (67) sep -> . COMMA
    (68) sep -> . SEMI

    error           shift and go to state 196
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    AND             shift and go to state 119
    ANDAND          shift and go to state 112
    BACKSLASH       shift and go to state 103
    COLON           shift and go to state 107
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    DOTMULEQ        shift and go to state 104
    EQEQ            shift and go to state 92
    EXP             shift and go to state 94
    GE              shift and go to state 116
    GT              shift and go to state 113
    LE              shift and go to state 100
    LT              shift and go to state 106
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    NE              shift and go to state 93
    OR              shift and go to state 122
    OROR            shift and go to state 91
    PLUS            shift and go to state 109
    EQ              shift and go to state 101
    MULEQ           shift and go to state 108
    DIVEQ           shift and go to state 111
    MINUSEQ         shift and go to state 105
    PLUSEQ          shift and go to state 121
    OREQ            shift and go to state 110
    ANDEQ           shift and go to state 114
    COMMA           shift and go to state 197
    SEMI            shift and go to state 195

    sep                            shift and go to state 194

state 131

    (58) stmt_list -> stmt_list stmt .

    CONTINUE        reduce using rule 58 (stmt_list -> stmt_list stmt .)
    BREAK           reduce using rule 58 (stmt_list -> stmt_list stmt .)
    GLOBAL          reduce using rule 58 (stmt_list -> stmt_list stmt .)
    PERSISTENT      reduce using rule 58 (stmt_list -> stmt_list stmt .)
    FOR             reduce using rule 58 (stmt_list -> stmt_list stmt .)
    IF              reduce using rule 58 (stmt_list -> stmt_list stmt .)
    SEMI            reduce using rule 58 (stmt_list -> stmt_list stmt .)
    COMMA           reduce using rule 58 (stmt_list -> stmt_list stmt .)
    RETURN          reduce using rule 58 (stmt_list -> stmt_list stmt .)
    SWITCH          reduce using rule 58 (stmt_list -> stmt_list stmt .)
    TRY             reduce using rule 58 (stmt_list -> stmt_list stmt .)
    WHILE           reduce using rule 58 (stmt_list -> stmt_list stmt .)
    UNWIND_PROTECT  reduce using rule 58 (stmt_list -> stmt_list stmt .)
    IDENT           reduce using rule 58 (stmt_list -> stmt_list stmt .)
    NEG             reduce using rule 58 (stmt_list -> stmt_list stmt .)
    LPAREN          reduce using rule 58 (stmt_list -> stmt_list stmt .)
    END_EXPR        reduce using rule 58 (stmt_list -> stmt_list stmt .)
    NUMBER          reduce using rule 58 (stmt_list -> stmt_list stmt .)
    STRING          reduce using rule 58 (stmt_list -> stmt_list stmt .)
    COLON           reduce using rule 58 (stmt_list -> stmt_list stmt .)
    LBRACKET        reduce using rule 58 (stmt_list -> stmt_list stmt .)
    LBRACE          reduce using rule 58 (stmt_list -> stmt_list stmt .)
    MINUS           reduce using rule 58 (stmt_list -> stmt_list stmt .)
    PLUS            reduce using rule 58 (stmt_list -> stmt_list stmt .)
    HANDLE          reduce using rule 58 (stmt_list -> stmt_list stmt .)
    PLUSPLUS        reduce using rule 58 (stmt_list -> stmt_list stmt .)
    MINUSMINUS      reduce using rule 58 (stmt_list -> stmt_list stmt .)
    ELSE            reduce using rule 58 (stmt_list -> stmt_list stmt .)
    ELSEIF          reduce using rule 58 (stmt_list -> stmt_list stmt .)
    END_STMT        reduce using rule 58 (stmt_list -> stmt_list stmt .)
    UNWIND_PROTECT_CLEANUP reduce using rule 58 (stmt_list -> stmt_list stmt .)
    END_UNWIND_PROTECT reduce using rule 58 (stmt_list -> stmt_list stmt .)
    FUNCTION        reduce using rule 58 (stmt_list -> stmt_list stmt .)
    $end            reduce using rule 58 (stmt_list -> stmt_list stmt .)
    CASE            reduce using rule 58 (stmt_list -> stmt_list stmt .)
    OTHERWISE       reduce using rule 58 (stmt_list -> stmt_list stmt .)
    CATCH           reduce using rule 58 (stmt_list -> stmt_list stmt .)


state 132

    (62) expr_list -> exprs COMMA .
    (64) exprs -> exprs COMMA . expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    SEMI            reduce using rule 62 (expr_list -> exprs COMMA .)
    RBRACKET        reduce using rule 62 (expr_list -> exprs COMMA .)
    RBRACE          reduce using rule 62 (expr_list -> exprs COMMA .)
    RPAREN          reduce using rule 62 (expr_list -> exprs COMMA .)
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 198
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 133

    (109) matrix -> LBRACKET expr_list RBRACKET .

    FIELD           reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    TRANSPOSE       reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    LBRACE          reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    LPAREN          reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    AND             reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    ANDAND          reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    BACKSLASH       reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    COLON           reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    DIV             reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    DOT             reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    DOTDIV          reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    DOTEXP          reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    DOTMUL          reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    DOTMULEQ        reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    EQEQ            reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    EXP             reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    GE              reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    GT              reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    LE              reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    LT              reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    MINUS           reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    MUL             reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    NE              reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    OR              reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    OROR            reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    PLUS            reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    EQ              reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    MULEQ           reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    DIVEQ           reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    MINUSEQ         reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    PLUSEQ          reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    OREQ            reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    ANDEQ           reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    COMMA           reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    SEMI            reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    RBRACKET        reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    RBRACE          reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    CASE            reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    OTHERWISE       reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    END_STMT        reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    RPAREN          reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)
    error           reduce using rule 109 (matrix -> LBRACKET expr_list RBRACKET .)


state 134

    (110) matrix -> LBRACKET expr_list SEMI . RBRACKET
    (59) concat_list -> expr_list SEMI . expr_list
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    RBRACKET        shift and go to state 200
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr_list                      shift and go to state 199
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    exprs                          shift and go to state 54
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    expr                           shift and go to state 35
    matrix                         shift and go to state 13

state 135

    (107) matrix -> LBRACKET concat_list RBRACKET .

    FIELD           reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    TRANSPOSE       reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    LBRACE          reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    LPAREN          reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    AND             reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    ANDAND          reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    BACKSLASH       reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    COLON           reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    DIV             reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    DOT             reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    DOTDIV          reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    DOTEXP          reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    DOTMUL          reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    DOTMULEQ        reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    EQEQ            reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    EXP             reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    GE              reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    GT              reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    LE              reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    LT              reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    MINUS           reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    MUL             reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    NE              reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    OR              reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    OROR            reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    PLUS            reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    EQ              reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    MULEQ           reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    DIVEQ           reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    MINUSEQ         reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    PLUSEQ          reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    OREQ            reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    ANDEQ           reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    COMMA           reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    SEMI            reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    RBRACKET        reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    RBRACE          reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    CASE            reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    OTHERWISE       reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    END_STMT        reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    RPAREN          reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)
    error           reduce using rule 107 (matrix -> LBRACKET concat_list RBRACKET .)


state 136

    (108) matrix -> LBRACKET concat_list SEMI . RBRACKET
    (60) concat_list -> concat_list SEMI . expr_list
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    RBRACKET        shift and go to state 202
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    expr2                          shift and go to state 3
    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr_list                      shift and go to state 201
    number                         shift and go to state 26
    exprs                          shift and go to state 54
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    expr                           shift and go to state 35
    matrix                         shift and go to state 13

state 137

    (22) unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP . stmt_list END_UNWIND_PROTECT
    (57) stmt_list -> . stmt
    (58) stmt_list -> . stmt_list stmt
    (8) stmt -> . continue_stmt
    (9) stmt -> . break_stmt
    (10) stmt -> . expr_stmt
    (11) stmt -> . global_stmt
    (12) stmt -> . persistent_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (21) stmt -> . unwind
    (35) continue_stmt -> . CONTINUE SEMI
    (36) break_stmt -> . BREAK SEMI
    (65) expr_stmt -> . expr_list SEMI
    (32) global_stmt -> . GLOBAL global_list SEMI
    (33) persistent_stmt -> . PERSISTENT expr SEMI
    (29) command -> . ident args SEMI
    (74) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (75) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (76) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (69) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (70) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (43) null_stmt -> . SEMI
    (44) null_stmt -> . COMMA
    (34) return_stmt -> . RETURN SEMI
    (37) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (41) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (42) try_catch -> . TRY stmt_list END_STMT
    (66) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (22) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (93) ident -> . IDENT
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 38
    GLOBAL          shift and go to state 25
    PERSISTENT      shift and go to state 36
    FOR             shift and go to state 16
    IF              shift and go to state 51
    SEMI            shift and go to state 44
    COMMA           shift and go to state 46
    RETURN          shift and go to state 11
    SWITCH          shift and go to state 33
    TRY             shift and go to state 19
    WHILE           shift and go to state 27
    UNWIND_PROTECT  shift and go to state 6
    IDENT           shift and go to state 15
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    unwind                         shift and go to state 10
    expr_list                      shift and go to state 12
    number                         shift and go to state 26
    return_stmt                    shift and go to state 28
    switch_stmt                    shift and go to state 29
    break_stmt                     shift and go to state 42
    lambda_expr                    shift and go to state 30
    end                            shift and go to state 43
    matrix                         shift and go to state 13
    continue_stmt                  shift and go to state 31
    cellarray                      shift and go to state 21
    expr2                          shift and go to state 3
    expr1                          shift and go to state 45
    global_stmt                    shift and go to state 47
    string                         shift and go to state 41
    colon                          shift and go to state 9
    persistent_stmt                shift and go to state 5
    stmt                           shift and go to state 18
    for_stmt                       shift and go to state 53
    expr_stmt                      shift and go to state 7
    stmt_list                      shift and go to state 203
    ident                          shift and go to state 34
    if_stmt                        shift and go to state 8
    expr                           shift and go to state 35
    try_catch                      shift and go to state 37
    exprs                          shift and go to state 54
    while_stmt                     shift and go to state 55
    command                        shift and go to state 56
    null_stmt                      shift and go to state 57

state 138

    (74) for_stmt -> FOR ident EQ . expr SEMI stmt_list END_STMT
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 204
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 139

    (75) for_stmt -> FOR LPAREN ident . EQ expr RPAREN SEMI stmt_list END_STMT

    EQ              shift and go to state 205


state 140

    (76) for_stmt -> FOR matrix EQ . expr SEMI stmt_list END_STMT
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    matrix                         shift and go to state 13
    expr                           shift and go to state 206
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    string                         shift and go to state 41

state 141

    (42) try_catch -> TRY stmt_list END_STMT .

    CONTINUE        reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    BREAK           reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    GLOBAL          reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    PERSISTENT      reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    FOR             reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    IF              reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    SEMI            reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    COMMA           reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    RETURN          reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    SWITCH          reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    TRY             reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    WHILE           reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    UNWIND_PROTECT  reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    IDENT           reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    NEG             reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    LPAREN          reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    END_EXPR        reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    NUMBER          reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    STRING          reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    COLON           reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    LBRACKET        reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    LBRACE          reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    MINUS           reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    PLUS            reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    HANDLE          reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    PLUSPLUS        reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    MINUSMINUS      reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    END_STMT        reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    END_UNWIND_PROTECT reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    ELSE            reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    ELSEIF          reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    FUNCTION        reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    $end            reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    UNWIND_PROTECT_CLEANUP reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    CASE            reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    OTHERWISE       reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)
    CATCH           reduce using rule 42 (try_catch -> TRY stmt_list END_STMT .)


state 142

    (41) try_catch -> TRY stmt_list CATCH . stmt_list END_STMT
    (57) stmt_list -> . stmt
    (58) stmt_list -> . stmt_list stmt
    (8) stmt -> . continue_stmt
    (9) stmt -> . break_stmt
    (10) stmt -> . expr_stmt
    (11) stmt -> . global_stmt
    (12) stmt -> . persistent_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (21) stmt -> . unwind
    (35) continue_stmt -> . CONTINUE SEMI
    (36) break_stmt -> . BREAK SEMI
    (65) expr_stmt -> . expr_list SEMI
    (32) global_stmt -> . GLOBAL global_list SEMI
    (33) persistent_stmt -> . PERSISTENT expr SEMI
    (29) command -> . ident args SEMI
    (74) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (75) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (76) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (69) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (70) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (43) null_stmt -> . SEMI
    (44) null_stmt -> . COMMA
    (34) return_stmt -> . RETURN SEMI
    (37) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (41) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (42) try_catch -> . TRY stmt_list END_STMT
    (66) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (22) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (93) ident -> . IDENT
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 38
    GLOBAL          shift and go to state 25
    PERSISTENT      shift and go to state 36
    FOR             shift and go to state 16
    IF              shift and go to state 51
    SEMI            shift and go to state 44
    COMMA           shift and go to state 46
    RETURN          shift and go to state 11
    SWITCH          shift and go to state 33
    TRY             shift and go to state 19
    WHILE           shift and go to state 27
    UNWIND_PROTECT  shift and go to state 6
    IDENT           shift and go to state 15
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    unwind                         shift and go to state 10
    expr_list                      shift and go to state 12
    number                         shift and go to state 26
    return_stmt                    shift and go to state 28
    switch_stmt                    shift and go to state 29
    break_stmt                     shift and go to state 42
    lambda_expr                    shift and go to state 30
    end                            shift and go to state 43
    matrix                         shift and go to state 13
    continue_stmt                  shift and go to state 31
    cellarray                      shift and go to state 21
    expr2                          shift and go to state 3
    expr1                          shift and go to state 45
    global_stmt                    shift and go to state 47
    string                         shift and go to state 41
    colon                          shift and go to state 9
    persistent_stmt                shift and go to state 5
    stmt                           shift and go to state 18
    for_stmt                       shift and go to state 53
    expr_stmt                      shift and go to state 7
    stmt_list                      shift and go to state 207
    ident                          shift and go to state 34
    if_stmt                        shift and go to state 8
    expr                           shift and go to state 35
    try_catch                      shift and go to state 37
    exprs                          shift and go to state 54
    while_stmt                     shift and go to state 55
    command                        shift and go to state 56
    null_stmt                      shift and go to state 57

state 143

    (105) cellarray -> LBRACE expr_list RBRACE .

    FIELD           reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    TRANSPOSE       reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    LBRACE          reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    LPAREN          reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    AND             reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    ANDAND          reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    BACKSLASH       reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    COLON           reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    DIV             reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    DOT             reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    DOTDIV          reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    DOTEXP          reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    DOTMUL          reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    DOTMULEQ        reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    EQEQ            reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    EXP             reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    GE              reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    GT              reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    LE              reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    LT              reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    MINUS           reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    MUL             reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    NE              reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    OR              reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    OROR            reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    PLUS            reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    EQ              reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    MULEQ           reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    DIVEQ           reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    MINUSEQ         reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    PLUSEQ          reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    OREQ            reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    ANDEQ           reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    COMMA           reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    SEMI            reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    RBRACKET        reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    RBRACE          reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    CASE            reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    OTHERWISE       reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    END_STMT        reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    RPAREN          reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)
    error           reduce using rule 105 (cellarray -> LBRACE expr_list RBRACE .)


state 144

    (31) global_list -> global_list ident .

    SEMI            reduce using rule 31 (global_list -> global_list ident .)
    IDENT           reduce using rule 31 (global_list -> global_list ident .)


state 145

    (32) global_stmt -> GLOBAL global_list SEMI .

    END_STMT        reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    CONTINUE        reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    BREAK           reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    GLOBAL          reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    PERSISTENT      reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    FOR             reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    IF              reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    SEMI            reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    COMMA           reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    RETURN          reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    SWITCH          reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    TRY             reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    WHILE           reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    UNWIND_PROTECT  reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    IDENT           reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    NEG             reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    LPAREN          reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    END_EXPR        reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    NUMBER          reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    STRING          reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    COLON           reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    LBRACKET        reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    LBRACE          reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    MINUS           reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    PLUS            reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    HANDLE          reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    PLUSPLUS        reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    MINUSMINUS      reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    CATCH           reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    UNWIND_PROTECT_CLEANUP reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    FUNCTION        reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    $end            reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    ELSE            reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    ELSEIF          reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    CASE            reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    OTHERWISE       reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)
    END_UNWIND_PROTECT reduce using rule 32 (global_stmt -> GLOBAL global_list SEMI .)


state 146

    (66) while_stmt -> WHILE expr SEMI . stmt_list END_STMT
    (57) stmt_list -> . stmt
    (58) stmt_list -> . stmt_list stmt
    (8) stmt -> . continue_stmt
    (9) stmt -> . break_stmt
    (10) stmt -> . expr_stmt
    (11) stmt -> . global_stmt
    (12) stmt -> . persistent_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (21) stmt -> . unwind
    (35) continue_stmt -> . CONTINUE SEMI
    (36) break_stmt -> . BREAK SEMI
    (65) expr_stmt -> . expr_list SEMI
    (32) global_stmt -> . GLOBAL global_list SEMI
    (33) persistent_stmt -> . PERSISTENT expr SEMI
    (29) command -> . ident args SEMI
    (74) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (75) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (76) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (69) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (70) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (43) null_stmt -> . SEMI
    (44) null_stmt -> . COMMA
    (34) return_stmt -> . RETURN SEMI
    (37) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (41) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (42) try_catch -> . TRY stmt_list END_STMT
    (66) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (22) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (93) ident -> . IDENT
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 38
    GLOBAL          shift and go to state 25
    PERSISTENT      shift and go to state 36
    FOR             shift and go to state 16
    IF              shift and go to state 51
    SEMI            shift and go to state 44
    COMMA           shift and go to state 46
    RETURN          shift and go to state 11
    SWITCH          shift and go to state 33
    TRY             shift and go to state 19
    WHILE           shift and go to state 27
    UNWIND_PROTECT  shift and go to state 6
    IDENT           shift and go to state 15
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    unwind                         shift and go to state 10
    expr_list                      shift and go to state 12
    number                         shift and go to state 26
    return_stmt                    shift and go to state 28
    switch_stmt                    shift and go to state 29
    break_stmt                     shift and go to state 42
    lambda_expr                    shift and go to state 30
    end                            shift and go to state 43
    matrix                         shift and go to state 13
    continue_stmt                  shift and go to state 31
    cellarray                      shift and go to state 21
    expr2                          shift and go to state 3
    expr1                          shift and go to state 45
    global_stmt                    shift and go to state 47
    string                         shift and go to state 41
    colon                          shift and go to state 9
    persistent_stmt                shift and go to state 5
    stmt                           shift and go to state 18
    for_stmt                       shift and go to state 53
    expr_stmt                      shift and go to state 7
    stmt_list                      shift and go to state 208
    ident                          shift and go to state 34
    if_stmt                        shift and go to state 8
    expr                           shift and go to state 35
    try_catch                      shift and go to state 37
    exprs                          shift and go to state 54
    while_stmt                     shift and go to state 55
    command                        shift and go to state 56
    null_stmt                      shift and go to state 57

state 147

    (3) top -> top func_decl stmt_list_opt .

    FUNCTION        reduce using rule 3 (top -> top func_decl stmt_list_opt .)
    $end            reduce using rule 3 (top -> top func_decl stmt_list_opt .)


state 148

    (4) top -> top func_decl stmt_list . END_STMT semi_opt
    (56) stmt_list_opt -> stmt_list .
    (58) stmt_list -> stmt_list . stmt
    (8) stmt -> . continue_stmt
    (9) stmt -> . break_stmt
    (10) stmt -> . expr_stmt
    (11) stmt -> . global_stmt
    (12) stmt -> . persistent_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (21) stmt -> . unwind
    (35) continue_stmt -> . CONTINUE SEMI
    (36) break_stmt -> . BREAK SEMI
    (65) expr_stmt -> . expr_list SEMI
    (32) global_stmt -> . GLOBAL global_list SEMI
    (33) persistent_stmt -> . PERSISTENT expr SEMI
    (29) command -> . ident args SEMI
    (74) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (75) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (76) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (69) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (70) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (43) null_stmt -> . SEMI
    (44) null_stmt -> . COMMA
    (34) return_stmt -> . RETURN SEMI
    (37) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (41) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (42) try_catch -> . TRY stmt_list END_STMT
    (66) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (22) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (93) ident -> . IDENT
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    END_STMT        shift and go to state 209
    FUNCTION        reduce using rule 56 (stmt_list_opt -> stmt_list .)
    $end            reduce using rule 56 (stmt_list_opt -> stmt_list .)
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 38
    GLOBAL          shift and go to state 25
    PERSISTENT      shift and go to state 36
    FOR             shift and go to state 16
    IF              shift and go to state 51
    SEMI            shift and go to state 44
    COMMA           shift and go to state 46
    RETURN          shift and go to state 11
    SWITCH          shift and go to state 33
    TRY             shift and go to state 19
    WHILE           shift and go to state 27
    UNWIND_PROTECT  shift and go to state 6
    IDENT           shift and go to state 15
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    unwind                         shift and go to state 10
    expr_list                      shift and go to state 12
    number                         shift and go to state 26
    return_stmt                    shift and go to state 28
    switch_stmt                    shift and go to state 29
    break_stmt                     shift and go to state 42
    lambda_expr                    shift and go to state 30
    end                            shift and go to state 43
    matrix                         shift and go to state 13
    continue_stmt                  shift and go to state 31
    cellarray                      shift and go to state 21
    expr2                          shift and go to state 3
    expr1                          shift and go to state 45
    global_stmt                    shift and go to state 47
    string                         shift and go to state 41
    colon                          shift and go to state 9
    persistent_stmt                shift and go to state 5
    stmt                           shift and go to state 131
    for_stmt                       shift and go to state 53
    expr_stmt                      shift and go to state 7
    ident                          shift and go to state 34
    if_stmt                        shift and go to state 8
    expr                           shift and go to state 35
    try_catch                      shift and go to state 37
    exprs                          shift and go to state 54
    while_stmt                     shift and go to state 55
    command                        shift and go to state 56
    null_stmt                      shift and go to state 57

state 149

    (45) func_decl -> FUNCTION ident . args_opt SEMI
    (52) ret -> ident .
    (47) args_opt -> .
    (48) args_opt -> . LPAREN RPAREN
    (49) args_opt -> . LPAREN expr_list RPAREN

    EQ              reduce using rule 52 (ret -> ident .)
    SEMI            reduce using rule 47 (args_opt -> .)
    LPAREN          shift and go to state 211

    args_opt                       shift and go to state 210

state 150

    (46) func_decl -> FUNCTION ret . EQ ident args_opt SEMI

    EQ              shift and go to state 212


state 151

    (53) ret -> LBRACKET . RBRACKET
    (54) ret -> LBRACKET . expr_list RBRACKET
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    RBRACKET        shift and go to state 214
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr_list                      shift and go to state 213
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    exprs                          shift and go to state 54
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    expr                           shift and go to state 35
    matrix                         shift and go to state 13

state 152

    (37) switch_stmt -> SWITCH expr semi_opt . case_list END_STMT
    (6) semi_opt -> semi_opt . SEMI
    (7) semi_opt -> semi_opt . COMMA
    (38) case_list -> .
    (39) case_list -> . CASE expr sep stmt_list_opt case_list
    (40) case_list -> . OTHERWISE stmt_list

    SEMI            shift and go to state 216
    COMMA           shift and go to state 218
    END_STMT        reduce using rule 38 (case_list -> .)
    CASE            shift and go to state 215
    OTHERWISE       shift and go to state 219

    case_list                      shift and go to state 217

state 153

    (29) command -> ident args SEMI .

    END_STMT        reduce using rule 29 (command -> ident args SEMI .)
    CONTINUE        reduce using rule 29 (command -> ident args SEMI .)
    BREAK           reduce using rule 29 (command -> ident args SEMI .)
    GLOBAL          reduce using rule 29 (command -> ident args SEMI .)
    PERSISTENT      reduce using rule 29 (command -> ident args SEMI .)
    FOR             reduce using rule 29 (command -> ident args SEMI .)
    IF              reduce using rule 29 (command -> ident args SEMI .)
    SEMI            reduce using rule 29 (command -> ident args SEMI .)
    COMMA           reduce using rule 29 (command -> ident args SEMI .)
    RETURN          reduce using rule 29 (command -> ident args SEMI .)
    SWITCH          reduce using rule 29 (command -> ident args SEMI .)
    TRY             reduce using rule 29 (command -> ident args SEMI .)
    WHILE           reduce using rule 29 (command -> ident args SEMI .)
    UNWIND_PROTECT  reduce using rule 29 (command -> ident args SEMI .)
    IDENT           reduce using rule 29 (command -> ident args SEMI .)
    NEG             reduce using rule 29 (command -> ident args SEMI .)
    LPAREN          reduce using rule 29 (command -> ident args SEMI .)
    END_EXPR        reduce using rule 29 (command -> ident args SEMI .)
    NUMBER          reduce using rule 29 (command -> ident args SEMI .)
    STRING          reduce using rule 29 (command -> ident args SEMI .)
    COLON           reduce using rule 29 (command -> ident args SEMI .)
    LBRACKET        reduce using rule 29 (command -> ident args SEMI .)
    LBRACE          reduce using rule 29 (command -> ident args SEMI .)
    MINUS           reduce using rule 29 (command -> ident args SEMI .)
    PLUS            reduce using rule 29 (command -> ident args SEMI .)
    HANDLE          reduce using rule 29 (command -> ident args SEMI .)
    PLUSPLUS        reduce using rule 29 (command -> ident args SEMI .)
    MINUSMINUS      reduce using rule 29 (command -> ident args SEMI .)
    FUNCTION        reduce using rule 29 (command -> ident args SEMI .)
    $end            reduce using rule 29 (command -> ident args SEMI .)
    UNWIND_PROTECT_CLEANUP reduce using rule 29 (command -> ident args SEMI .)
    ELSE            reduce using rule 29 (command -> ident args SEMI .)
    ELSEIF          reduce using rule 29 (command -> ident args SEMI .)
    END_UNWIND_PROTECT reduce using rule 29 (command -> ident args SEMI .)
    CATCH           reduce using rule 29 (command -> ident args SEMI .)
    CASE            reduce using rule 29 (command -> ident args SEMI .)
    OTHERWISE       reduce using rule 29 (command -> ident args SEMI .)


state 154

    (28) args -> args arg1 .

    SEMI            reduce using rule 28 (args -> args arg1 .)
    STRING          reduce using rule 28 (args -> args arg1 .)
    NUMBER          reduce using rule 28 (args -> args arg1 .)
    IDENT           reduce using rule 28 (args -> args arg1 .)
    GLOBAL          reduce using rule 28 (args -> args arg1 .)


state 155

    (124) expr2 -> expr DOTDIV expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    AND             reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    ANDAND          reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    BACKSLASH       reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    COLON           reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    DIV             reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    DOTDIV          reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    DOTMUL          reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    DOTMULEQ        reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    EQEQ            reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    GE              reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    GT              reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    LE              reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    LT              reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    MINUS           reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    MUL             reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    NE              reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    OR              reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    OROR            reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    PLUS            reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    EQ              reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    MULEQ           reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    DIVEQ           reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    MINUSEQ         reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    PLUSEQ          reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    OREQ            reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    ANDEQ           reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    COMMA           reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    SEMI            reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    RBRACKET        reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    RBRACE          reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    CASE            reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    OTHERWISE       reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    END_STMT        reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    RPAREN          reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    error           reduce using rule 124 (expr2 -> expr DOTDIV expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    DOT             shift and go to state 99
    DOTEXP          shift and go to state 118
    EXP             shift and go to state 94

  ! FIELD           [ reduce using rule 124 (expr2 -> expr DOTDIV expr .) ]
  ! TRANSPOSE       [ reduce using rule 124 (expr2 -> expr DOTDIV expr .) ]
  ! LBRACE          [ reduce using rule 124 (expr2 -> expr DOTDIV expr .) ]
  ! LPAREN          [ reduce using rule 124 (expr2 -> expr DOTDIV expr .) ]
  ! DOT             [ reduce using rule 124 (expr2 -> expr DOTDIV expr .) ]
  ! DOTEXP          [ reduce using rule 124 (expr2 -> expr DOTDIV expr .) ]
  ! EXP             [ reduce using rule 124 (expr2 -> expr DOTDIV expr .) ]
  ! AND             [ shift and go to state 119 ]
  ! ANDAND          [ shift and go to state 112 ]
  ! BACKSLASH       [ shift and go to state 103 ]
  ! COLON           [ shift and go to state 107 ]
  ! DIV             [ shift and go to state 96 ]
  ! DOTDIV          [ shift and go to state 90 ]
  ! DOTMUL          [ shift and go to state 97 ]
  ! DOTMULEQ        [ shift and go to state 104 ]
  ! EQEQ            [ shift and go to state 92 ]
  ! GE              [ shift and go to state 116 ]
  ! GT              [ shift and go to state 113 ]
  ! LE              [ shift and go to state 100 ]
  ! LT              [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 98 ]
  ! MUL             [ shift and go to state 95 ]
  ! NE              [ shift and go to state 93 ]
  ! OR              [ shift and go to state 122 ]
  ! OROR            [ shift and go to state 91 ]
  ! PLUS            [ shift and go to state 109 ]
  ! EQ              [ shift and go to state 101 ]
  ! MULEQ           [ shift and go to state 108 ]
  ! DIVEQ           [ shift and go to state 111 ]
  ! MINUSEQ         [ shift and go to state 105 ]
  ! PLUSEQ          [ shift and go to state 121 ]
  ! OREQ            [ shift and go to state 110 ]
  ! ANDEQ           [ shift and go to state 114 ]


state 156

    (138) expr2 -> expr OROR expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    ANDAND          reduce using rule 138 (expr2 -> expr OROR expr .)
    COLON           reduce using rule 138 (expr2 -> expr OROR expr .)
    DOTMULEQ        reduce using rule 138 (expr2 -> expr OROR expr .)
    OROR            reduce using rule 138 (expr2 -> expr OROR expr .)
    EQ              reduce using rule 138 (expr2 -> expr OROR expr .)
    MULEQ           reduce using rule 138 (expr2 -> expr OROR expr .)
    DIVEQ           reduce using rule 138 (expr2 -> expr OROR expr .)
    MINUSEQ         reduce using rule 138 (expr2 -> expr OROR expr .)
    PLUSEQ          reduce using rule 138 (expr2 -> expr OROR expr .)
    OREQ            reduce using rule 138 (expr2 -> expr OROR expr .)
    ANDEQ           reduce using rule 138 (expr2 -> expr OROR expr .)
    COMMA           reduce using rule 138 (expr2 -> expr OROR expr .)
    SEMI            reduce using rule 138 (expr2 -> expr OROR expr .)
    RBRACKET        reduce using rule 138 (expr2 -> expr OROR expr .)
    RBRACE          reduce using rule 138 (expr2 -> expr OROR expr .)
    CASE            reduce using rule 138 (expr2 -> expr OROR expr .)
    OTHERWISE       reduce using rule 138 (expr2 -> expr OROR expr .)
    END_STMT        reduce using rule 138 (expr2 -> expr OROR expr .)
    RPAREN          reduce using rule 138 (expr2 -> expr OROR expr .)
    error           reduce using rule 138 (expr2 -> expr OROR expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    AND             shift and go to state 119
    BACKSLASH       shift and go to state 103
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    EQEQ            shift and go to state 92
    EXP             shift and go to state 94
    GE              shift and go to state 116
    GT              shift and go to state 113
    LE              shift and go to state 100
    LT              shift and go to state 106
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    NE              shift and go to state 93
    OR              shift and go to state 122
    PLUS            shift and go to state 109

  ! FIELD           [ reduce using rule 138 (expr2 -> expr OROR expr .) ]
  ! TRANSPOSE       [ reduce using rule 138 (expr2 -> expr OROR expr .) ]
  ! LBRACE          [ reduce using rule 138 (expr2 -> expr OROR expr .) ]
  ! LPAREN          [ reduce using rule 138 (expr2 -> expr OROR expr .) ]
  ! AND             [ reduce using rule 138 (expr2 -> expr OROR expr .) ]
  ! BACKSLASH       [ reduce using rule 138 (expr2 -> expr OROR expr .) ]
  ! DIV             [ reduce using rule 138 (expr2 -> expr OROR expr .) ]
  ! DOT             [ reduce using rule 138 (expr2 -> expr OROR expr .) ]
  ! DOTDIV          [ reduce using rule 138 (expr2 -> expr OROR expr .) ]
  ! DOTEXP          [ reduce using rule 138 (expr2 -> expr OROR expr .) ]
  ! DOTMUL          [ reduce using rule 138 (expr2 -> expr OROR expr .) ]
  ! EQEQ            [ reduce using rule 138 (expr2 -> expr OROR expr .) ]
  ! EXP             [ reduce using rule 138 (expr2 -> expr OROR expr .) ]
  ! GE              [ reduce using rule 138 (expr2 -> expr OROR expr .) ]
  ! GT              [ reduce using rule 138 (expr2 -> expr OROR expr .) ]
  ! LE              [ reduce using rule 138 (expr2 -> expr OROR expr .) ]
  ! LT              [ reduce using rule 138 (expr2 -> expr OROR expr .) ]
  ! MINUS           [ reduce using rule 138 (expr2 -> expr OROR expr .) ]
  ! MUL             [ reduce using rule 138 (expr2 -> expr OROR expr .) ]
  ! NE              [ reduce using rule 138 (expr2 -> expr OROR expr .) ]
  ! OR              [ reduce using rule 138 (expr2 -> expr OROR expr .) ]
  ! PLUS            [ reduce using rule 138 (expr2 -> expr OROR expr .) ]
  ! ANDAND          [ shift and go to state 112 ]
  ! COLON           [ shift and go to state 107 ]
  ! DOTMULEQ        [ shift and go to state 104 ]
  ! OROR            [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 101 ]
  ! MULEQ           [ shift and go to state 108 ]
  ! DIVEQ           [ shift and go to state 111 ]
  ! MINUSEQ         [ shift and go to state 105 ]
  ! PLUSEQ          [ shift and go to state 121 ]
  ! OREQ            [ shift and go to state 110 ]
  ! ANDEQ           [ shift and go to state 114 ]


state 157

    (128) expr2 -> expr EQEQ expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    ANDAND          reduce using rule 128 (expr2 -> expr EQEQ expr .)
    COLON           reduce using rule 128 (expr2 -> expr EQEQ expr .)
    DOTMULEQ        reduce using rule 128 (expr2 -> expr EQEQ expr .)
    EQEQ            reduce using rule 128 (expr2 -> expr EQEQ expr .)
    GE              reduce using rule 128 (expr2 -> expr EQEQ expr .)
    GT              reduce using rule 128 (expr2 -> expr EQEQ expr .)
    LE              reduce using rule 128 (expr2 -> expr EQEQ expr .)
    LT              reduce using rule 128 (expr2 -> expr EQEQ expr .)
    NE              reduce using rule 128 (expr2 -> expr EQEQ expr .)
    OROR            reduce using rule 128 (expr2 -> expr EQEQ expr .)
    EQ              reduce using rule 128 (expr2 -> expr EQEQ expr .)
    MULEQ           reduce using rule 128 (expr2 -> expr EQEQ expr .)
    DIVEQ           reduce using rule 128 (expr2 -> expr EQEQ expr .)
    MINUSEQ         reduce using rule 128 (expr2 -> expr EQEQ expr .)
    PLUSEQ          reduce using rule 128 (expr2 -> expr EQEQ expr .)
    OREQ            reduce using rule 128 (expr2 -> expr EQEQ expr .)
    ANDEQ           reduce using rule 128 (expr2 -> expr EQEQ expr .)
    COMMA           reduce using rule 128 (expr2 -> expr EQEQ expr .)
    SEMI            reduce using rule 128 (expr2 -> expr EQEQ expr .)
    RBRACKET        reduce using rule 128 (expr2 -> expr EQEQ expr .)
    RBRACE          reduce using rule 128 (expr2 -> expr EQEQ expr .)
    CASE            reduce using rule 128 (expr2 -> expr EQEQ expr .)
    OTHERWISE       reduce using rule 128 (expr2 -> expr EQEQ expr .)
    END_STMT        reduce using rule 128 (expr2 -> expr EQEQ expr .)
    RPAREN          reduce using rule 128 (expr2 -> expr EQEQ expr .)
    error           reduce using rule 128 (expr2 -> expr EQEQ expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    AND             shift and go to state 119
    BACKSLASH       shift and go to state 103
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    EXP             shift and go to state 94
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    OR              shift and go to state 122
    PLUS            shift and go to state 109

  ! FIELD           [ reduce using rule 128 (expr2 -> expr EQEQ expr .) ]
  ! TRANSPOSE       [ reduce using rule 128 (expr2 -> expr EQEQ expr .) ]
  ! LBRACE          [ reduce using rule 128 (expr2 -> expr EQEQ expr .) ]
  ! LPAREN          [ reduce using rule 128 (expr2 -> expr EQEQ expr .) ]
  ! AND             [ reduce using rule 128 (expr2 -> expr EQEQ expr .) ]
  ! BACKSLASH       [ reduce using rule 128 (expr2 -> expr EQEQ expr .) ]
  ! DIV             [ reduce using rule 128 (expr2 -> expr EQEQ expr .) ]
  ! DOT             [ reduce using rule 128 (expr2 -> expr EQEQ expr .) ]
  ! DOTDIV          [ reduce using rule 128 (expr2 -> expr EQEQ expr .) ]
  ! DOTEXP          [ reduce using rule 128 (expr2 -> expr EQEQ expr .) ]
  ! DOTMUL          [ reduce using rule 128 (expr2 -> expr EQEQ expr .) ]
  ! EXP             [ reduce using rule 128 (expr2 -> expr EQEQ expr .) ]
  ! MINUS           [ reduce using rule 128 (expr2 -> expr EQEQ expr .) ]
  ! MUL             [ reduce using rule 128 (expr2 -> expr EQEQ expr .) ]
  ! OR              [ reduce using rule 128 (expr2 -> expr EQEQ expr .) ]
  ! PLUS            [ reduce using rule 128 (expr2 -> expr EQEQ expr .) ]
  ! ANDAND          [ shift and go to state 112 ]
  ! COLON           [ shift and go to state 107 ]
  ! DOTMULEQ        [ shift and go to state 104 ]
  ! EQEQ            [ shift and go to state 92 ]
  ! GE              [ shift and go to state 116 ]
  ! GT              [ shift and go to state 113 ]
  ! LE              [ shift and go to state 100 ]
  ! LT              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 93 ]
  ! OROR            [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 101 ]
  ! MULEQ           [ shift and go to state 108 ]
  ! DIVEQ           [ shift and go to state 111 ]
  ! MINUSEQ         [ shift and go to state 105 ]
  ! PLUSEQ          [ shift and go to state 121 ]
  ! OREQ            [ shift and go to state 110 ]
  ! ANDEQ           [ shift and go to state 114 ]


state 158

    (136) expr2 -> expr NE expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    ANDAND          reduce using rule 136 (expr2 -> expr NE expr .)
    COLON           reduce using rule 136 (expr2 -> expr NE expr .)
    DOTMULEQ        reduce using rule 136 (expr2 -> expr NE expr .)
    EQEQ            reduce using rule 136 (expr2 -> expr NE expr .)
    GE              reduce using rule 136 (expr2 -> expr NE expr .)
    GT              reduce using rule 136 (expr2 -> expr NE expr .)
    LE              reduce using rule 136 (expr2 -> expr NE expr .)
    LT              reduce using rule 136 (expr2 -> expr NE expr .)
    NE              reduce using rule 136 (expr2 -> expr NE expr .)
    OROR            reduce using rule 136 (expr2 -> expr NE expr .)
    EQ              reduce using rule 136 (expr2 -> expr NE expr .)
    MULEQ           reduce using rule 136 (expr2 -> expr NE expr .)
    DIVEQ           reduce using rule 136 (expr2 -> expr NE expr .)
    MINUSEQ         reduce using rule 136 (expr2 -> expr NE expr .)
    PLUSEQ          reduce using rule 136 (expr2 -> expr NE expr .)
    OREQ            reduce using rule 136 (expr2 -> expr NE expr .)
    ANDEQ           reduce using rule 136 (expr2 -> expr NE expr .)
    COMMA           reduce using rule 136 (expr2 -> expr NE expr .)
    SEMI            reduce using rule 136 (expr2 -> expr NE expr .)
    RBRACKET        reduce using rule 136 (expr2 -> expr NE expr .)
    RBRACE          reduce using rule 136 (expr2 -> expr NE expr .)
    CASE            reduce using rule 136 (expr2 -> expr NE expr .)
    OTHERWISE       reduce using rule 136 (expr2 -> expr NE expr .)
    END_STMT        reduce using rule 136 (expr2 -> expr NE expr .)
    RPAREN          reduce using rule 136 (expr2 -> expr NE expr .)
    error           reduce using rule 136 (expr2 -> expr NE expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    AND             shift and go to state 119
    BACKSLASH       shift and go to state 103
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    EXP             shift and go to state 94
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    OR              shift and go to state 122
    PLUS            shift and go to state 109

  ! FIELD           [ reduce using rule 136 (expr2 -> expr NE expr .) ]
  ! TRANSPOSE       [ reduce using rule 136 (expr2 -> expr NE expr .) ]
  ! LBRACE          [ reduce using rule 136 (expr2 -> expr NE expr .) ]
  ! LPAREN          [ reduce using rule 136 (expr2 -> expr NE expr .) ]
  ! AND             [ reduce using rule 136 (expr2 -> expr NE expr .) ]
  ! BACKSLASH       [ reduce using rule 136 (expr2 -> expr NE expr .) ]
  ! DIV             [ reduce using rule 136 (expr2 -> expr NE expr .) ]
  ! DOT             [ reduce using rule 136 (expr2 -> expr NE expr .) ]
  ! DOTDIV          [ reduce using rule 136 (expr2 -> expr NE expr .) ]
  ! DOTEXP          [ reduce using rule 136 (expr2 -> expr NE expr .) ]
  ! DOTMUL          [ reduce using rule 136 (expr2 -> expr NE expr .) ]
  ! EXP             [ reduce using rule 136 (expr2 -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 136 (expr2 -> expr NE expr .) ]
  ! MUL             [ reduce using rule 136 (expr2 -> expr NE expr .) ]
  ! OR              [ reduce using rule 136 (expr2 -> expr NE expr .) ]
  ! PLUS            [ reduce using rule 136 (expr2 -> expr NE expr .) ]
  ! ANDAND          [ shift and go to state 112 ]
  ! COLON           [ shift and go to state 107 ]
  ! DOTMULEQ        [ shift and go to state 104 ]
  ! EQEQ            [ shift and go to state 92 ]
  ! GE              [ shift and go to state 116 ]
  ! GT              [ shift and go to state 113 ]
  ! LE              [ shift and go to state 100 ]
  ! LT              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 93 ]
  ! OROR            [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 101 ]
  ! MULEQ           [ shift and go to state 108 ]
  ! DIVEQ           [ shift and go to state 111 ]
  ! MINUSEQ         [ shift and go to state 105 ]
  ! PLUSEQ          [ shift and go to state 121 ]
  ! OREQ            [ shift and go to state 110 ]
  ! ANDEQ           [ shift and go to state 114 ]


state 159

    (129) expr2 -> expr EXP expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    TRANSPOSE       reduce using rule 129 (expr2 -> expr EXP expr .)
    AND             reduce using rule 129 (expr2 -> expr EXP expr .)
    ANDAND          reduce using rule 129 (expr2 -> expr EXP expr .)
    BACKSLASH       reduce using rule 129 (expr2 -> expr EXP expr .)
    COLON           reduce using rule 129 (expr2 -> expr EXP expr .)
    DIV             reduce using rule 129 (expr2 -> expr EXP expr .)
    DOTDIV          reduce using rule 129 (expr2 -> expr EXP expr .)
    DOTMUL          reduce using rule 129 (expr2 -> expr EXP expr .)
    DOTMULEQ        reduce using rule 129 (expr2 -> expr EXP expr .)
    EQEQ            reduce using rule 129 (expr2 -> expr EXP expr .)
    GE              reduce using rule 129 (expr2 -> expr EXP expr .)
    GT              reduce using rule 129 (expr2 -> expr EXP expr .)
    LE              reduce using rule 129 (expr2 -> expr EXP expr .)
    LT              reduce using rule 129 (expr2 -> expr EXP expr .)
    MINUS           reduce using rule 129 (expr2 -> expr EXP expr .)
    MUL             reduce using rule 129 (expr2 -> expr EXP expr .)
    NE              reduce using rule 129 (expr2 -> expr EXP expr .)
    OR              reduce using rule 129 (expr2 -> expr EXP expr .)
    OROR            reduce using rule 129 (expr2 -> expr EXP expr .)
    PLUS            reduce using rule 129 (expr2 -> expr EXP expr .)
    EQ              reduce using rule 129 (expr2 -> expr EXP expr .)
    MULEQ           reduce using rule 129 (expr2 -> expr EXP expr .)
    DIVEQ           reduce using rule 129 (expr2 -> expr EXP expr .)
    MINUSEQ         reduce using rule 129 (expr2 -> expr EXP expr .)
    PLUSEQ          reduce using rule 129 (expr2 -> expr EXP expr .)
    OREQ            reduce using rule 129 (expr2 -> expr EXP expr .)
    ANDEQ           reduce using rule 129 (expr2 -> expr EXP expr .)
    COMMA           reduce using rule 129 (expr2 -> expr EXP expr .)
    SEMI            reduce using rule 129 (expr2 -> expr EXP expr .)
    RBRACKET        reduce using rule 129 (expr2 -> expr EXP expr .)
    RBRACE          reduce using rule 129 (expr2 -> expr EXP expr .)
    CASE            reduce using rule 129 (expr2 -> expr EXP expr .)
    OTHERWISE       reduce using rule 129 (expr2 -> expr EXP expr .)
    END_STMT        reduce using rule 129 (expr2 -> expr EXP expr .)
    RPAREN          reduce using rule 129 (expr2 -> expr EXP expr .)
    error           reduce using rule 129 (expr2 -> expr EXP expr .)
    FIELD           shift and go to state 115
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    DOT             shift and go to state 99
    DOTEXP          shift and go to state 118
    EXP             shift and go to state 94

  ! FIELD           [ reduce using rule 129 (expr2 -> expr EXP expr .) ]
  ! LBRACE          [ reduce using rule 129 (expr2 -> expr EXP expr .) ]
  ! LPAREN          [ reduce using rule 129 (expr2 -> expr EXP expr .) ]
  ! DOT             [ reduce using rule 129 (expr2 -> expr EXP expr .) ]
  ! DOTEXP          [ reduce using rule 129 (expr2 -> expr EXP expr .) ]
  ! EXP             [ reduce using rule 129 (expr2 -> expr EXP expr .) ]
  ! TRANSPOSE       [ shift and go to state 102 ]
  ! AND             [ shift and go to state 119 ]
  ! ANDAND          [ shift and go to state 112 ]
  ! BACKSLASH       [ shift and go to state 103 ]
  ! COLON           [ shift and go to state 107 ]
  ! DIV             [ shift and go to state 96 ]
  ! DOTDIV          [ shift and go to state 90 ]
  ! DOTMUL          [ shift and go to state 97 ]
  ! DOTMULEQ        [ shift and go to state 104 ]
  ! EQEQ            [ shift and go to state 92 ]
  ! GE              [ shift and go to state 116 ]
  ! GT              [ shift and go to state 113 ]
  ! LE              [ shift and go to state 100 ]
  ! LT              [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 98 ]
  ! MUL             [ shift and go to state 95 ]
  ! NE              [ shift and go to state 93 ]
  ! OR              [ shift and go to state 122 ]
  ! OROR            [ shift and go to state 91 ]
  ! PLUS            [ shift and go to state 109 ]
  ! EQ              [ shift and go to state 101 ]
  ! MULEQ           [ shift and go to state 108 ]
  ! DIVEQ           [ shift and go to state 111 ]
  ! MINUSEQ         [ shift and go to state 105 ]
  ! PLUSEQ          [ shift and go to state 121 ]
  ! OREQ            [ shift and go to state 110 ]
  ! ANDEQ           [ shift and go to state 114 ]


state 160

    (135) expr2 -> expr MUL expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    AND             reduce using rule 135 (expr2 -> expr MUL expr .)
    ANDAND          reduce using rule 135 (expr2 -> expr MUL expr .)
    BACKSLASH       reduce using rule 135 (expr2 -> expr MUL expr .)
    COLON           reduce using rule 135 (expr2 -> expr MUL expr .)
    DIV             reduce using rule 135 (expr2 -> expr MUL expr .)
    DOTDIV          reduce using rule 135 (expr2 -> expr MUL expr .)
    DOTMUL          reduce using rule 135 (expr2 -> expr MUL expr .)
    DOTMULEQ        reduce using rule 135 (expr2 -> expr MUL expr .)
    EQEQ            reduce using rule 135 (expr2 -> expr MUL expr .)
    GE              reduce using rule 135 (expr2 -> expr MUL expr .)
    GT              reduce using rule 135 (expr2 -> expr MUL expr .)
    LE              reduce using rule 135 (expr2 -> expr MUL expr .)
    LT              reduce using rule 135 (expr2 -> expr MUL expr .)
    MINUS           reduce using rule 135 (expr2 -> expr MUL expr .)
    MUL             reduce using rule 135 (expr2 -> expr MUL expr .)
    NE              reduce using rule 135 (expr2 -> expr MUL expr .)
    OR              reduce using rule 135 (expr2 -> expr MUL expr .)
    OROR            reduce using rule 135 (expr2 -> expr MUL expr .)
    PLUS            reduce using rule 135 (expr2 -> expr MUL expr .)
    EQ              reduce using rule 135 (expr2 -> expr MUL expr .)
    MULEQ           reduce using rule 135 (expr2 -> expr MUL expr .)
    DIVEQ           reduce using rule 135 (expr2 -> expr MUL expr .)
    MINUSEQ         reduce using rule 135 (expr2 -> expr MUL expr .)
    PLUSEQ          reduce using rule 135 (expr2 -> expr MUL expr .)
    OREQ            reduce using rule 135 (expr2 -> expr MUL expr .)
    ANDEQ           reduce using rule 135 (expr2 -> expr MUL expr .)
    COMMA           reduce using rule 135 (expr2 -> expr MUL expr .)
    SEMI            reduce using rule 135 (expr2 -> expr MUL expr .)
    RBRACKET        reduce using rule 135 (expr2 -> expr MUL expr .)
    RBRACE          reduce using rule 135 (expr2 -> expr MUL expr .)
    CASE            reduce using rule 135 (expr2 -> expr MUL expr .)
    OTHERWISE       reduce using rule 135 (expr2 -> expr MUL expr .)
    END_STMT        reduce using rule 135 (expr2 -> expr MUL expr .)
    RPAREN          reduce using rule 135 (expr2 -> expr MUL expr .)
    error           reduce using rule 135 (expr2 -> expr MUL expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    DOT             shift and go to state 99
    DOTEXP          shift and go to state 118
    EXP             shift and go to state 94

  ! FIELD           [ reduce using rule 135 (expr2 -> expr MUL expr .) ]
  ! TRANSPOSE       [ reduce using rule 135 (expr2 -> expr MUL expr .) ]
  ! LBRACE          [ reduce using rule 135 (expr2 -> expr MUL expr .) ]
  ! LPAREN          [ reduce using rule 135 (expr2 -> expr MUL expr .) ]
  ! DOT             [ reduce using rule 135 (expr2 -> expr MUL expr .) ]
  ! DOTEXP          [ reduce using rule 135 (expr2 -> expr MUL expr .) ]
  ! EXP             [ reduce using rule 135 (expr2 -> expr MUL expr .) ]
  ! AND             [ shift and go to state 119 ]
  ! ANDAND          [ shift and go to state 112 ]
  ! BACKSLASH       [ shift and go to state 103 ]
  ! COLON           [ shift and go to state 107 ]
  ! DIV             [ shift and go to state 96 ]
  ! DOTDIV          [ shift and go to state 90 ]
  ! DOTMUL          [ shift and go to state 97 ]
  ! DOTMULEQ        [ shift and go to state 104 ]
  ! EQEQ            [ shift and go to state 92 ]
  ! GE              [ shift and go to state 116 ]
  ! GT              [ shift and go to state 113 ]
  ! LE              [ shift and go to state 100 ]
  ! LT              [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 98 ]
  ! MUL             [ shift and go to state 95 ]
  ! NE              [ shift and go to state 93 ]
  ! OR              [ shift and go to state 122 ]
  ! OROR            [ shift and go to state 91 ]
  ! PLUS            [ shift and go to state 109 ]
  ! EQ              [ shift and go to state 101 ]
  ! MULEQ           [ shift and go to state 108 ]
  ! DIVEQ           [ shift and go to state 111 ]
  ! MINUSEQ         [ shift and go to state 105 ]
  ! PLUSEQ          [ shift and go to state 121 ]
  ! OREQ            [ shift and go to state 110 ]
  ! ANDEQ           [ shift and go to state 114 ]


state 161

    (122) expr2 -> expr DIV expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    AND             reduce using rule 122 (expr2 -> expr DIV expr .)
    ANDAND          reduce using rule 122 (expr2 -> expr DIV expr .)
    BACKSLASH       reduce using rule 122 (expr2 -> expr DIV expr .)
    COLON           reduce using rule 122 (expr2 -> expr DIV expr .)
    DIV             reduce using rule 122 (expr2 -> expr DIV expr .)
    DOTDIV          reduce using rule 122 (expr2 -> expr DIV expr .)
    DOTMUL          reduce using rule 122 (expr2 -> expr DIV expr .)
    DOTMULEQ        reduce using rule 122 (expr2 -> expr DIV expr .)
    EQEQ            reduce using rule 122 (expr2 -> expr DIV expr .)
    GE              reduce using rule 122 (expr2 -> expr DIV expr .)
    GT              reduce using rule 122 (expr2 -> expr DIV expr .)
    LE              reduce using rule 122 (expr2 -> expr DIV expr .)
    LT              reduce using rule 122 (expr2 -> expr DIV expr .)
    MINUS           reduce using rule 122 (expr2 -> expr DIV expr .)
    MUL             reduce using rule 122 (expr2 -> expr DIV expr .)
    NE              reduce using rule 122 (expr2 -> expr DIV expr .)
    OR              reduce using rule 122 (expr2 -> expr DIV expr .)
    OROR            reduce using rule 122 (expr2 -> expr DIV expr .)
    PLUS            reduce using rule 122 (expr2 -> expr DIV expr .)
    EQ              reduce using rule 122 (expr2 -> expr DIV expr .)
    MULEQ           reduce using rule 122 (expr2 -> expr DIV expr .)
    DIVEQ           reduce using rule 122 (expr2 -> expr DIV expr .)
    MINUSEQ         reduce using rule 122 (expr2 -> expr DIV expr .)
    PLUSEQ          reduce using rule 122 (expr2 -> expr DIV expr .)
    OREQ            reduce using rule 122 (expr2 -> expr DIV expr .)
    ANDEQ           reduce using rule 122 (expr2 -> expr DIV expr .)
    COMMA           reduce using rule 122 (expr2 -> expr DIV expr .)
    SEMI            reduce using rule 122 (expr2 -> expr DIV expr .)
    RBRACKET        reduce using rule 122 (expr2 -> expr DIV expr .)
    RBRACE          reduce using rule 122 (expr2 -> expr DIV expr .)
    CASE            reduce using rule 122 (expr2 -> expr DIV expr .)
    OTHERWISE       reduce using rule 122 (expr2 -> expr DIV expr .)
    END_STMT        reduce using rule 122 (expr2 -> expr DIV expr .)
    RPAREN          reduce using rule 122 (expr2 -> expr DIV expr .)
    error           reduce using rule 122 (expr2 -> expr DIV expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    DOT             shift and go to state 99
    DOTEXP          shift and go to state 118
    EXP             shift and go to state 94

  ! FIELD           [ reduce using rule 122 (expr2 -> expr DIV expr .) ]
  ! TRANSPOSE       [ reduce using rule 122 (expr2 -> expr DIV expr .) ]
  ! LBRACE          [ reduce using rule 122 (expr2 -> expr DIV expr .) ]
  ! LPAREN          [ reduce using rule 122 (expr2 -> expr DIV expr .) ]
  ! DOT             [ reduce using rule 122 (expr2 -> expr DIV expr .) ]
  ! DOTEXP          [ reduce using rule 122 (expr2 -> expr DIV expr .) ]
  ! EXP             [ reduce using rule 122 (expr2 -> expr DIV expr .) ]
  ! AND             [ shift and go to state 119 ]
  ! ANDAND          [ shift and go to state 112 ]
  ! BACKSLASH       [ shift and go to state 103 ]
  ! COLON           [ shift and go to state 107 ]
  ! DIV             [ shift and go to state 96 ]
  ! DOTDIV          [ shift and go to state 90 ]
  ! DOTMUL          [ shift and go to state 97 ]
  ! DOTMULEQ        [ shift and go to state 104 ]
  ! EQEQ            [ shift and go to state 92 ]
  ! GE              [ shift and go to state 116 ]
  ! GT              [ shift and go to state 113 ]
  ! LE              [ shift and go to state 100 ]
  ! LT              [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 98 ]
  ! MUL             [ shift and go to state 95 ]
  ! NE              [ shift and go to state 93 ]
  ! OR              [ shift and go to state 122 ]
  ! OROR            [ shift and go to state 91 ]
  ! PLUS            [ shift and go to state 109 ]
  ! EQ              [ shift and go to state 101 ]
  ! MULEQ           [ shift and go to state 108 ]
  ! DIVEQ           [ shift and go to state 111 ]
  ! MINUSEQ         [ shift and go to state 105 ]
  ! PLUSEQ          [ shift and go to state 121 ]
  ! OREQ            [ shift and go to state 110 ]
  ! ANDEQ           [ shift and go to state 114 ]


state 162

    (126) expr2 -> expr DOTMUL expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    AND             reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    ANDAND          reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    BACKSLASH       reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    COLON           reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    DIV             reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    DOTDIV          reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    DOTMUL          reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    DOTMULEQ        reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    EQEQ            reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    GE              reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    GT              reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    LE              reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    LT              reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    MINUS           reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    MUL             reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    NE              reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    OR              reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    OROR            reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    PLUS            reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    EQ              reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    MULEQ           reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    DIVEQ           reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    MINUSEQ         reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    PLUSEQ          reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    OREQ            reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    ANDEQ           reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    COMMA           reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    SEMI            reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    RBRACKET        reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    RBRACE          reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    CASE            reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    OTHERWISE       reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    END_STMT        reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    RPAREN          reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    error           reduce using rule 126 (expr2 -> expr DOTMUL expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    DOT             shift and go to state 99
    DOTEXP          shift and go to state 118
    EXP             shift and go to state 94

  ! FIELD           [ reduce using rule 126 (expr2 -> expr DOTMUL expr .) ]
  ! TRANSPOSE       [ reduce using rule 126 (expr2 -> expr DOTMUL expr .) ]
  ! LBRACE          [ reduce using rule 126 (expr2 -> expr DOTMUL expr .) ]
  ! LPAREN          [ reduce using rule 126 (expr2 -> expr DOTMUL expr .) ]
  ! DOT             [ reduce using rule 126 (expr2 -> expr DOTMUL expr .) ]
  ! DOTEXP          [ reduce using rule 126 (expr2 -> expr DOTMUL expr .) ]
  ! EXP             [ reduce using rule 126 (expr2 -> expr DOTMUL expr .) ]
  ! AND             [ shift and go to state 119 ]
  ! ANDAND          [ shift and go to state 112 ]
  ! BACKSLASH       [ shift and go to state 103 ]
  ! COLON           [ shift and go to state 107 ]
  ! DIV             [ shift and go to state 96 ]
  ! DOTDIV          [ shift and go to state 90 ]
  ! DOTMUL          [ shift and go to state 97 ]
  ! DOTMULEQ        [ shift and go to state 104 ]
  ! EQEQ            [ shift and go to state 92 ]
  ! GE              [ shift and go to state 116 ]
  ! GT              [ shift and go to state 113 ]
  ! LE              [ shift and go to state 100 ]
  ! LT              [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 98 ]
  ! MUL             [ shift and go to state 95 ]
  ! NE              [ shift and go to state 93 ]
  ! OR              [ shift and go to state 122 ]
  ! OROR            [ shift and go to state 91 ]
  ! PLUS            [ shift and go to state 109 ]
  ! EQ              [ shift and go to state 101 ]
  ! MULEQ           [ shift and go to state 108 ]
  ! DIVEQ           [ shift and go to state 111 ]
  ! MINUSEQ         [ shift and go to state 105 ]
  ! PLUSEQ          [ shift and go to state 121 ]
  ! OREQ            [ shift and go to state 110 ]
  ! ANDEQ           [ shift and go to state 114 ]


state 163

    (134) expr2 -> expr MINUS expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    AND             reduce using rule 134 (expr2 -> expr MINUS expr .)
    ANDAND          reduce using rule 134 (expr2 -> expr MINUS expr .)
    COLON           reduce using rule 134 (expr2 -> expr MINUS expr .)
    DOTMULEQ        reduce using rule 134 (expr2 -> expr MINUS expr .)
    EQEQ            reduce using rule 134 (expr2 -> expr MINUS expr .)
    GE              reduce using rule 134 (expr2 -> expr MINUS expr .)
    GT              reduce using rule 134 (expr2 -> expr MINUS expr .)
    LE              reduce using rule 134 (expr2 -> expr MINUS expr .)
    LT              reduce using rule 134 (expr2 -> expr MINUS expr .)
    MINUS           reduce using rule 134 (expr2 -> expr MINUS expr .)
    NE              reduce using rule 134 (expr2 -> expr MINUS expr .)
    OR              reduce using rule 134 (expr2 -> expr MINUS expr .)
    OROR            reduce using rule 134 (expr2 -> expr MINUS expr .)
    PLUS            reduce using rule 134 (expr2 -> expr MINUS expr .)
    EQ              reduce using rule 134 (expr2 -> expr MINUS expr .)
    MULEQ           reduce using rule 134 (expr2 -> expr MINUS expr .)
    DIVEQ           reduce using rule 134 (expr2 -> expr MINUS expr .)
    MINUSEQ         reduce using rule 134 (expr2 -> expr MINUS expr .)
    PLUSEQ          reduce using rule 134 (expr2 -> expr MINUS expr .)
    OREQ            reduce using rule 134 (expr2 -> expr MINUS expr .)
    ANDEQ           reduce using rule 134 (expr2 -> expr MINUS expr .)
    COMMA           reduce using rule 134 (expr2 -> expr MINUS expr .)
    SEMI            reduce using rule 134 (expr2 -> expr MINUS expr .)
    RBRACKET        reduce using rule 134 (expr2 -> expr MINUS expr .)
    RBRACE          reduce using rule 134 (expr2 -> expr MINUS expr .)
    CASE            reduce using rule 134 (expr2 -> expr MINUS expr .)
    OTHERWISE       reduce using rule 134 (expr2 -> expr MINUS expr .)
    END_STMT        reduce using rule 134 (expr2 -> expr MINUS expr .)
    RPAREN          reduce using rule 134 (expr2 -> expr MINUS expr .)
    error           reduce using rule 134 (expr2 -> expr MINUS expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    BACKSLASH       shift and go to state 103
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    EXP             shift and go to state 94
    MUL             shift and go to state 95

  ! FIELD           [ reduce using rule 134 (expr2 -> expr MINUS expr .) ]
  ! TRANSPOSE       [ reduce using rule 134 (expr2 -> expr MINUS expr .) ]
  ! LBRACE          [ reduce using rule 134 (expr2 -> expr MINUS expr .) ]
  ! LPAREN          [ reduce using rule 134 (expr2 -> expr MINUS expr .) ]
  ! BACKSLASH       [ reduce using rule 134 (expr2 -> expr MINUS expr .) ]
  ! DIV             [ reduce using rule 134 (expr2 -> expr MINUS expr .) ]
  ! DOT             [ reduce using rule 134 (expr2 -> expr MINUS expr .) ]
  ! DOTDIV          [ reduce using rule 134 (expr2 -> expr MINUS expr .) ]
  ! DOTEXP          [ reduce using rule 134 (expr2 -> expr MINUS expr .) ]
  ! DOTMUL          [ reduce using rule 134 (expr2 -> expr MINUS expr .) ]
  ! EXP             [ reduce using rule 134 (expr2 -> expr MINUS expr .) ]
  ! MUL             [ reduce using rule 134 (expr2 -> expr MINUS expr .) ]
  ! AND             [ shift and go to state 119 ]
  ! ANDAND          [ shift and go to state 112 ]
  ! COLON           [ shift and go to state 107 ]
  ! DOTMULEQ        [ shift and go to state 104 ]
  ! EQEQ            [ shift and go to state 92 ]
  ! GE              [ shift and go to state 116 ]
  ! GT              [ shift and go to state 113 ]
  ! LE              [ shift and go to state 100 ]
  ! LT              [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 98 ]
  ! NE              [ shift and go to state 93 ]
  ! OR              [ shift and go to state 122 ]
  ! OROR            [ shift and go to state 91 ]
  ! PLUS            [ shift and go to state 109 ]
  ! EQ              [ shift and go to state 101 ]
  ! MULEQ           [ shift and go to state 108 ]
  ! DIVEQ           [ shift and go to state 111 ]
  ! MINUSEQ         [ shift and go to state 105 ]
  ! PLUSEQ          [ shift and go to state 121 ]
  ! OREQ            [ shift and go to state 110 ]
  ! ANDEQ           [ shift and go to state 114 ]


state 164

    (123) expr2 -> expr DOT expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    FIELD           reduce using rule 123 (expr2 -> expr DOT expr .)
    TRANSPOSE       reduce using rule 123 (expr2 -> expr DOT expr .)
    LBRACE          reduce using rule 123 (expr2 -> expr DOT expr .)
    LPAREN          reduce using rule 123 (expr2 -> expr DOT expr .)
    AND             reduce using rule 123 (expr2 -> expr DOT expr .)
    ANDAND          reduce using rule 123 (expr2 -> expr DOT expr .)
    BACKSLASH       reduce using rule 123 (expr2 -> expr DOT expr .)
    COLON           reduce using rule 123 (expr2 -> expr DOT expr .)
    DIV             reduce using rule 123 (expr2 -> expr DOT expr .)
    DOT             reduce using rule 123 (expr2 -> expr DOT expr .)
    DOTDIV          reduce using rule 123 (expr2 -> expr DOT expr .)
    DOTEXP          reduce using rule 123 (expr2 -> expr DOT expr .)
    DOTMUL          reduce using rule 123 (expr2 -> expr DOT expr .)
    DOTMULEQ        reduce using rule 123 (expr2 -> expr DOT expr .)
    EQEQ            reduce using rule 123 (expr2 -> expr DOT expr .)
    EXP             reduce using rule 123 (expr2 -> expr DOT expr .)
    GE              reduce using rule 123 (expr2 -> expr DOT expr .)
    GT              reduce using rule 123 (expr2 -> expr DOT expr .)
    LE              reduce using rule 123 (expr2 -> expr DOT expr .)
    LT              reduce using rule 123 (expr2 -> expr DOT expr .)
    MINUS           reduce using rule 123 (expr2 -> expr DOT expr .)
    MUL             reduce using rule 123 (expr2 -> expr DOT expr .)
    NE              reduce using rule 123 (expr2 -> expr DOT expr .)
    OR              reduce using rule 123 (expr2 -> expr DOT expr .)
    OROR            reduce using rule 123 (expr2 -> expr DOT expr .)
    PLUS            reduce using rule 123 (expr2 -> expr DOT expr .)
    EQ              reduce using rule 123 (expr2 -> expr DOT expr .)
    MULEQ           reduce using rule 123 (expr2 -> expr DOT expr .)
    DIVEQ           reduce using rule 123 (expr2 -> expr DOT expr .)
    MINUSEQ         reduce using rule 123 (expr2 -> expr DOT expr .)
    PLUSEQ          reduce using rule 123 (expr2 -> expr DOT expr .)
    OREQ            reduce using rule 123 (expr2 -> expr DOT expr .)
    ANDEQ           reduce using rule 123 (expr2 -> expr DOT expr .)
    COMMA           reduce using rule 123 (expr2 -> expr DOT expr .)
    SEMI            reduce using rule 123 (expr2 -> expr DOT expr .)
    RBRACKET        reduce using rule 123 (expr2 -> expr DOT expr .)
    RBRACE          reduce using rule 123 (expr2 -> expr DOT expr .)
    CASE            reduce using rule 123 (expr2 -> expr DOT expr .)
    OTHERWISE       reduce using rule 123 (expr2 -> expr DOT expr .)
    END_STMT        reduce using rule 123 (expr2 -> expr DOT expr .)
    RPAREN          reduce using rule 123 (expr2 -> expr DOT expr .)
    error           reduce using rule 123 (expr2 -> expr DOT expr .)

  ! FIELD           [ shift and go to state 115 ]
  ! TRANSPOSE       [ shift and go to state 102 ]
  ! LBRACE          [ shift and go to state 120 ]
  ! LPAREN          [ shift and go to state 117 ]
  ! AND             [ shift and go to state 119 ]
  ! ANDAND          [ shift and go to state 112 ]
  ! BACKSLASH       [ shift and go to state 103 ]
  ! COLON           [ shift and go to state 107 ]
  ! DIV             [ shift and go to state 96 ]
  ! DOT             [ shift and go to state 99 ]
  ! DOTDIV          [ shift and go to state 90 ]
  ! DOTEXP          [ shift and go to state 118 ]
  ! DOTMUL          [ shift and go to state 97 ]
  ! DOTMULEQ        [ shift and go to state 104 ]
  ! EQEQ            [ shift and go to state 92 ]
  ! EXP             [ shift and go to state 94 ]
  ! GE              [ shift and go to state 116 ]
  ! GT              [ shift and go to state 113 ]
  ! LE              [ shift and go to state 100 ]
  ! LT              [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 98 ]
  ! MUL             [ shift and go to state 95 ]
  ! NE              [ shift and go to state 93 ]
  ! OR              [ shift and go to state 122 ]
  ! OROR            [ shift and go to state 91 ]
  ! PLUS            [ shift and go to state 109 ]
  ! EQ              [ shift and go to state 101 ]
  ! MULEQ           [ shift and go to state 108 ]
  ! DIVEQ           [ shift and go to state 111 ]
  ! MINUSEQ         [ shift and go to state 105 ]
  ! PLUSEQ          [ shift and go to state 121 ]
  ! OREQ            [ shift and go to state 110 ]
  ! ANDEQ           [ shift and go to state 114 ]


state 165

    (132) expr2 -> expr LE expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    ANDAND          reduce using rule 132 (expr2 -> expr LE expr .)
    COLON           reduce using rule 132 (expr2 -> expr LE expr .)
    DOTMULEQ        reduce using rule 132 (expr2 -> expr LE expr .)
    EQEQ            reduce using rule 132 (expr2 -> expr LE expr .)
    GE              reduce using rule 132 (expr2 -> expr LE expr .)
    GT              reduce using rule 132 (expr2 -> expr LE expr .)
    LE              reduce using rule 132 (expr2 -> expr LE expr .)
    LT              reduce using rule 132 (expr2 -> expr LE expr .)
    NE              reduce using rule 132 (expr2 -> expr LE expr .)
    OROR            reduce using rule 132 (expr2 -> expr LE expr .)
    EQ              reduce using rule 132 (expr2 -> expr LE expr .)
    MULEQ           reduce using rule 132 (expr2 -> expr LE expr .)
    DIVEQ           reduce using rule 132 (expr2 -> expr LE expr .)
    MINUSEQ         reduce using rule 132 (expr2 -> expr LE expr .)
    PLUSEQ          reduce using rule 132 (expr2 -> expr LE expr .)
    OREQ            reduce using rule 132 (expr2 -> expr LE expr .)
    ANDEQ           reduce using rule 132 (expr2 -> expr LE expr .)
    COMMA           reduce using rule 132 (expr2 -> expr LE expr .)
    SEMI            reduce using rule 132 (expr2 -> expr LE expr .)
    RBRACKET        reduce using rule 132 (expr2 -> expr LE expr .)
    RBRACE          reduce using rule 132 (expr2 -> expr LE expr .)
    CASE            reduce using rule 132 (expr2 -> expr LE expr .)
    OTHERWISE       reduce using rule 132 (expr2 -> expr LE expr .)
    END_STMT        reduce using rule 132 (expr2 -> expr LE expr .)
    RPAREN          reduce using rule 132 (expr2 -> expr LE expr .)
    error           reduce using rule 132 (expr2 -> expr LE expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    AND             shift and go to state 119
    BACKSLASH       shift and go to state 103
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    EXP             shift and go to state 94
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    OR              shift and go to state 122
    PLUS            shift and go to state 109

  ! FIELD           [ reduce using rule 132 (expr2 -> expr LE expr .) ]
  ! TRANSPOSE       [ reduce using rule 132 (expr2 -> expr LE expr .) ]
  ! LBRACE          [ reduce using rule 132 (expr2 -> expr LE expr .) ]
  ! LPAREN          [ reduce using rule 132 (expr2 -> expr LE expr .) ]
  ! AND             [ reduce using rule 132 (expr2 -> expr LE expr .) ]
  ! BACKSLASH       [ reduce using rule 132 (expr2 -> expr LE expr .) ]
  ! DIV             [ reduce using rule 132 (expr2 -> expr LE expr .) ]
  ! DOT             [ reduce using rule 132 (expr2 -> expr LE expr .) ]
  ! DOTDIV          [ reduce using rule 132 (expr2 -> expr LE expr .) ]
  ! DOTEXP          [ reduce using rule 132 (expr2 -> expr LE expr .) ]
  ! DOTMUL          [ reduce using rule 132 (expr2 -> expr LE expr .) ]
  ! EXP             [ reduce using rule 132 (expr2 -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 132 (expr2 -> expr LE expr .) ]
  ! MUL             [ reduce using rule 132 (expr2 -> expr LE expr .) ]
  ! OR              [ reduce using rule 132 (expr2 -> expr LE expr .) ]
  ! PLUS            [ reduce using rule 132 (expr2 -> expr LE expr .) ]
  ! ANDAND          [ shift and go to state 112 ]
  ! COLON           [ shift and go to state 107 ]
  ! DOTMULEQ        [ shift and go to state 104 ]
  ! EQEQ            [ shift and go to state 92 ]
  ! GE              [ shift and go to state 116 ]
  ! GT              [ shift and go to state 113 ]
  ! LE              [ shift and go to state 100 ]
  ! LT              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 93 ]
  ! OROR            [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 101 ]
  ! MULEQ           [ shift and go to state 108 ]
  ! DIVEQ           [ shift and go to state 111 ]
  ! MINUSEQ         [ shift and go to state 105 ]
  ! PLUSEQ          [ shift and go to state 121 ]
  ! OREQ            [ shift and go to state 110 ]
  ! ANDEQ           [ shift and go to state 114 ]


state 166

    (140) expr2 -> expr EQ expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    COMMA           reduce using rule 140 (expr2 -> expr EQ expr .)
    SEMI            reduce using rule 140 (expr2 -> expr EQ expr .)
    RBRACKET        reduce using rule 140 (expr2 -> expr EQ expr .)
    RBRACE          reduce using rule 140 (expr2 -> expr EQ expr .)
    CASE            reduce using rule 140 (expr2 -> expr EQ expr .)
    OTHERWISE       reduce using rule 140 (expr2 -> expr EQ expr .)
    END_STMT        reduce using rule 140 (expr2 -> expr EQ expr .)
    RPAREN          reduce using rule 140 (expr2 -> expr EQ expr .)
    error           reduce using rule 140 (expr2 -> expr EQ expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    AND             shift and go to state 119
    ANDAND          shift and go to state 112
    BACKSLASH       shift and go to state 103
    COLON           shift and go to state 107
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    DOTMULEQ        shift and go to state 104
    EQEQ            shift and go to state 92
    EXP             shift and go to state 94
    GE              shift and go to state 116
    GT              shift and go to state 113
    LE              shift and go to state 100
    LT              shift and go to state 106
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    NE              shift and go to state 93
    OR              shift and go to state 122
    OROR            shift and go to state 91
    PLUS            shift and go to state 109
    EQ              shift and go to state 101
    MULEQ           shift and go to state 108
    DIVEQ           shift and go to state 111
    MINUSEQ         shift and go to state 105
    PLUSEQ          shift and go to state 121
    OREQ            shift and go to state 110
    ANDEQ           shift and go to state 114

  ! FIELD           [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! TRANSPOSE       [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! LBRACE          [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! LPAREN          [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! AND             [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! ANDAND          [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! BACKSLASH       [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! COLON           [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! DIV             [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! DOT             [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! DOTDIV          [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! DOTEXP          [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! DOTMUL          [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! DOTMULEQ        [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! EQEQ            [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! EXP             [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! GE              [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! GT              [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! LE              [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! LT              [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! MUL             [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! NE              [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! OR              [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! OROR            [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! PLUS            [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! EQ              [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! MULEQ           [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! DIVEQ           [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! MINUSEQ         [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! PLUSEQ          [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! OREQ            [ reduce using rule 140 (expr2 -> expr EQ expr .) ]
  ! ANDEQ           [ reduce using rule 140 (expr2 -> expr EQ expr .) ]


state 167

    (120) expr2 -> expr BACKSLASH expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    AND             reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    ANDAND          reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    BACKSLASH       reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    COLON           reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    DIV             reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    DOTDIV          reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    DOTMUL          reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    DOTMULEQ        reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    EQEQ            reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    GE              reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    GT              reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    LE              reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    LT              reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    MINUS           reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    MUL             reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    NE              reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    OR              reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    OROR            reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    PLUS            reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    EQ              reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    MULEQ           reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    DIVEQ           reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    MINUSEQ         reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    PLUSEQ          reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    OREQ            reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    ANDEQ           reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    COMMA           reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    SEMI            reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    RBRACKET        reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    RBRACE          reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    CASE            reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    OTHERWISE       reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    END_STMT        reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    RPAREN          reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    error           reduce using rule 120 (expr2 -> expr BACKSLASH expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    DOT             shift and go to state 99
    DOTEXP          shift and go to state 118
    EXP             shift and go to state 94

  ! FIELD           [ reduce using rule 120 (expr2 -> expr BACKSLASH expr .) ]
  ! TRANSPOSE       [ reduce using rule 120 (expr2 -> expr BACKSLASH expr .) ]
  ! LBRACE          [ reduce using rule 120 (expr2 -> expr BACKSLASH expr .) ]
  ! LPAREN          [ reduce using rule 120 (expr2 -> expr BACKSLASH expr .) ]
  ! DOT             [ reduce using rule 120 (expr2 -> expr BACKSLASH expr .) ]
  ! DOTEXP          [ reduce using rule 120 (expr2 -> expr BACKSLASH expr .) ]
  ! EXP             [ reduce using rule 120 (expr2 -> expr BACKSLASH expr .) ]
  ! AND             [ shift and go to state 119 ]
  ! ANDAND          [ shift and go to state 112 ]
  ! BACKSLASH       [ shift and go to state 103 ]
  ! COLON           [ shift and go to state 107 ]
  ! DIV             [ shift and go to state 96 ]
  ! DOTDIV          [ shift and go to state 90 ]
  ! DOTMUL          [ shift and go to state 97 ]
  ! DOTMULEQ        [ shift and go to state 104 ]
  ! EQEQ            [ shift and go to state 92 ]
  ! GE              [ shift and go to state 116 ]
  ! GT              [ shift and go to state 113 ]
  ! LE              [ shift and go to state 100 ]
  ! LT              [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 98 ]
  ! MUL             [ shift and go to state 95 ]
  ! NE              [ shift and go to state 93 ]
  ! OR              [ shift and go to state 122 ]
  ! OROR            [ shift and go to state 91 ]
  ! PLUS            [ shift and go to state 109 ]
  ! EQ              [ shift and go to state 101 ]
  ! MULEQ           [ shift and go to state 108 ]
  ! DIVEQ           [ shift and go to state 111 ]
  ! MINUSEQ         [ shift and go to state 105 ]
  ! PLUSEQ          [ shift and go to state 121 ]
  ! OREQ            [ shift and go to state 110 ]
  ! ANDEQ           [ shift and go to state 114 ]


state 168

    (127) expr2 -> expr DOTMULEQ expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    COMMA           reduce using rule 127 (expr2 -> expr DOTMULEQ expr .)
    SEMI            reduce using rule 127 (expr2 -> expr DOTMULEQ expr .)
    RBRACKET        reduce using rule 127 (expr2 -> expr DOTMULEQ expr .)
    RBRACE          reduce using rule 127 (expr2 -> expr DOTMULEQ expr .)
    CASE            reduce using rule 127 (expr2 -> expr DOTMULEQ expr .)
    OTHERWISE       reduce using rule 127 (expr2 -> expr DOTMULEQ expr .)
    END_STMT        reduce using rule 127 (expr2 -> expr DOTMULEQ expr .)
    RPAREN          reduce using rule 127 (expr2 -> expr DOTMULEQ expr .)
    error           reduce using rule 127 (expr2 -> expr DOTMULEQ expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    AND             shift and go to state 119
    ANDAND          shift and go to state 112
    BACKSLASH       shift and go to state 103
    COLON           shift and go to state 107
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    DOTMULEQ        shift and go to state 104
    EQEQ            shift and go to state 92
    EXP             shift and go to state 94
    GE              shift and go to state 116
    GT              shift and go to state 113
    LE              shift and go to state 100
    LT              shift and go to state 106
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    NE              shift and go to state 93
    OR              shift and go to state 122
    OROR            shift and go to state 91
    PLUS            shift and go to state 109
    EQ              shift and go to state 101
    MULEQ           shift and go to state 108
    DIVEQ           shift and go to state 111
    MINUSEQ         shift and go to state 105
    PLUSEQ          shift and go to state 121
    OREQ            shift and go to state 110
    ANDEQ           shift and go to state 114

  ! FIELD           [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! TRANSPOSE       [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! LBRACE          [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! LPAREN          [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! AND             [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! ANDAND          [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! BACKSLASH       [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! COLON           [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! DIV             [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! DOT             [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! DOTDIV          [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! DOTEXP          [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! DOTMUL          [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! DOTMULEQ        [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! EQEQ            [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! EXP             [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! GE              [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! GT              [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! LE              [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! LT              [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! MINUS           [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! MUL             [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! NE              [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! OR              [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! OROR            [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! PLUS            [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! EQ              [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! MULEQ           [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! DIVEQ           [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! MINUSEQ         [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! PLUSEQ          [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! OREQ            [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]
  ! ANDEQ           [ reduce using rule 127 (expr2 -> expr DOTMULEQ expr .) ]


state 169

    (143) expr2 -> expr MINUSEQ expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    COMMA           reduce using rule 143 (expr2 -> expr MINUSEQ expr .)
    SEMI            reduce using rule 143 (expr2 -> expr MINUSEQ expr .)
    RBRACKET        reduce using rule 143 (expr2 -> expr MINUSEQ expr .)
    RBRACE          reduce using rule 143 (expr2 -> expr MINUSEQ expr .)
    CASE            reduce using rule 143 (expr2 -> expr MINUSEQ expr .)
    OTHERWISE       reduce using rule 143 (expr2 -> expr MINUSEQ expr .)
    END_STMT        reduce using rule 143 (expr2 -> expr MINUSEQ expr .)
    RPAREN          reduce using rule 143 (expr2 -> expr MINUSEQ expr .)
    error           reduce using rule 143 (expr2 -> expr MINUSEQ expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    AND             shift and go to state 119
    ANDAND          shift and go to state 112
    BACKSLASH       shift and go to state 103
    COLON           shift and go to state 107
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    DOTMULEQ        shift and go to state 104
    EQEQ            shift and go to state 92
    EXP             shift and go to state 94
    GE              shift and go to state 116
    GT              shift and go to state 113
    LE              shift and go to state 100
    LT              shift and go to state 106
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    NE              shift and go to state 93
    OR              shift and go to state 122
    OROR            shift and go to state 91
    PLUS            shift and go to state 109
    EQ              shift and go to state 101
    MULEQ           shift and go to state 108
    DIVEQ           shift and go to state 111
    MINUSEQ         shift and go to state 105
    PLUSEQ          shift and go to state 121
    OREQ            shift and go to state 110
    ANDEQ           shift and go to state 114

  ! FIELD           [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! TRANSPOSE       [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! LBRACE          [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! LPAREN          [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! AND             [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! ANDAND          [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! BACKSLASH       [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! COLON           [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! DIV             [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! DOT             [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! DOTDIV          [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! DOTEXP          [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! DOTMUL          [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! DOTMULEQ        [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! EQEQ            [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! EXP             [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! GE              [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! GT              [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! LE              [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! LT              [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! MINUS           [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! MUL             [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! NE              [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! OR              [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! OROR            [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! PLUS            [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! EQ              [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! MULEQ           [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! DIVEQ           [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! MINUSEQ         [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! PLUSEQ          [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! OREQ            [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]
  ! ANDEQ           [ reduce using rule 143 (expr2 -> expr MINUSEQ expr .) ]


state 170

    (133) expr2 -> expr LT expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    ANDAND          reduce using rule 133 (expr2 -> expr LT expr .)
    COLON           reduce using rule 133 (expr2 -> expr LT expr .)
    DOTMULEQ        reduce using rule 133 (expr2 -> expr LT expr .)
    EQEQ            reduce using rule 133 (expr2 -> expr LT expr .)
    GE              reduce using rule 133 (expr2 -> expr LT expr .)
    GT              reduce using rule 133 (expr2 -> expr LT expr .)
    LE              reduce using rule 133 (expr2 -> expr LT expr .)
    LT              reduce using rule 133 (expr2 -> expr LT expr .)
    NE              reduce using rule 133 (expr2 -> expr LT expr .)
    OROR            reduce using rule 133 (expr2 -> expr LT expr .)
    EQ              reduce using rule 133 (expr2 -> expr LT expr .)
    MULEQ           reduce using rule 133 (expr2 -> expr LT expr .)
    DIVEQ           reduce using rule 133 (expr2 -> expr LT expr .)
    MINUSEQ         reduce using rule 133 (expr2 -> expr LT expr .)
    PLUSEQ          reduce using rule 133 (expr2 -> expr LT expr .)
    OREQ            reduce using rule 133 (expr2 -> expr LT expr .)
    ANDEQ           reduce using rule 133 (expr2 -> expr LT expr .)
    COMMA           reduce using rule 133 (expr2 -> expr LT expr .)
    SEMI            reduce using rule 133 (expr2 -> expr LT expr .)
    RBRACKET        reduce using rule 133 (expr2 -> expr LT expr .)
    RBRACE          reduce using rule 133 (expr2 -> expr LT expr .)
    CASE            reduce using rule 133 (expr2 -> expr LT expr .)
    OTHERWISE       reduce using rule 133 (expr2 -> expr LT expr .)
    END_STMT        reduce using rule 133 (expr2 -> expr LT expr .)
    RPAREN          reduce using rule 133 (expr2 -> expr LT expr .)
    error           reduce using rule 133 (expr2 -> expr LT expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    AND             shift and go to state 119
    BACKSLASH       shift and go to state 103
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    EXP             shift and go to state 94
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    OR              shift and go to state 122
    PLUS            shift and go to state 109

  ! FIELD           [ reduce using rule 133 (expr2 -> expr LT expr .) ]
  ! TRANSPOSE       [ reduce using rule 133 (expr2 -> expr LT expr .) ]
  ! LBRACE          [ reduce using rule 133 (expr2 -> expr LT expr .) ]
  ! LPAREN          [ reduce using rule 133 (expr2 -> expr LT expr .) ]
  ! AND             [ reduce using rule 133 (expr2 -> expr LT expr .) ]
  ! BACKSLASH       [ reduce using rule 133 (expr2 -> expr LT expr .) ]
  ! DIV             [ reduce using rule 133 (expr2 -> expr LT expr .) ]
  ! DOT             [ reduce using rule 133 (expr2 -> expr LT expr .) ]
  ! DOTDIV          [ reduce using rule 133 (expr2 -> expr LT expr .) ]
  ! DOTEXP          [ reduce using rule 133 (expr2 -> expr LT expr .) ]
  ! DOTMUL          [ reduce using rule 133 (expr2 -> expr LT expr .) ]
  ! EXP             [ reduce using rule 133 (expr2 -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 133 (expr2 -> expr LT expr .) ]
  ! MUL             [ reduce using rule 133 (expr2 -> expr LT expr .) ]
  ! OR              [ reduce using rule 133 (expr2 -> expr LT expr .) ]
  ! PLUS            [ reduce using rule 133 (expr2 -> expr LT expr .) ]
  ! ANDAND          [ shift and go to state 112 ]
  ! COLON           [ shift and go to state 107 ]
  ! DOTMULEQ        [ shift and go to state 104 ]
  ! EQEQ            [ shift and go to state 92 ]
  ! GE              [ shift and go to state 116 ]
  ! GT              [ shift and go to state 113 ]
  ! LE              [ shift and go to state 100 ]
  ! LT              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 93 ]
  ! OROR            [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 101 ]
  ! MULEQ           [ shift and go to state 108 ]
  ! DIVEQ           [ shift and go to state 111 ]
  ! MINUSEQ         [ shift and go to state 105 ]
  ! PLUSEQ          [ shift and go to state 121 ]
  ! OREQ            [ shift and go to state 110 ]
  ! ANDEQ           [ shift and go to state 114 ]


state 171

    (121) expr2 -> expr COLON expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    COLON           reduce using rule 121 (expr2 -> expr COLON expr .)
    DOTMULEQ        reduce using rule 121 (expr2 -> expr COLON expr .)
    EQ              reduce using rule 121 (expr2 -> expr COLON expr .)
    MULEQ           reduce using rule 121 (expr2 -> expr COLON expr .)
    DIVEQ           reduce using rule 121 (expr2 -> expr COLON expr .)
    MINUSEQ         reduce using rule 121 (expr2 -> expr COLON expr .)
    PLUSEQ          reduce using rule 121 (expr2 -> expr COLON expr .)
    OREQ            reduce using rule 121 (expr2 -> expr COLON expr .)
    ANDEQ           reduce using rule 121 (expr2 -> expr COLON expr .)
    COMMA           reduce using rule 121 (expr2 -> expr COLON expr .)
    SEMI            reduce using rule 121 (expr2 -> expr COLON expr .)
    RBRACKET        reduce using rule 121 (expr2 -> expr COLON expr .)
    RBRACE          reduce using rule 121 (expr2 -> expr COLON expr .)
    CASE            reduce using rule 121 (expr2 -> expr COLON expr .)
    OTHERWISE       reduce using rule 121 (expr2 -> expr COLON expr .)
    END_STMT        reduce using rule 121 (expr2 -> expr COLON expr .)
    RPAREN          reduce using rule 121 (expr2 -> expr COLON expr .)
    error           reduce using rule 121 (expr2 -> expr COLON expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    AND             shift and go to state 119
    ANDAND          shift and go to state 112
    BACKSLASH       shift and go to state 103
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    EQEQ            shift and go to state 92
    EXP             shift and go to state 94
    GE              shift and go to state 116
    GT              shift and go to state 113
    LE              shift and go to state 100
    LT              shift and go to state 106
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    NE              shift and go to state 93
    OR              shift and go to state 122
    OROR            shift and go to state 91
    PLUS            shift and go to state 109

  ! FIELD           [ reduce using rule 121 (expr2 -> expr COLON expr .) ]
  ! TRANSPOSE       [ reduce using rule 121 (expr2 -> expr COLON expr .) ]
  ! LBRACE          [ reduce using rule 121 (expr2 -> expr COLON expr .) ]
  ! LPAREN          [ reduce using rule 121 (expr2 -> expr COLON expr .) ]
  ! AND             [ reduce using rule 121 (expr2 -> expr COLON expr .) ]
  ! ANDAND          [ reduce using rule 121 (expr2 -> expr COLON expr .) ]
  ! BACKSLASH       [ reduce using rule 121 (expr2 -> expr COLON expr .) ]
  ! DIV             [ reduce using rule 121 (expr2 -> expr COLON expr .) ]
  ! DOT             [ reduce using rule 121 (expr2 -> expr COLON expr .) ]
  ! DOTDIV          [ reduce using rule 121 (expr2 -> expr COLON expr .) ]
  ! DOTEXP          [ reduce using rule 121 (expr2 -> expr COLON expr .) ]
  ! DOTMUL          [ reduce using rule 121 (expr2 -> expr COLON expr .) ]
  ! EQEQ            [ reduce using rule 121 (expr2 -> expr COLON expr .) ]
  ! EXP             [ reduce using rule 121 (expr2 -> expr COLON expr .) ]
  ! GE              [ reduce using rule 121 (expr2 -> expr COLON expr .) ]
  ! GT              [ reduce using rule 121 (expr2 -> expr COLON expr .) ]
  ! LE              [ reduce using rule 121 (expr2 -> expr COLON expr .) ]
  ! LT              [ reduce using rule 121 (expr2 -> expr COLON expr .) ]
  ! MINUS           [ reduce using rule 121 (expr2 -> expr COLON expr .) ]
  ! MUL             [ reduce using rule 121 (expr2 -> expr COLON expr .) ]
  ! NE              [ reduce using rule 121 (expr2 -> expr COLON expr .) ]
  ! OR              [ reduce using rule 121 (expr2 -> expr COLON expr .) ]
  ! OROR            [ reduce using rule 121 (expr2 -> expr COLON expr .) ]
  ! PLUS            [ reduce using rule 121 (expr2 -> expr COLON expr .) ]
  ! COLON           [ shift and go to state 107 ]
  ! DOTMULEQ        [ shift and go to state 104 ]
  ! EQ              [ shift and go to state 101 ]
  ! MULEQ           [ shift and go to state 108 ]
  ! DIVEQ           [ shift and go to state 111 ]
  ! MINUSEQ         [ shift and go to state 105 ]
  ! PLUSEQ          [ shift and go to state 121 ]
  ! OREQ            [ shift and go to state 110 ]
  ! ANDEQ           [ shift and go to state 114 ]


state 172

    (141) expr2 -> expr MULEQ expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    COMMA           reduce using rule 141 (expr2 -> expr MULEQ expr .)
    SEMI            reduce using rule 141 (expr2 -> expr MULEQ expr .)
    RBRACKET        reduce using rule 141 (expr2 -> expr MULEQ expr .)
    RBRACE          reduce using rule 141 (expr2 -> expr MULEQ expr .)
    CASE            reduce using rule 141 (expr2 -> expr MULEQ expr .)
    OTHERWISE       reduce using rule 141 (expr2 -> expr MULEQ expr .)
    END_STMT        reduce using rule 141 (expr2 -> expr MULEQ expr .)
    RPAREN          reduce using rule 141 (expr2 -> expr MULEQ expr .)
    error           reduce using rule 141 (expr2 -> expr MULEQ expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    AND             shift and go to state 119
    ANDAND          shift and go to state 112
    BACKSLASH       shift and go to state 103
    COLON           shift and go to state 107
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    DOTMULEQ        shift and go to state 104
    EQEQ            shift and go to state 92
    EXP             shift and go to state 94
    GE              shift and go to state 116
    GT              shift and go to state 113
    LE              shift and go to state 100
    LT              shift and go to state 106
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    NE              shift and go to state 93
    OR              shift and go to state 122
    OROR            shift and go to state 91
    PLUS            shift and go to state 109
    EQ              shift and go to state 101
    MULEQ           shift and go to state 108
    DIVEQ           shift and go to state 111
    MINUSEQ         shift and go to state 105
    PLUSEQ          shift and go to state 121
    OREQ            shift and go to state 110
    ANDEQ           shift and go to state 114

  ! FIELD           [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! TRANSPOSE       [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! LBRACE          [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! LPAREN          [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! AND             [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! ANDAND          [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! BACKSLASH       [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! COLON           [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! DIV             [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! DOT             [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! DOTDIV          [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! DOTEXP          [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! DOTMUL          [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! DOTMULEQ        [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! EQEQ            [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! EXP             [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! GE              [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! GT              [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! LE              [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! LT              [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! MINUS           [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! MUL             [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! NE              [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! OR              [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! OROR            [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! PLUS            [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! EQ              [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! MULEQ           [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! DIVEQ           [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! MINUSEQ         [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! PLUSEQ          [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! OREQ            [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]
  ! ANDEQ           [ reduce using rule 141 (expr2 -> expr MULEQ expr .) ]


state 173

    (139) expr2 -> expr PLUS expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    AND             reduce using rule 139 (expr2 -> expr PLUS expr .)
    ANDAND          reduce using rule 139 (expr2 -> expr PLUS expr .)
    COLON           reduce using rule 139 (expr2 -> expr PLUS expr .)
    DOTMULEQ        reduce using rule 139 (expr2 -> expr PLUS expr .)
    EQEQ            reduce using rule 139 (expr2 -> expr PLUS expr .)
    GE              reduce using rule 139 (expr2 -> expr PLUS expr .)
    GT              reduce using rule 139 (expr2 -> expr PLUS expr .)
    LE              reduce using rule 139 (expr2 -> expr PLUS expr .)
    LT              reduce using rule 139 (expr2 -> expr PLUS expr .)
    MINUS           reduce using rule 139 (expr2 -> expr PLUS expr .)
    NE              reduce using rule 139 (expr2 -> expr PLUS expr .)
    OR              reduce using rule 139 (expr2 -> expr PLUS expr .)
    OROR            reduce using rule 139 (expr2 -> expr PLUS expr .)
    PLUS            reduce using rule 139 (expr2 -> expr PLUS expr .)
    EQ              reduce using rule 139 (expr2 -> expr PLUS expr .)
    MULEQ           reduce using rule 139 (expr2 -> expr PLUS expr .)
    DIVEQ           reduce using rule 139 (expr2 -> expr PLUS expr .)
    MINUSEQ         reduce using rule 139 (expr2 -> expr PLUS expr .)
    PLUSEQ          reduce using rule 139 (expr2 -> expr PLUS expr .)
    OREQ            reduce using rule 139 (expr2 -> expr PLUS expr .)
    ANDEQ           reduce using rule 139 (expr2 -> expr PLUS expr .)
    COMMA           reduce using rule 139 (expr2 -> expr PLUS expr .)
    SEMI            reduce using rule 139 (expr2 -> expr PLUS expr .)
    RBRACKET        reduce using rule 139 (expr2 -> expr PLUS expr .)
    RBRACE          reduce using rule 139 (expr2 -> expr PLUS expr .)
    CASE            reduce using rule 139 (expr2 -> expr PLUS expr .)
    OTHERWISE       reduce using rule 139 (expr2 -> expr PLUS expr .)
    END_STMT        reduce using rule 139 (expr2 -> expr PLUS expr .)
    RPAREN          reduce using rule 139 (expr2 -> expr PLUS expr .)
    error           reduce using rule 139 (expr2 -> expr PLUS expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    BACKSLASH       shift and go to state 103
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    EXP             shift and go to state 94
    MUL             shift and go to state 95

  ! FIELD           [ reduce using rule 139 (expr2 -> expr PLUS expr .) ]
  ! TRANSPOSE       [ reduce using rule 139 (expr2 -> expr PLUS expr .) ]
  ! LBRACE          [ reduce using rule 139 (expr2 -> expr PLUS expr .) ]
  ! LPAREN          [ reduce using rule 139 (expr2 -> expr PLUS expr .) ]
  ! BACKSLASH       [ reduce using rule 139 (expr2 -> expr PLUS expr .) ]
  ! DIV             [ reduce using rule 139 (expr2 -> expr PLUS expr .) ]
  ! DOT             [ reduce using rule 139 (expr2 -> expr PLUS expr .) ]
  ! DOTDIV          [ reduce using rule 139 (expr2 -> expr PLUS expr .) ]
  ! DOTEXP          [ reduce using rule 139 (expr2 -> expr PLUS expr .) ]
  ! DOTMUL          [ reduce using rule 139 (expr2 -> expr PLUS expr .) ]
  ! EXP             [ reduce using rule 139 (expr2 -> expr PLUS expr .) ]
  ! MUL             [ reduce using rule 139 (expr2 -> expr PLUS expr .) ]
  ! AND             [ shift and go to state 119 ]
  ! ANDAND          [ shift and go to state 112 ]
  ! COLON           [ shift and go to state 107 ]
  ! DOTMULEQ        [ shift and go to state 104 ]
  ! EQEQ            [ shift and go to state 92 ]
  ! GE              [ shift and go to state 116 ]
  ! GT              [ shift and go to state 113 ]
  ! LE              [ shift and go to state 100 ]
  ! LT              [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 98 ]
  ! NE              [ shift and go to state 93 ]
  ! OR              [ shift and go to state 122 ]
  ! OROR            [ shift and go to state 91 ]
  ! PLUS            [ shift and go to state 109 ]
  ! EQ              [ shift and go to state 101 ]
  ! MULEQ           [ shift and go to state 108 ]
  ! DIVEQ           [ shift and go to state 111 ]
  ! MINUSEQ         [ shift and go to state 105 ]
  ! PLUSEQ          [ shift and go to state 121 ]
  ! OREQ            [ shift and go to state 110 ]
  ! ANDEQ           [ shift and go to state 114 ]


state 174

    (145) expr2 -> expr OREQ expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    COMMA           reduce using rule 145 (expr2 -> expr OREQ expr .)
    SEMI            reduce using rule 145 (expr2 -> expr OREQ expr .)
    RBRACKET        reduce using rule 145 (expr2 -> expr OREQ expr .)
    RBRACE          reduce using rule 145 (expr2 -> expr OREQ expr .)
    CASE            reduce using rule 145 (expr2 -> expr OREQ expr .)
    OTHERWISE       reduce using rule 145 (expr2 -> expr OREQ expr .)
    END_STMT        reduce using rule 145 (expr2 -> expr OREQ expr .)
    RPAREN          reduce using rule 145 (expr2 -> expr OREQ expr .)
    error           reduce using rule 145 (expr2 -> expr OREQ expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    AND             shift and go to state 119
    ANDAND          shift and go to state 112
    BACKSLASH       shift and go to state 103
    COLON           shift and go to state 107
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    DOTMULEQ        shift and go to state 104
    EQEQ            shift and go to state 92
    EXP             shift and go to state 94
    GE              shift and go to state 116
    GT              shift and go to state 113
    LE              shift and go to state 100
    LT              shift and go to state 106
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    NE              shift and go to state 93
    OR              shift and go to state 122
    OROR            shift and go to state 91
    PLUS            shift and go to state 109
    EQ              shift and go to state 101
    MULEQ           shift and go to state 108
    DIVEQ           shift and go to state 111
    MINUSEQ         shift and go to state 105
    PLUSEQ          shift and go to state 121
    OREQ            shift and go to state 110
    ANDEQ           shift and go to state 114

  ! FIELD           [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! TRANSPOSE       [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! LBRACE          [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! LPAREN          [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! AND             [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! ANDAND          [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! BACKSLASH       [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! COLON           [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! DIV             [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! DOT             [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! DOTDIV          [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! DOTEXP          [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! DOTMUL          [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! DOTMULEQ        [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! EQEQ            [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! EXP             [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! GE              [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! GT              [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! LE              [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! LT              [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! MINUS           [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! MUL             [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! NE              [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! OR              [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! OROR            [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! PLUS            [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! EQ              [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! MULEQ           [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! DIVEQ           [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! MINUSEQ         [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! PLUSEQ          [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! OREQ            [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]
  ! ANDEQ           [ reduce using rule 145 (expr2 -> expr OREQ expr .) ]


state 175

    (142) expr2 -> expr DIVEQ expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    COMMA           reduce using rule 142 (expr2 -> expr DIVEQ expr .)
    SEMI            reduce using rule 142 (expr2 -> expr DIVEQ expr .)
    RBRACKET        reduce using rule 142 (expr2 -> expr DIVEQ expr .)
    RBRACE          reduce using rule 142 (expr2 -> expr DIVEQ expr .)
    CASE            reduce using rule 142 (expr2 -> expr DIVEQ expr .)
    OTHERWISE       reduce using rule 142 (expr2 -> expr DIVEQ expr .)
    END_STMT        reduce using rule 142 (expr2 -> expr DIVEQ expr .)
    RPAREN          reduce using rule 142 (expr2 -> expr DIVEQ expr .)
    error           reduce using rule 142 (expr2 -> expr DIVEQ expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    AND             shift and go to state 119
    ANDAND          shift and go to state 112
    BACKSLASH       shift and go to state 103
    COLON           shift and go to state 107
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    DOTMULEQ        shift and go to state 104
    EQEQ            shift and go to state 92
    EXP             shift and go to state 94
    GE              shift and go to state 116
    GT              shift and go to state 113
    LE              shift and go to state 100
    LT              shift and go to state 106
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    NE              shift and go to state 93
    OR              shift and go to state 122
    OROR            shift and go to state 91
    PLUS            shift and go to state 109
    EQ              shift and go to state 101
    MULEQ           shift and go to state 108
    DIVEQ           shift and go to state 111
    MINUSEQ         shift and go to state 105
    PLUSEQ          shift and go to state 121
    OREQ            shift and go to state 110
    ANDEQ           shift and go to state 114

  ! FIELD           [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! TRANSPOSE       [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! LBRACE          [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! LPAREN          [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! AND             [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! ANDAND          [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! BACKSLASH       [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! COLON           [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! DIV             [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! DOT             [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! DOTDIV          [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! DOTEXP          [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! DOTMUL          [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! DOTMULEQ        [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! EQEQ            [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! EXP             [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! GE              [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! GT              [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! LE              [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! LT              [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! MINUS           [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! MUL             [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! NE              [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! OR              [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! OROR            [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! PLUS            [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! EQ              [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! MULEQ           [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! DIVEQ           [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! MINUSEQ         [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! PLUSEQ          [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! OREQ            [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]
  ! ANDEQ           [ reduce using rule 142 (expr2 -> expr DIVEQ expr .) ]


state 176

    (119) expr2 -> expr ANDAND expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    ANDAND          reduce using rule 119 (expr2 -> expr ANDAND expr .)
    COLON           reduce using rule 119 (expr2 -> expr ANDAND expr .)
    DOTMULEQ        reduce using rule 119 (expr2 -> expr ANDAND expr .)
    OROR            reduce using rule 119 (expr2 -> expr ANDAND expr .)
    EQ              reduce using rule 119 (expr2 -> expr ANDAND expr .)
    MULEQ           reduce using rule 119 (expr2 -> expr ANDAND expr .)
    DIVEQ           reduce using rule 119 (expr2 -> expr ANDAND expr .)
    MINUSEQ         reduce using rule 119 (expr2 -> expr ANDAND expr .)
    PLUSEQ          reduce using rule 119 (expr2 -> expr ANDAND expr .)
    OREQ            reduce using rule 119 (expr2 -> expr ANDAND expr .)
    ANDEQ           reduce using rule 119 (expr2 -> expr ANDAND expr .)
    COMMA           reduce using rule 119 (expr2 -> expr ANDAND expr .)
    SEMI            reduce using rule 119 (expr2 -> expr ANDAND expr .)
    RBRACKET        reduce using rule 119 (expr2 -> expr ANDAND expr .)
    RBRACE          reduce using rule 119 (expr2 -> expr ANDAND expr .)
    CASE            reduce using rule 119 (expr2 -> expr ANDAND expr .)
    OTHERWISE       reduce using rule 119 (expr2 -> expr ANDAND expr .)
    END_STMT        reduce using rule 119 (expr2 -> expr ANDAND expr .)
    RPAREN          reduce using rule 119 (expr2 -> expr ANDAND expr .)
    error           reduce using rule 119 (expr2 -> expr ANDAND expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    AND             shift and go to state 119
    BACKSLASH       shift and go to state 103
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    EQEQ            shift and go to state 92
    EXP             shift and go to state 94
    GE              shift and go to state 116
    GT              shift and go to state 113
    LE              shift and go to state 100
    LT              shift and go to state 106
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    NE              shift and go to state 93
    OR              shift and go to state 122
    PLUS            shift and go to state 109

  ! FIELD           [ reduce using rule 119 (expr2 -> expr ANDAND expr .) ]
  ! TRANSPOSE       [ reduce using rule 119 (expr2 -> expr ANDAND expr .) ]
  ! LBRACE          [ reduce using rule 119 (expr2 -> expr ANDAND expr .) ]
  ! LPAREN          [ reduce using rule 119 (expr2 -> expr ANDAND expr .) ]
  ! AND             [ reduce using rule 119 (expr2 -> expr ANDAND expr .) ]
  ! BACKSLASH       [ reduce using rule 119 (expr2 -> expr ANDAND expr .) ]
  ! DIV             [ reduce using rule 119 (expr2 -> expr ANDAND expr .) ]
  ! DOT             [ reduce using rule 119 (expr2 -> expr ANDAND expr .) ]
  ! DOTDIV          [ reduce using rule 119 (expr2 -> expr ANDAND expr .) ]
  ! DOTEXP          [ reduce using rule 119 (expr2 -> expr ANDAND expr .) ]
  ! DOTMUL          [ reduce using rule 119 (expr2 -> expr ANDAND expr .) ]
  ! EQEQ            [ reduce using rule 119 (expr2 -> expr ANDAND expr .) ]
  ! EXP             [ reduce using rule 119 (expr2 -> expr ANDAND expr .) ]
  ! GE              [ reduce using rule 119 (expr2 -> expr ANDAND expr .) ]
  ! GT              [ reduce using rule 119 (expr2 -> expr ANDAND expr .) ]
  ! LE              [ reduce using rule 119 (expr2 -> expr ANDAND expr .) ]
  ! LT              [ reduce using rule 119 (expr2 -> expr ANDAND expr .) ]
  ! MINUS           [ reduce using rule 119 (expr2 -> expr ANDAND expr .) ]
  ! MUL             [ reduce using rule 119 (expr2 -> expr ANDAND expr .) ]
  ! NE              [ reduce using rule 119 (expr2 -> expr ANDAND expr .) ]
  ! OR              [ reduce using rule 119 (expr2 -> expr ANDAND expr .) ]
  ! PLUS            [ reduce using rule 119 (expr2 -> expr ANDAND expr .) ]
  ! ANDAND          [ shift and go to state 112 ]
  ! COLON           [ shift and go to state 107 ]
  ! DOTMULEQ        [ shift and go to state 104 ]
  ! OROR            [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 101 ]
  ! MULEQ           [ shift and go to state 108 ]
  ! DIVEQ           [ shift and go to state 111 ]
  ! MINUSEQ         [ shift and go to state 105 ]
  ! PLUSEQ          [ shift and go to state 121 ]
  ! OREQ            [ shift and go to state 110 ]
  ! ANDEQ           [ shift and go to state 114 ]


state 177

    (131) expr2 -> expr GT expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    ANDAND          reduce using rule 131 (expr2 -> expr GT expr .)
    COLON           reduce using rule 131 (expr2 -> expr GT expr .)
    DOTMULEQ        reduce using rule 131 (expr2 -> expr GT expr .)
    EQEQ            reduce using rule 131 (expr2 -> expr GT expr .)
    GE              reduce using rule 131 (expr2 -> expr GT expr .)
    GT              reduce using rule 131 (expr2 -> expr GT expr .)
    LE              reduce using rule 131 (expr2 -> expr GT expr .)
    LT              reduce using rule 131 (expr2 -> expr GT expr .)
    NE              reduce using rule 131 (expr2 -> expr GT expr .)
    OROR            reduce using rule 131 (expr2 -> expr GT expr .)
    EQ              reduce using rule 131 (expr2 -> expr GT expr .)
    MULEQ           reduce using rule 131 (expr2 -> expr GT expr .)
    DIVEQ           reduce using rule 131 (expr2 -> expr GT expr .)
    MINUSEQ         reduce using rule 131 (expr2 -> expr GT expr .)
    PLUSEQ          reduce using rule 131 (expr2 -> expr GT expr .)
    OREQ            reduce using rule 131 (expr2 -> expr GT expr .)
    ANDEQ           reduce using rule 131 (expr2 -> expr GT expr .)
    COMMA           reduce using rule 131 (expr2 -> expr GT expr .)
    SEMI            reduce using rule 131 (expr2 -> expr GT expr .)
    RBRACKET        reduce using rule 131 (expr2 -> expr GT expr .)
    RBRACE          reduce using rule 131 (expr2 -> expr GT expr .)
    CASE            reduce using rule 131 (expr2 -> expr GT expr .)
    OTHERWISE       reduce using rule 131 (expr2 -> expr GT expr .)
    END_STMT        reduce using rule 131 (expr2 -> expr GT expr .)
    RPAREN          reduce using rule 131 (expr2 -> expr GT expr .)
    error           reduce using rule 131 (expr2 -> expr GT expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    AND             shift and go to state 119
    BACKSLASH       shift and go to state 103
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    EXP             shift and go to state 94
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    OR              shift and go to state 122
    PLUS            shift and go to state 109

  ! FIELD           [ reduce using rule 131 (expr2 -> expr GT expr .) ]
  ! TRANSPOSE       [ reduce using rule 131 (expr2 -> expr GT expr .) ]
  ! LBRACE          [ reduce using rule 131 (expr2 -> expr GT expr .) ]
  ! LPAREN          [ reduce using rule 131 (expr2 -> expr GT expr .) ]
  ! AND             [ reduce using rule 131 (expr2 -> expr GT expr .) ]
  ! BACKSLASH       [ reduce using rule 131 (expr2 -> expr GT expr .) ]
  ! DIV             [ reduce using rule 131 (expr2 -> expr GT expr .) ]
  ! DOT             [ reduce using rule 131 (expr2 -> expr GT expr .) ]
  ! DOTDIV          [ reduce using rule 131 (expr2 -> expr GT expr .) ]
  ! DOTEXP          [ reduce using rule 131 (expr2 -> expr GT expr .) ]
  ! DOTMUL          [ reduce using rule 131 (expr2 -> expr GT expr .) ]
  ! EXP             [ reduce using rule 131 (expr2 -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 131 (expr2 -> expr GT expr .) ]
  ! MUL             [ reduce using rule 131 (expr2 -> expr GT expr .) ]
  ! OR              [ reduce using rule 131 (expr2 -> expr GT expr .) ]
  ! PLUS            [ reduce using rule 131 (expr2 -> expr GT expr .) ]
  ! ANDAND          [ shift and go to state 112 ]
  ! COLON           [ shift and go to state 107 ]
  ! DOTMULEQ        [ shift and go to state 104 ]
  ! EQEQ            [ shift and go to state 92 ]
  ! GE              [ shift and go to state 116 ]
  ! GT              [ shift and go to state 113 ]
  ! LE              [ shift and go to state 100 ]
  ! LT              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 93 ]
  ! OROR            [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 101 ]
  ! MULEQ           [ shift and go to state 108 ]
  ! DIVEQ           [ shift and go to state 111 ]
  ! MINUSEQ         [ shift and go to state 105 ]
  ! PLUSEQ          [ shift and go to state 121 ]
  ! OREQ            [ shift and go to state 110 ]
  ! ANDEQ           [ shift and go to state 114 ]


state 178

    (146) expr2 -> expr ANDEQ expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    COMMA           reduce using rule 146 (expr2 -> expr ANDEQ expr .)
    SEMI            reduce using rule 146 (expr2 -> expr ANDEQ expr .)
    RBRACKET        reduce using rule 146 (expr2 -> expr ANDEQ expr .)
    RBRACE          reduce using rule 146 (expr2 -> expr ANDEQ expr .)
    CASE            reduce using rule 146 (expr2 -> expr ANDEQ expr .)
    OTHERWISE       reduce using rule 146 (expr2 -> expr ANDEQ expr .)
    END_STMT        reduce using rule 146 (expr2 -> expr ANDEQ expr .)
    RPAREN          reduce using rule 146 (expr2 -> expr ANDEQ expr .)
    error           reduce using rule 146 (expr2 -> expr ANDEQ expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    AND             shift and go to state 119
    ANDAND          shift and go to state 112
    BACKSLASH       shift and go to state 103
    COLON           shift and go to state 107
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    DOTMULEQ        shift and go to state 104
    EQEQ            shift and go to state 92
    EXP             shift and go to state 94
    GE              shift and go to state 116
    GT              shift and go to state 113
    LE              shift and go to state 100
    LT              shift and go to state 106
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    NE              shift and go to state 93
    OR              shift and go to state 122
    OROR            shift and go to state 91
    PLUS            shift and go to state 109
    EQ              shift and go to state 101
    MULEQ           shift and go to state 108
    DIVEQ           shift and go to state 111
    MINUSEQ         shift and go to state 105
    PLUSEQ          shift and go to state 121
    OREQ            shift and go to state 110
    ANDEQ           shift and go to state 114

  ! FIELD           [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! TRANSPOSE       [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! LBRACE          [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! LPAREN          [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! AND             [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! ANDAND          [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! BACKSLASH       [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! COLON           [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! DIV             [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! DOT             [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! DOTDIV          [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! DOTEXP          [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! DOTMUL          [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! DOTMULEQ        [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! EQEQ            [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! EXP             [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! GE              [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! GT              [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! LE              [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! LT              [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! MINUS           [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! MUL             [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! NE              [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! OR              [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! OROR            [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! PLUS            [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! EQ              [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! MULEQ           [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! DIVEQ           [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! MINUSEQ         [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! PLUSEQ          [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! OREQ            [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]
  ! ANDEQ           [ reduce using rule 146 (expr2 -> expr ANDEQ expr .) ]


state 179

    (130) expr2 -> expr GE expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    ANDAND          reduce using rule 130 (expr2 -> expr GE expr .)
    COLON           reduce using rule 130 (expr2 -> expr GE expr .)
    DOTMULEQ        reduce using rule 130 (expr2 -> expr GE expr .)
    EQEQ            reduce using rule 130 (expr2 -> expr GE expr .)
    GE              reduce using rule 130 (expr2 -> expr GE expr .)
    GT              reduce using rule 130 (expr2 -> expr GE expr .)
    LE              reduce using rule 130 (expr2 -> expr GE expr .)
    LT              reduce using rule 130 (expr2 -> expr GE expr .)
    NE              reduce using rule 130 (expr2 -> expr GE expr .)
    OROR            reduce using rule 130 (expr2 -> expr GE expr .)
    EQ              reduce using rule 130 (expr2 -> expr GE expr .)
    MULEQ           reduce using rule 130 (expr2 -> expr GE expr .)
    DIVEQ           reduce using rule 130 (expr2 -> expr GE expr .)
    MINUSEQ         reduce using rule 130 (expr2 -> expr GE expr .)
    PLUSEQ          reduce using rule 130 (expr2 -> expr GE expr .)
    OREQ            reduce using rule 130 (expr2 -> expr GE expr .)
    ANDEQ           reduce using rule 130 (expr2 -> expr GE expr .)
    COMMA           reduce using rule 130 (expr2 -> expr GE expr .)
    SEMI            reduce using rule 130 (expr2 -> expr GE expr .)
    RBRACKET        reduce using rule 130 (expr2 -> expr GE expr .)
    RBRACE          reduce using rule 130 (expr2 -> expr GE expr .)
    CASE            reduce using rule 130 (expr2 -> expr GE expr .)
    OTHERWISE       reduce using rule 130 (expr2 -> expr GE expr .)
    END_STMT        reduce using rule 130 (expr2 -> expr GE expr .)
    RPAREN          reduce using rule 130 (expr2 -> expr GE expr .)
    error           reduce using rule 130 (expr2 -> expr GE expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    AND             shift and go to state 119
    BACKSLASH       shift and go to state 103
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    EXP             shift and go to state 94
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    OR              shift and go to state 122
    PLUS            shift and go to state 109

  ! FIELD           [ reduce using rule 130 (expr2 -> expr GE expr .) ]
  ! TRANSPOSE       [ reduce using rule 130 (expr2 -> expr GE expr .) ]
  ! LBRACE          [ reduce using rule 130 (expr2 -> expr GE expr .) ]
  ! LPAREN          [ reduce using rule 130 (expr2 -> expr GE expr .) ]
  ! AND             [ reduce using rule 130 (expr2 -> expr GE expr .) ]
  ! BACKSLASH       [ reduce using rule 130 (expr2 -> expr GE expr .) ]
  ! DIV             [ reduce using rule 130 (expr2 -> expr GE expr .) ]
  ! DOT             [ reduce using rule 130 (expr2 -> expr GE expr .) ]
  ! DOTDIV          [ reduce using rule 130 (expr2 -> expr GE expr .) ]
  ! DOTEXP          [ reduce using rule 130 (expr2 -> expr GE expr .) ]
  ! DOTMUL          [ reduce using rule 130 (expr2 -> expr GE expr .) ]
  ! EXP             [ reduce using rule 130 (expr2 -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 130 (expr2 -> expr GE expr .) ]
  ! MUL             [ reduce using rule 130 (expr2 -> expr GE expr .) ]
  ! OR              [ reduce using rule 130 (expr2 -> expr GE expr .) ]
  ! PLUS            [ reduce using rule 130 (expr2 -> expr GE expr .) ]
  ! ANDAND          [ shift and go to state 112 ]
  ! COLON           [ shift and go to state 107 ]
  ! DOTMULEQ        [ shift and go to state 104 ]
  ! EQEQ            [ shift and go to state 92 ]
  ! GE              [ shift and go to state 116 ]
  ! GT              [ shift and go to state 113 ]
  ! LE              [ shift and go to state 100 ]
  ! LT              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 93 ]
  ! OROR            [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 101 ]
  ! MULEQ           [ shift and go to state 108 ]
  ! DIVEQ           [ shift and go to state 111 ]
  ! MINUSEQ         [ shift and go to state 105 ]
  ! PLUSEQ          [ shift and go to state 121 ]
  ! OREQ            [ shift and go to state 110 ]
  ! ANDEQ           [ shift and go to state 114 ]


state 180

    (117) expr -> expr LPAREN RPAREN .

    FIELD           reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    TRANSPOSE       reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    LBRACE          reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    LPAREN          reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    AND             reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    ANDAND          reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    BACKSLASH       reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    COLON           reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    DIV             reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    DOT             reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    DOTDIV          reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    DOTEXP          reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    DOTMUL          reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    DOTMULEQ        reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    EQEQ            reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    EXP             reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    GE              reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    GT              reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    LE              reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    LT              reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    MINUS           reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    MUL             reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    NE              reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    OR              reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    OROR            reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    PLUS            reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    EQ              reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    MULEQ           reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    DIVEQ           reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    MINUSEQ         reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    PLUSEQ          reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    OREQ            reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    ANDEQ           reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    COMMA           reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    SEMI            reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    RBRACKET        reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    RBRACE          reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    CASE            reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    OTHERWISE       reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    END_STMT        reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    RPAREN          reduce using rule 117 (expr -> expr LPAREN RPAREN .)
    error           reduce using rule 117 (expr -> expr LPAREN RPAREN .)


state 181

    (116) expr -> expr LPAREN expr_list . RPAREN

    RPAREN          shift and go to state 220


state 182

    (125) expr2 -> expr DOTEXP expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    TRANSPOSE       reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    AND             reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    ANDAND          reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    BACKSLASH       reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    COLON           reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    DIV             reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    DOTDIV          reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    DOTMUL          reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    DOTMULEQ        reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    EQEQ            reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    GE              reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    GT              reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    LE              reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    LT              reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    MINUS           reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    MUL             reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    NE              reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    OR              reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    OROR            reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    PLUS            reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    EQ              reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    MULEQ           reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    DIVEQ           reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    MINUSEQ         reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    PLUSEQ          reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    OREQ            reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    ANDEQ           reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    COMMA           reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    SEMI            reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    RBRACKET        reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    RBRACE          reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    CASE            reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    OTHERWISE       reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    END_STMT        reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    RPAREN          reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    error           reduce using rule 125 (expr2 -> expr DOTEXP expr .)
    FIELD           shift and go to state 115
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    DOT             shift and go to state 99
    DOTEXP          shift and go to state 118
    EXP             shift and go to state 94

  ! FIELD           [ reduce using rule 125 (expr2 -> expr DOTEXP expr .) ]
  ! LBRACE          [ reduce using rule 125 (expr2 -> expr DOTEXP expr .) ]
  ! LPAREN          [ reduce using rule 125 (expr2 -> expr DOTEXP expr .) ]
  ! DOT             [ reduce using rule 125 (expr2 -> expr DOTEXP expr .) ]
  ! DOTEXP          [ reduce using rule 125 (expr2 -> expr DOTEXP expr .) ]
  ! EXP             [ reduce using rule 125 (expr2 -> expr DOTEXP expr .) ]
  ! TRANSPOSE       [ shift and go to state 102 ]
  ! AND             [ shift and go to state 119 ]
  ! ANDAND          [ shift and go to state 112 ]
  ! BACKSLASH       [ shift and go to state 103 ]
  ! COLON           [ shift and go to state 107 ]
  ! DIV             [ shift and go to state 96 ]
  ! DOTDIV          [ shift and go to state 90 ]
  ! DOTMUL          [ shift and go to state 97 ]
  ! DOTMULEQ        [ shift and go to state 104 ]
  ! EQEQ            [ shift and go to state 92 ]
  ! GE              [ shift and go to state 116 ]
  ! GT              [ shift and go to state 113 ]
  ! LE              [ shift and go to state 100 ]
  ! LT              [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 98 ]
  ! MUL             [ shift and go to state 95 ]
  ! NE              [ shift and go to state 93 ]
  ! OR              [ shift and go to state 122 ]
  ! OROR            [ shift and go to state 91 ]
  ! PLUS            [ shift and go to state 109 ]
  ! EQ              [ shift and go to state 101 ]
  ! MULEQ           [ shift and go to state 108 ]
  ! DIVEQ           [ shift and go to state 111 ]
  ! MINUSEQ         [ shift and go to state 105 ]
  ! PLUSEQ          [ shift and go to state 121 ]
  ! OREQ            [ shift and go to state 110 ]
  ! ANDEQ           [ shift and go to state 114 ]


state 183

    (118) expr2 -> expr AND expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    AND             reduce using rule 118 (expr2 -> expr AND expr .)
    ANDAND          reduce using rule 118 (expr2 -> expr AND expr .)
    COLON           reduce using rule 118 (expr2 -> expr AND expr .)
    DOTMULEQ        reduce using rule 118 (expr2 -> expr AND expr .)
    EQEQ            reduce using rule 118 (expr2 -> expr AND expr .)
    GE              reduce using rule 118 (expr2 -> expr AND expr .)
    GT              reduce using rule 118 (expr2 -> expr AND expr .)
    LE              reduce using rule 118 (expr2 -> expr AND expr .)
    LT              reduce using rule 118 (expr2 -> expr AND expr .)
    NE              reduce using rule 118 (expr2 -> expr AND expr .)
    OR              reduce using rule 118 (expr2 -> expr AND expr .)
    OROR            reduce using rule 118 (expr2 -> expr AND expr .)
    EQ              reduce using rule 118 (expr2 -> expr AND expr .)
    MULEQ           reduce using rule 118 (expr2 -> expr AND expr .)
    DIVEQ           reduce using rule 118 (expr2 -> expr AND expr .)
    MINUSEQ         reduce using rule 118 (expr2 -> expr AND expr .)
    PLUSEQ          reduce using rule 118 (expr2 -> expr AND expr .)
    OREQ            reduce using rule 118 (expr2 -> expr AND expr .)
    ANDEQ           reduce using rule 118 (expr2 -> expr AND expr .)
    COMMA           reduce using rule 118 (expr2 -> expr AND expr .)
    SEMI            reduce using rule 118 (expr2 -> expr AND expr .)
    RBRACKET        reduce using rule 118 (expr2 -> expr AND expr .)
    RBRACE          reduce using rule 118 (expr2 -> expr AND expr .)
    CASE            reduce using rule 118 (expr2 -> expr AND expr .)
    OTHERWISE       reduce using rule 118 (expr2 -> expr AND expr .)
    END_STMT        reduce using rule 118 (expr2 -> expr AND expr .)
    RPAREN          reduce using rule 118 (expr2 -> expr AND expr .)
    error           reduce using rule 118 (expr2 -> expr AND expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    BACKSLASH       shift and go to state 103
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    EXP             shift and go to state 94
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    PLUS            shift and go to state 109

  ! FIELD           [ reduce using rule 118 (expr2 -> expr AND expr .) ]
  ! TRANSPOSE       [ reduce using rule 118 (expr2 -> expr AND expr .) ]
  ! LBRACE          [ reduce using rule 118 (expr2 -> expr AND expr .) ]
  ! LPAREN          [ reduce using rule 118 (expr2 -> expr AND expr .) ]
  ! BACKSLASH       [ reduce using rule 118 (expr2 -> expr AND expr .) ]
  ! DIV             [ reduce using rule 118 (expr2 -> expr AND expr .) ]
  ! DOT             [ reduce using rule 118 (expr2 -> expr AND expr .) ]
  ! DOTDIV          [ reduce using rule 118 (expr2 -> expr AND expr .) ]
  ! DOTEXP          [ reduce using rule 118 (expr2 -> expr AND expr .) ]
  ! DOTMUL          [ reduce using rule 118 (expr2 -> expr AND expr .) ]
  ! EXP             [ reduce using rule 118 (expr2 -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 118 (expr2 -> expr AND expr .) ]
  ! MUL             [ reduce using rule 118 (expr2 -> expr AND expr .) ]
  ! PLUS            [ reduce using rule 118 (expr2 -> expr AND expr .) ]
  ! AND             [ shift and go to state 119 ]
  ! ANDAND          [ shift and go to state 112 ]
  ! COLON           [ shift and go to state 107 ]
  ! DOTMULEQ        [ shift and go to state 104 ]
  ! EQEQ            [ shift and go to state 92 ]
  ! GE              [ shift and go to state 116 ]
  ! GT              [ shift and go to state 113 ]
  ! LE              [ shift and go to state 100 ]
  ! LT              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 93 ]
  ! OR              [ shift and go to state 122 ]
  ! OROR            [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 101 ]
  ! MULEQ           [ shift and go to state 108 ]
  ! DIVEQ           [ shift and go to state 111 ]
  ! MINUSEQ         [ shift and go to state 105 ]
  ! PLUSEQ          [ shift and go to state 121 ]
  ! OREQ            [ shift and go to state 110 ]
  ! ANDEQ           [ shift and go to state 114 ]


state 184

    (114) expr -> expr LBRACE expr_list . RBRACE

    RBRACE          shift and go to state 221


state 185

    (115) expr -> expr LBRACE RBRACE .

    FIELD           reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    TRANSPOSE       reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    LBRACE          reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    LPAREN          reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    AND             reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    ANDAND          reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    BACKSLASH       reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    COLON           reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    DIV             reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    DOT             reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    DOTDIV          reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    DOTEXP          reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    DOTMUL          reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    DOTMULEQ        reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    EQEQ            reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    EXP             reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    GE              reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    GT              reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    LE              reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    LT              reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    MINUS           reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    MUL             reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    NE              reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    OR              reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    OROR            reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    PLUS            reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    EQ              reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    MULEQ           reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    DIVEQ           reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    MINUSEQ         reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    PLUSEQ          reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    OREQ            reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    ANDEQ           reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    COMMA           reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    SEMI            reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    RBRACKET        reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    RBRACE          reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    CASE            reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    OTHERWISE       reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    END_STMT        reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    RPAREN          reduce using rule 115 (expr -> expr LBRACE RBRACE .)
    error           reduce using rule 115 (expr -> expr LBRACE RBRACE .)


state 186

    (144) expr2 -> expr PLUSEQ expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    COMMA           reduce using rule 144 (expr2 -> expr PLUSEQ expr .)
    SEMI            reduce using rule 144 (expr2 -> expr PLUSEQ expr .)
    RBRACKET        reduce using rule 144 (expr2 -> expr PLUSEQ expr .)
    RBRACE          reduce using rule 144 (expr2 -> expr PLUSEQ expr .)
    CASE            reduce using rule 144 (expr2 -> expr PLUSEQ expr .)
    OTHERWISE       reduce using rule 144 (expr2 -> expr PLUSEQ expr .)
    END_STMT        reduce using rule 144 (expr2 -> expr PLUSEQ expr .)
    RPAREN          reduce using rule 144 (expr2 -> expr PLUSEQ expr .)
    error           reduce using rule 144 (expr2 -> expr PLUSEQ expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    AND             shift and go to state 119
    ANDAND          shift and go to state 112
    BACKSLASH       shift and go to state 103
    COLON           shift and go to state 107
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    DOTMULEQ        shift and go to state 104
    EQEQ            shift and go to state 92
    EXP             shift and go to state 94
    GE              shift and go to state 116
    GT              shift and go to state 113
    LE              shift and go to state 100
    LT              shift and go to state 106
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    NE              shift and go to state 93
    OR              shift and go to state 122
    OROR            shift and go to state 91
    PLUS            shift and go to state 109
    EQ              shift and go to state 101
    MULEQ           shift and go to state 108
    DIVEQ           shift and go to state 111
    MINUSEQ         shift and go to state 105
    PLUSEQ          shift and go to state 121
    OREQ            shift and go to state 110
    ANDEQ           shift and go to state 114

  ! FIELD           [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! TRANSPOSE       [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! LBRACE          [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! LPAREN          [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! AND             [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! ANDAND          [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! BACKSLASH       [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! COLON           [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! DIV             [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! DOT             [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! DOTDIV          [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! DOTEXP          [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! DOTMUL          [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! DOTMULEQ        [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! EQEQ            [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! EXP             [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! GE              [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! GT              [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! LE              [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! LT              [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! MINUS           [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! MUL             [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! NE              [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! OR              [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! OROR            [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! PLUS            [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! EQ              [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! MULEQ           [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! DIVEQ           [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! MINUSEQ         [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! PLUSEQ          [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! OREQ            [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]
  ! ANDEQ           [ reduce using rule 144 (expr2 -> expr PLUSEQ expr .) ]


state 187

    (137) expr2 -> expr OR expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    AND             reduce using rule 137 (expr2 -> expr OR expr .)
    ANDAND          reduce using rule 137 (expr2 -> expr OR expr .)
    COLON           reduce using rule 137 (expr2 -> expr OR expr .)
    DOTMULEQ        reduce using rule 137 (expr2 -> expr OR expr .)
    EQEQ            reduce using rule 137 (expr2 -> expr OR expr .)
    GE              reduce using rule 137 (expr2 -> expr OR expr .)
    GT              reduce using rule 137 (expr2 -> expr OR expr .)
    LE              reduce using rule 137 (expr2 -> expr OR expr .)
    LT              reduce using rule 137 (expr2 -> expr OR expr .)
    NE              reduce using rule 137 (expr2 -> expr OR expr .)
    OR              reduce using rule 137 (expr2 -> expr OR expr .)
    OROR            reduce using rule 137 (expr2 -> expr OR expr .)
    EQ              reduce using rule 137 (expr2 -> expr OR expr .)
    MULEQ           reduce using rule 137 (expr2 -> expr OR expr .)
    DIVEQ           reduce using rule 137 (expr2 -> expr OR expr .)
    MINUSEQ         reduce using rule 137 (expr2 -> expr OR expr .)
    PLUSEQ          reduce using rule 137 (expr2 -> expr OR expr .)
    OREQ            reduce using rule 137 (expr2 -> expr OR expr .)
    ANDEQ           reduce using rule 137 (expr2 -> expr OR expr .)
    COMMA           reduce using rule 137 (expr2 -> expr OR expr .)
    SEMI            reduce using rule 137 (expr2 -> expr OR expr .)
    RBRACKET        reduce using rule 137 (expr2 -> expr OR expr .)
    RBRACE          reduce using rule 137 (expr2 -> expr OR expr .)
    CASE            reduce using rule 137 (expr2 -> expr OR expr .)
    OTHERWISE       reduce using rule 137 (expr2 -> expr OR expr .)
    END_STMT        reduce using rule 137 (expr2 -> expr OR expr .)
    RPAREN          reduce using rule 137 (expr2 -> expr OR expr .)
    error           reduce using rule 137 (expr2 -> expr OR expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    BACKSLASH       shift and go to state 103
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    EXP             shift and go to state 94
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    PLUS            shift and go to state 109

  ! FIELD           [ reduce using rule 137 (expr2 -> expr OR expr .) ]
  ! TRANSPOSE       [ reduce using rule 137 (expr2 -> expr OR expr .) ]
  ! LBRACE          [ reduce using rule 137 (expr2 -> expr OR expr .) ]
  ! LPAREN          [ reduce using rule 137 (expr2 -> expr OR expr .) ]
  ! BACKSLASH       [ reduce using rule 137 (expr2 -> expr OR expr .) ]
  ! DIV             [ reduce using rule 137 (expr2 -> expr OR expr .) ]
  ! DOT             [ reduce using rule 137 (expr2 -> expr OR expr .) ]
  ! DOTDIV          [ reduce using rule 137 (expr2 -> expr OR expr .) ]
  ! DOTEXP          [ reduce using rule 137 (expr2 -> expr OR expr .) ]
  ! DOTMUL          [ reduce using rule 137 (expr2 -> expr OR expr .) ]
  ! EXP             [ reduce using rule 137 (expr2 -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 137 (expr2 -> expr OR expr .) ]
  ! MUL             [ reduce using rule 137 (expr2 -> expr OR expr .) ]
  ! PLUS            [ reduce using rule 137 (expr2 -> expr OR expr .) ]
  ! AND             [ shift and go to state 119 ]
  ! ANDAND          [ shift and go to state 112 ]
  ! COLON           [ shift and go to state 107 ]
  ! DOTMULEQ        [ shift and go to state 104 ]
  ! EQEQ            [ shift and go to state 92 ]
  ! GE              [ shift and go to state 116 ]
  ! GT              [ shift and go to state 113 ]
  ! LE              [ shift and go to state 100 ]
  ! LT              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 93 ]
  ! OR              [ shift and go to state 122 ]
  ! OROR            [ shift and go to state 91 ]
  ! EQ              [ shift and go to state 101 ]
  ! MULEQ           [ shift and go to state 108 ]
  ! DIVEQ           [ shift and go to state 111 ]
  ! MINUSEQ         [ shift and go to state 105 ]
  ! PLUSEQ          [ shift and go to state 121 ]
  ! OREQ            [ shift and go to state 110 ]
  ! ANDEQ           [ shift and go to state 114 ]


state 188

    (33) persistent_stmt -> PERSISTENT expr SEMI .

    END_STMT        reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    CONTINUE        reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    BREAK           reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    GLOBAL          reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    PERSISTENT      reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    FOR             reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    IF              reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    SEMI            reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    COMMA           reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    RETURN          reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    SWITCH          reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    TRY             reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    WHILE           reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    UNWIND_PROTECT  reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    IDENT           reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    NEG             reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    LPAREN          reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    END_EXPR        reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    NUMBER          reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    STRING          reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    COLON           reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    LBRACKET        reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    LBRACE          reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    MINUS           reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    PLUS            reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    HANDLE          reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    PLUSPLUS        reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    MINUSMINUS      reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    CASE            reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    OTHERWISE       reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    ELSE            reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    ELSEIF          reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    FUNCTION        reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    $end            reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    CATCH           reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    UNWIND_PROTECT_CLEANUP reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)
    END_UNWIND_PROTECT reduce using rule 33 (persistent_stmt -> PERSISTENT expr SEMI .)


state 189

    (92) lambda_expr -> HANDLE lambda_args expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    DOTMULEQ        reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .)
    EQ              reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .)
    MULEQ           reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .)
    DIVEQ           reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .)
    MINUSEQ         reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .)
    PLUSEQ          reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .)
    OREQ            reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .)
    ANDEQ           reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .)
    COMMA           reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .)
    SEMI            reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .)
    RBRACKET        reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .)
    RBRACE          reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .)
    CASE            reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .)
    OTHERWISE       reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .)
    END_STMT        reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .)
    RPAREN          reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .)
    error           reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    AND             shift and go to state 119
    ANDAND          shift and go to state 112
    BACKSLASH       shift and go to state 103
    COLON           shift and go to state 107
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    EQEQ            shift and go to state 92
    EXP             shift and go to state 94
    GE              shift and go to state 116
    GT              shift and go to state 113
    LE              shift and go to state 100
    LT              shift and go to state 106
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    NE              shift and go to state 93
    OR              shift and go to state 122
    OROR            shift and go to state 91
    PLUS            shift and go to state 109

  ! FIELD           [ reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! TRANSPOSE       [ reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! LBRACE          [ reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! LPAREN          [ reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! AND             [ reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! ANDAND          [ reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! BACKSLASH       [ reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! COLON           [ reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! DIV             [ reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! DOT             [ reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! DOTDIV          [ reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! DOTEXP          [ reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! DOTMUL          [ reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! EQEQ            [ reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! EXP             [ reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! GE              [ reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! GT              [ reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! LE              [ reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! LT              [ reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! MINUS           [ reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! MUL             [ reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! NE              [ reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! OR              [ reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! OROR            [ reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! PLUS            [ reduce using rule 92 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! DOTMULEQ        [ shift and go to state 104 ]
  ! EQ              [ shift and go to state 101 ]
  ! MULEQ           [ shift and go to state 108 ]
  ! DIVEQ           [ shift and go to state 111 ]
  ! MINUSEQ         [ shift and go to state 105 ]
  ! PLUSEQ          [ shift and go to state 121 ]
  ! OREQ            [ shift and go to state 110 ]
  ! ANDEQ           [ shift and go to state 114 ]


state 190

    (90) lambda_args -> LPAREN RPAREN .

    NEG             reduce using rule 90 (lambda_args -> LPAREN RPAREN .)
    LPAREN          reduce using rule 90 (lambda_args -> LPAREN RPAREN .)
    IDENT           reduce using rule 90 (lambda_args -> LPAREN RPAREN .)
    END_EXPR        reduce using rule 90 (lambda_args -> LPAREN RPAREN .)
    NUMBER          reduce using rule 90 (lambda_args -> LPAREN RPAREN .)
    STRING          reduce using rule 90 (lambda_args -> LPAREN RPAREN .)
    COLON           reduce using rule 90 (lambda_args -> LPAREN RPAREN .)
    LBRACKET        reduce using rule 90 (lambda_args -> LPAREN RPAREN .)
    LBRACE          reduce using rule 90 (lambda_args -> LPAREN RPAREN .)
    MINUS           reduce using rule 90 (lambda_args -> LPAREN RPAREN .)
    PLUS            reduce using rule 90 (lambda_args -> LPAREN RPAREN .)
    HANDLE          reduce using rule 90 (lambda_args -> LPAREN RPAREN .)
    PLUSPLUS        reduce using rule 90 (lambda_args -> LPAREN RPAREN .)
    MINUSMINUS      reduce using rule 90 (lambda_args -> LPAREN RPAREN .)


state 191

    (50) arg_list -> ident .

    RPAREN          reduce using rule 50 (arg_list -> ident .)
    COMMA           reduce using rule 50 (arg_list -> ident .)


state 192

    (91) lambda_args -> LPAREN arg_list . RPAREN
    (51) arg_list -> arg_list . COMMA ident

    RPAREN          shift and go to state 223
    COMMA           shift and go to state 222


state 193

    (111) expr -> LPAREN expr RPAREN .

    FIELD           reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    TRANSPOSE       reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    LBRACE          reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    ANDAND          reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    BACKSLASH       reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    DIV             reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    DOT             reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    DOTDIV          reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    DOTEXP          reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    DOTMUL          reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    DOTMULEQ        reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    EQEQ            reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    EXP             reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    MUL             reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    OROR            reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    EQ              reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    MULEQ           reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    DIVEQ           reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    MINUSEQ         reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    PLUSEQ          reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    OREQ            reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    ANDEQ           reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    SEMI            reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    RBRACE          reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    CASE            reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    OTHERWISE       reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    END_STMT        reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 111 (expr -> LPAREN expr RPAREN .)
    error           reduce using rule 111 (expr -> LPAREN expr RPAREN .)


state 194

    (69) if_stmt -> IF expr sep . stmt_list_opt elseif_stmt END_STMT
    (55) stmt_list_opt -> .
    (56) stmt_list_opt -> . stmt_list
    (57) stmt_list -> . stmt
    (58) stmt_list -> . stmt_list stmt
    (8) stmt -> . continue_stmt
    (9) stmt -> . break_stmt
    (10) stmt -> . expr_stmt
    (11) stmt -> . global_stmt
    (12) stmt -> . persistent_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (21) stmt -> . unwind
    (35) continue_stmt -> . CONTINUE SEMI
    (36) break_stmt -> . BREAK SEMI
    (65) expr_stmt -> . expr_list SEMI
    (32) global_stmt -> . GLOBAL global_list SEMI
    (33) persistent_stmt -> . PERSISTENT expr SEMI
    (29) command -> . ident args SEMI
    (74) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (75) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (76) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (69) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (70) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (43) null_stmt -> . SEMI
    (44) null_stmt -> . COMMA
    (34) return_stmt -> . RETURN SEMI
    (37) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (41) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (42) try_catch -> . TRY stmt_list END_STMT
    (66) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (22) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (93) ident -> . IDENT
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    ELSE            reduce using rule 55 (stmt_list_opt -> .)
    ELSEIF          reduce using rule 55 (stmt_list_opt -> .)
    END_STMT        reduce using rule 55 (stmt_list_opt -> .)
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 38
    GLOBAL          shift and go to state 25
    PERSISTENT      shift and go to state 36
    FOR             shift and go to state 16
    IF              shift and go to state 51
    SEMI            shift and go to state 44
    COMMA           shift and go to state 46
    RETURN          shift and go to state 11
    SWITCH          shift and go to state 33
    TRY             shift and go to state 19
    WHILE           shift and go to state 27
    UNWIND_PROTECT  shift and go to state 6
    IDENT           shift and go to state 15
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    unwind                         shift and go to state 10
    expr_list                      shift and go to state 12
    number                         shift and go to state 26
    stmt_list_opt                  shift and go to state 224
    return_stmt                    shift and go to state 28
    switch_stmt                    shift and go to state 29
    break_stmt                     shift and go to state 42
    lambda_expr                    shift and go to state 30
    end                            shift and go to state 43
    matrix                         shift and go to state 13
    continue_stmt                  shift and go to state 31
    cellarray                      shift and go to state 21
    expr2                          shift and go to state 3
    expr1                          shift and go to state 45
    global_stmt                    shift and go to state 47
    string                         shift and go to state 41
    colon                          shift and go to state 9
    persistent_stmt                shift and go to state 5
    stmt                           shift and go to state 18
    for_stmt                       shift and go to state 53
    expr_stmt                      shift and go to state 7
    stmt_list                      shift and go to state 225
    ident                          shift and go to state 34
    if_stmt                        shift and go to state 8
    expr                           shift and go to state 35
    try_catch                      shift and go to state 37
    exprs                          shift and go to state 54
    while_stmt                     shift and go to state 55
    command                        shift and go to state 56
    null_stmt                      shift and go to state 57

state 195

    (68) sep -> SEMI .

    CONTINUE        reduce using rule 68 (sep -> SEMI .)
    BREAK           reduce using rule 68 (sep -> SEMI .)
    GLOBAL          reduce using rule 68 (sep -> SEMI .)
    PERSISTENT      reduce using rule 68 (sep -> SEMI .)
    FOR             reduce using rule 68 (sep -> SEMI .)
    IF              reduce using rule 68 (sep -> SEMI .)
    SEMI            reduce using rule 68 (sep -> SEMI .)
    COMMA           reduce using rule 68 (sep -> SEMI .)
    RETURN          reduce using rule 68 (sep -> SEMI .)
    SWITCH          reduce using rule 68 (sep -> SEMI .)
    TRY             reduce using rule 68 (sep -> SEMI .)
    WHILE           reduce using rule 68 (sep -> SEMI .)
    UNWIND_PROTECT  reduce using rule 68 (sep -> SEMI .)
    IDENT           reduce using rule 68 (sep -> SEMI .)
    NEG             reduce using rule 68 (sep -> SEMI .)
    LPAREN          reduce using rule 68 (sep -> SEMI .)
    END_EXPR        reduce using rule 68 (sep -> SEMI .)
    NUMBER          reduce using rule 68 (sep -> SEMI .)
    STRING          reduce using rule 68 (sep -> SEMI .)
    COLON           reduce using rule 68 (sep -> SEMI .)
    LBRACKET        reduce using rule 68 (sep -> SEMI .)
    LBRACE          reduce using rule 68 (sep -> SEMI .)
    MINUS           reduce using rule 68 (sep -> SEMI .)
    PLUS            reduce using rule 68 (sep -> SEMI .)
    HANDLE          reduce using rule 68 (sep -> SEMI .)
    PLUSPLUS        reduce using rule 68 (sep -> SEMI .)
    MINUSMINUS      reduce using rule 68 (sep -> SEMI .)
    ELSE            reduce using rule 68 (sep -> SEMI .)
    ELSEIF          reduce using rule 68 (sep -> SEMI .)
    END_STMT        reduce using rule 68 (sep -> SEMI .)
    CASE            reduce using rule 68 (sep -> SEMI .)
    OTHERWISE       reduce using rule 68 (sep -> SEMI .)


state 196

    (70) if_stmt -> IF expr error . stmt_list_opt elseif_stmt END_STMT
    (55) stmt_list_opt -> .
    (56) stmt_list_opt -> . stmt_list
    (57) stmt_list -> . stmt
    (58) stmt_list -> . stmt_list stmt
    (8) stmt -> . continue_stmt
    (9) stmt -> . break_stmt
    (10) stmt -> . expr_stmt
    (11) stmt -> . global_stmt
    (12) stmt -> . persistent_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (21) stmt -> . unwind
    (35) continue_stmt -> . CONTINUE SEMI
    (36) break_stmt -> . BREAK SEMI
    (65) expr_stmt -> . expr_list SEMI
    (32) global_stmt -> . GLOBAL global_list SEMI
    (33) persistent_stmt -> . PERSISTENT expr SEMI
    (29) command -> . ident args SEMI
    (74) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (75) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (76) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (69) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (70) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (43) null_stmt -> . SEMI
    (44) null_stmt -> . COMMA
    (34) return_stmt -> . RETURN SEMI
    (37) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (41) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (42) try_catch -> . TRY stmt_list END_STMT
    (66) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (22) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (93) ident -> . IDENT
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    ELSE            reduce using rule 55 (stmt_list_opt -> .)
    ELSEIF          reduce using rule 55 (stmt_list_opt -> .)
    END_STMT        reduce using rule 55 (stmt_list_opt -> .)
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 38
    GLOBAL          shift and go to state 25
    PERSISTENT      shift and go to state 36
    FOR             shift and go to state 16
    IF              shift and go to state 51
    SEMI            shift and go to state 44
    COMMA           shift and go to state 46
    RETURN          shift and go to state 11
    SWITCH          shift and go to state 33
    TRY             shift and go to state 19
    WHILE           shift and go to state 27
    UNWIND_PROTECT  shift and go to state 6
    IDENT           shift and go to state 15
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    unwind                         shift and go to state 10
    expr_list                      shift and go to state 12
    number                         shift and go to state 26
    stmt_list_opt                  shift and go to state 226
    return_stmt                    shift and go to state 28
    switch_stmt                    shift and go to state 29
    break_stmt                     shift and go to state 42
    lambda_expr                    shift and go to state 30
    end                            shift and go to state 43
    matrix                         shift and go to state 13
    continue_stmt                  shift and go to state 31
    cellarray                      shift and go to state 21
    expr2                          shift and go to state 3
    expr1                          shift and go to state 45
    global_stmt                    shift and go to state 47
    string                         shift and go to state 41
    colon                          shift and go to state 9
    persistent_stmt                shift and go to state 5
    stmt                           shift and go to state 18
    for_stmt                       shift and go to state 53
    expr_stmt                      shift and go to state 7
    stmt_list                      shift and go to state 225
    ident                          shift and go to state 34
    if_stmt                        shift and go to state 8
    expr                           shift and go to state 35
    try_catch                      shift and go to state 37
    exprs                          shift and go to state 54
    while_stmt                     shift and go to state 55
    command                        shift and go to state 56
    null_stmt                      shift and go to state 57

state 197

    (67) sep -> COMMA .

    CONTINUE        reduce using rule 67 (sep -> COMMA .)
    BREAK           reduce using rule 67 (sep -> COMMA .)
    GLOBAL          reduce using rule 67 (sep -> COMMA .)
    PERSISTENT      reduce using rule 67 (sep -> COMMA .)
    FOR             reduce using rule 67 (sep -> COMMA .)
    IF              reduce using rule 67 (sep -> COMMA .)
    SEMI            reduce using rule 67 (sep -> COMMA .)
    COMMA           reduce using rule 67 (sep -> COMMA .)
    RETURN          reduce using rule 67 (sep -> COMMA .)
    SWITCH          reduce using rule 67 (sep -> COMMA .)
    TRY             reduce using rule 67 (sep -> COMMA .)
    WHILE           reduce using rule 67 (sep -> COMMA .)
    UNWIND_PROTECT  reduce using rule 67 (sep -> COMMA .)
    IDENT           reduce using rule 67 (sep -> COMMA .)
    NEG             reduce using rule 67 (sep -> COMMA .)
    LPAREN          reduce using rule 67 (sep -> COMMA .)
    END_EXPR        reduce using rule 67 (sep -> COMMA .)
    NUMBER          reduce using rule 67 (sep -> COMMA .)
    STRING          reduce using rule 67 (sep -> COMMA .)
    COLON           reduce using rule 67 (sep -> COMMA .)
    LBRACKET        reduce using rule 67 (sep -> COMMA .)
    LBRACE          reduce using rule 67 (sep -> COMMA .)
    MINUS           reduce using rule 67 (sep -> COMMA .)
    PLUS            reduce using rule 67 (sep -> COMMA .)
    HANDLE          reduce using rule 67 (sep -> COMMA .)
    PLUSPLUS        reduce using rule 67 (sep -> COMMA .)
    MINUSMINUS      reduce using rule 67 (sep -> COMMA .)
    ELSE            reduce using rule 67 (sep -> COMMA .)
    ELSEIF          reduce using rule 67 (sep -> COMMA .)
    END_STMT        reduce using rule 67 (sep -> COMMA .)
    CASE            reduce using rule 67 (sep -> COMMA .)
    OTHERWISE       reduce using rule 67 (sep -> COMMA .)


state 198

    (64) exprs -> exprs COMMA expr .
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    COMMA           reduce using rule 64 (exprs -> exprs COMMA expr .)
    SEMI            reduce using rule 64 (exprs -> exprs COMMA expr .)
    RBRACKET        reduce using rule 64 (exprs -> exprs COMMA expr .)
    RBRACE          reduce using rule 64 (exprs -> exprs COMMA expr .)
    RPAREN          reduce using rule 64 (exprs -> exprs COMMA expr .)
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    AND             shift and go to state 119
    ANDAND          shift and go to state 112
    BACKSLASH       shift and go to state 103
    COLON           shift and go to state 107
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    DOTMULEQ        shift and go to state 104
    EQEQ            shift and go to state 92
    EXP             shift and go to state 94
    GE              shift and go to state 116
    GT              shift and go to state 113
    LE              shift and go to state 100
    LT              shift and go to state 106
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    NE              shift and go to state 93
    OR              shift and go to state 122
    OROR            shift and go to state 91
    PLUS            shift and go to state 109
    EQ              shift and go to state 101
    MULEQ           shift and go to state 108
    DIVEQ           shift and go to state 111
    MINUSEQ         shift and go to state 105
    PLUSEQ          shift and go to state 121
    OREQ            shift and go to state 110
    ANDEQ           shift and go to state 114


state 199

    (59) concat_list -> expr_list SEMI expr_list .

    RBRACKET        reduce using rule 59 (concat_list -> expr_list SEMI expr_list .)
    SEMI            reduce using rule 59 (concat_list -> expr_list SEMI expr_list .)


state 200

    (110) matrix -> LBRACKET expr_list SEMI RBRACKET .

    FIELD           reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    TRANSPOSE       reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    LBRACE          reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    LPAREN          reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    AND             reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    ANDAND          reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    BACKSLASH       reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    COLON           reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    DIV             reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    DOT             reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    DOTDIV          reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    DOTEXP          reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    DOTMUL          reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    DOTMULEQ        reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    EQEQ            reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    EXP             reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    GE              reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    GT              reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    LE              reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    LT              reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    MINUS           reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    MUL             reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    NE              reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    OR              reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    OROR            reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    PLUS            reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    EQ              reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    MULEQ           reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    DIVEQ           reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    MINUSEQ         reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    PLUSEQ          reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    OREQ            reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    ANDEQ           reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    COMMA           reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    SEMI            reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    RBRACKET        reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    RBRACE          reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    CASE            reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    OTHERWISE       reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    END_STMT        reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    RPAREN          reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    error           reduce using rule 110 (matrix -> LBRACKET expr_list SEMI RBRACKET .)


state 201

    (60) concat_list -> concat_list SEMI expr_list .

    RBRACKET        reduce using rule 60 (concat_list -> concat_list SEMI expr_list .)
    SEMI            reduce using rule 60 (concat_list -> concat_list SEMI expr_list .)


state 202

    (108) matrix -> LBRACKET concat_list SEMI RBRACKET .

    FIELD           reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    TRANSPOSE       reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    LBRACE          reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    LPAREN          reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    AND             reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    ANDAND          reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    BACKSLASH       reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    COLON           reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    DIV             reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    DOT             reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    DOTDIV          reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    DOTEXP          reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    DOTMUL          reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    DOTMULEQ        reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    EQEQ            reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    EXP             reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    GE              reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    GT              reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    LE              reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    LT              reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    MINUS           reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    MUL             reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    NE              reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    OR              reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    OROR            reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    PLUS            reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    EQ              reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    MULEQ           reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    DIVEQ           reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    MINUSEQ         reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    PLUSEQ          reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    OREQ            reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    ANDEQ           reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    COMMA           reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    SEMI            reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    RBRACKET        reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    RBRACE          reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    CASE            reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    OTHERWISE       reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    END_STMT        reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    RPAREN          reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    error           reduce using rule 108 (matrix -> LBRACKET concat_list SEMI RBRACKET .)


state 203

    (22) unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list . END_UNWIND_PROTECT
    (58) stmt_list -> stmt_list . stmt
    (8) stmt -> . continue_stmt
    (9) stmt -> . break_stmt
    (10) stmt -> . expr_stmt
    (11) stmt -> . global_stmt
    (12) stmt -> . persistent_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (21) stmt -> . unwind
    (35) continue_stmt -> . CONTINUE SEMI
    (36) break_stmt -> . BREAK SEMI
    (65) expr_stmt -> . expr_list SEMI
    (32) global_stmt -> . GLOBAL global_list SEMI
    (33) persistent_stmt -> . PERSISTENT expr SEMI
    (29) command -> . ident args SEMI
    (74) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (75) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (76) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (69) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (70) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (43) null_stmt -> . SEMI
    (44) null_stmt -> . COMMA
    (34) return_stmt -> . RETURN SEMI
    (37) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (41) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (42) try_catch -> . TRY stmt_list END_STMT
    (66) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (22) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (93) ident -> . IDENT
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    END_UNWIND_PROTECT shift and go to state 227
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 38
    GLOBAL          shift and go to state 25
    PERSISTENT      shift and go to state 36
    FOR             shift and go to state 16
    IF              shift and go to state 51
    SEMI            shift and go to state 44
    COMMA           shift and go to state 46
    RETURN          shift and go to state 11
    SWITCH          shift and go to state 33
    TRY             shift and go to state 19
    WHILE           shift and go to state 27
    UNWIND_PROTECT  shift and go to state 6
    IDENT           shift and go to state 15
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    unwind                         shift and go to state 10
    expr_list                      shift and go to state 12
    number                         shift and go to state 26
    return_stmt                    shift and go to state 28
    switch_stmt                    shift and go to state 29
    break_stmt                     shift and go to state 42
    lambda_expr                    shift and go to state 30
    end                            shift and go to state 43
    matrix                         shift and go to state 13
    continue_stmt                  shift and go to state 31
    cellarray                      shift and go to state 21
    expr2                          shift and go to state 3
    expr1                          shift and go to state 45
    global_stmt                    shift and go to state 47
    string                         shift and go to state 41
    colon                          shift and go to state 9
    persistent_stmt                shift and go to state 5
    stmt                           shift and go to state 131
    for_stmt                       shift and go to state 53
    expr_stmt                      shift and go to state 7
    ident                          shift and go to state 34
    if_stmt                        shift and go to state 8
    expr                           shift and go to state 35
    try_catch                      shift and go to state 37
    exprs                          shift and go to state 54
    while_stmt                     shift and go to state 55
    command                        shift and go to state 56
    null_stmt                      shift and go to state 57

state 204

    (74) for_stmt -> FOR ident EQ expr . SEMI stmt_list END_STMT
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    SEMI            shift and go to state 228
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    AND             shift and go to state 119
    ANDAND          shift and go to state 112
    BACKSLASH       shift and go to state 103
    COLON           shift and go to state 107
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    DOTMULEQ        shift and go to state 104
    EQEQ            shift and go to state 92
    EXP             shift and go to state 94
    GE              shift and go to state 116
    GT              shift and go to state 113
    LE              shift and go to state 100
    LT              shift and go to state 106
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    NE              shift and go to state 93
    OR              shift and go to state 122
    OROR            shift and go to state 91
    PLUS            shift and go to state 109
    EQ              shift and go to state 101
    MULEQ           shift and go to state 108
    DIVEQ           shift and go to state 111
    MINUSEQ         shift and go to state 105
    PLUSEQ          shift and go to state 121
    OREQ            shift and go to state 110
    ANDEQ           shift and go to state 114


state 205

    (75) for_stmt -> FOR LPAREN ident EQ . expr RPAREN SEMI stmt_list END_STMT
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 229
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 206

    (76) for_stmt -> FOR matrix EQ expr . SEMI stmt_list END_STMT
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    SEMI            shift and go to state 230
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    AND             shift and go to state 119
    ANDAND          shift and go to state 112
    BACKSLASH       shift and go to state 103
    COLON           shift and go to state 107
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    DOTMULEQ        shift and go to state 104
    EQEQ            shift and go to state 92
    EXP             shift and go to state 94
    GE              shift and go to state 116
    GT              shift and go to state 113
    LE              shift and go to state 100
    LT              shift and go to state 106
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    NE              shift and go to state 93
    OR              shift and go to state 122
    OROR            shift and go to state 91
    PLUS            shift and go to state 109
    EQ              shift and go to state 101
    MULEQ           shift and go to state 108
    DIVEQ           shift and go to state 111
    MINUSEQ         shift and go to state 105
    PLUSEQ          shift and go to state 121
    OREQ            shift and go to state 110
    ANDEQ           shift and go to state 114


state 207

    (41) try_catch -> TRY stmt_list CATCH stmt_list . END_STMT
    (58) stmt_list -> stmt_list . stmt
    (8) stmt -> . continue_stmt
    (9) stmt -> . break_stmt
    (10) stmt -> . expr_stmt
    (11) stmt -> . global_stmt
    (12) stmt -> . persistent_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (21) stmt -> . unwind
    (35) continue_stmt -> . CONTINUE SEMI
    (36) break_stmt -> . BREAK SEMI
    (65) expr_stmt -> . expr_list SEMI
    (32) global_stmt -> . GLOBAL global_list SEMI
    (33) persistent_stmt -> . PERSISTENT expr SEMI
    (29) command -> . ident args SEMI
    (74) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (75) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (76) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (69) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (70) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (43) null_stmt -> . SEMI
    (44) null_stmt -> . COMMA
    (34) return_stmt -> . RETURN SEMI
    (37) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (41) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (42) try_catch -> . TRY stmt_list END_STMT
    (66) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (22) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (93) ident -> . IDENT
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    END_STMT        shift and go to state 231
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 38
    GLOBAL          shift and go to state 25
    PERSISTENT      shift and go to state 36
    FOR             shift and go to state 16
    IF              shift and go to state 51
    SEMI            shift and go to state 44
    COMMA           shift and go to state 46
    RETURN          shift and go to state 11
    SWITCH          shift and go to state 33
    TRY             shift and go to state 19
    WHILE           shift and go to state 27
    UNWIND_PROTECT  shift and go to state 6
    IDENT           shift and go to state 15
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    unwind                         shift and go to state 10
    expr_list                      shift and go to state 12
    number                         shift and go to state 26
    return_stmt                    shift and go to state 28
    switch_stmt                    shift and go to state 29
    break_stmt                     shift and go to state 42
    lambda_expr                    shift and go to state 30
    end                            shift and go to state 43
    matrix                         shift and go to state 13
    continue_stmt                  shift and go to state 31
    cellarray                      shift and go to state 21
    expr2                          shift and go to state 3
    expr1                          shift and go to state 45
    global_stmt                    shift and go to state 47
    string                         shift and go to state 41
    colon                          shift and go to state 9
    persistent_stmt                shift and go to state 5
    stmt                           shift and go to state 131
    for_stmt                       shift and go to state 53
    expr_stmt                      shift and go to state 7
    ident                          shift and go to state 34
    if_stmt                        shift and go to state 8
    expr                           shift and go to state 35
    try_catch                      shift and go to state 37
    exprs                          shift and go to state 54
    while_stmt                     shift and go to state 55
    command                        shift and go to state 56
    null_stmt                      shift and go to state 57

state 208

    (66) while_stmt -> WHILE expr SEMI stmt_list . END_STMT
    (58) stmt_list -> stmt_list . stmt
    (8) stmt -> . continue_stmt
    (9) stmt -> . break_stmt
    (10) stmt -> . expr_stmt
    (11) stmt -> . global_stmt
    (12) stmt -> . persistent_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (21) stmt -> . unwind
    (35) continue_stmt -> . CONTINUE SEMI
    (36) break_stmt -> . BREAK SEMI
    (65) expr_stmt -> . expr_list SEMI
    (32) global_stmt -> . GLOBAL global_list SEMI
    (33) persistent_stmt -> . PERSISTENT expr SEMI
    (29) command -> . ident args SEMI
    (74) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (75) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (76) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (69) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (70) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (43) null_stmt -> . SEMI
    (44) null_stmt -> . COMMA
    (34) return_stmt -> . RETURN SEMI
    (37) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (41) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (42) try_catch -> . TRY stmt_list END_STMT
    (66) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (22) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (93) ident -> . IDENT
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    END_STMT        shift and go to state 232
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 38
    GLOBAL          shift and go to state 25
    PERSISTENT      shift and go to state 36
    FOR             shift and go to state 16
    IF              shift and go to state 51
    SEMI            shift and go to state 44
    COMMA           shift and go to state 46
    RETURN          shift and go to state 11
    SWITCH          shift and go to state 33
    TRY             shift and go to state 19
    WHILE           shift and go to state 27
    UNWIND_PROTECT  shift and go to state 6
    IDENT           shift and go to state 15
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    unwind                         shift and go to state 10
    expr_list                      shift and go to state 12
    number                         shift and go to state 26
    return_stmt                    shift and go to state 28
    switch_stmt                    shift and go to state 29
    break_stmt                     shift and go to state 42
    lambda_expr                    shift and go to state 30
    end                            shift and go to state 43
    matrix                         shift and go to state 13
    continue_stmt                  shift and go to state 31
    cellarray                      shift and go to state 21
    expr2                          shift and go to state 3
    expr1                          shift and go to state 45
    global_stmt                    shift and go to state 47
    string                         shift and go to state 41
    colon                          shift and go to state 9
    persistent_stmt                shift and go to state 5
    stmt                           shift and go to state 131
    for_stmt                       shift and go to state 53
    expr_stmt                      shift and go to state 7
    ident                          shift and go to state 34
    if_stmt                        shift and go to state 8
    expr                           shift and go to state 35
    try_catch                      shift and go to state 37
    exprs                          shift and go to state 54
    while_stmt                     shift and go to state 55
    command                        shift and go to state 56
    null_stmt                      shift and go to state 57

state 209

    (4) top -> top func_decl stmt_list END_STMT . semi_opt
    (5) semi_opt -> .
    (6) semi_opt -> . semi_opt SEMI
    (7) semi_opt -> . semi_opt COMMA

    SEMI            reduce using rule 5 (semi_opt -> .)
    COMMA           reduce using rule 5 (semi_opt -> .)
    FUNCTION        reduce using rule 5 (semi_opt -> .)
    $end            reduce using rule 5 (semi_opt -> .)

    semi_opt                       shift and go to state 233

state 210

    (45) func_decl -> FUNCTION ident args_opt . SEMI

    SEMI            shift and go to state 234


state 211

    (48) args_opt -> LPAREN . RPAREN
    (49) args_opt -> LPAREN . expr_list RPAREN
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    RPAREN          shift and go to state 236
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr_list                      shift and go to state 235
    number                         shift and go to state 26
    expr2                          shift and go to state 3
    exprs                          shift and go to state 54
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    expr                           shift and go to state 35
    matrix                         shift and go to state 13

state 212

    (46) func_decl -> FUNCTION ret EQ . ident args_opt SEMI
    (93) ident -> . IDENT

    IDENT           shift and go to state 15

    ident                          shift and go to state 237

state 213

    (54) ret -> LBRACKET expr_list . RBRACKET

    RBRACKET        shift and go to state 238


state 214

    (53) ret -> LBRACKET RBRACKET .

    EQ              reduce using rule 53 (ret -> LBRACKET RBRACKET .)


state 215

    (39) case_list -> CASE . expr sep stmt_list_opt case_list
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    expr2                          shift and go to state 3
    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 239
    number                         shift and go to state 26
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 216

    (6) semi_opt -> semi_opt SEMI .

    SEMI            reduce using rule 6 (semi_opt -> semi_opt SEMI .)
    COMMA           reduce using rule 6 (semi_opt -> semi_opt SEMI .)
    FUNCTION        reduce using rule 6 (semi_opt -> semi_opt SEMI .)
    $end            reduce using rule 6 (semi_opt -> semi_opt SEMI .)
    CASE            reduce using rule 6 (semi_opt -> semi_opt SEMI .)
    OTHERWISE       reduce using rule 6 (semi_opt -> semi_opt SEMI .)
    END_STMT        reduce using rule 6 (semi_opt -> semi_opt SEMI .)


state 217

    (37) switch_stmt -> SWITCH expr semi_opt case_list . END_STMT

    END_STMT        shift and go to state 240


state 218

    (7) semi_opt -> semi_opt COMMA .

    SEMI            reduce using rule 7 (semi_opt -> semi_opt COMMA .)
    COMMA           reduce using rule 7 (semi_opt -> semi_opt COMMA .)
    FUNCTION        reduce using rule 7 (semi_opt -> semi_opt COMMA .)
    $end            reduce using rule 7 (semi_opt -> semi_opt COMMA .)
    CASE            reduce using rule 7 (semi_opt -> semi_opt COMMA .)
    OTHERWISE       reduce using rule 7 (semi_opt -> semi_opt COMMA .)
    END_STMT        reduce using rule 7 (semi_opt -> semi_opt COMMA .)


state 219

    (40) case_list -> OTHERWISE . stmt_list
    (57) stmt_list -> . stmt
    (58) stmt_list -> . stmt_list stmt
    (8) stmt -> . continue_stmt
    (9) stmt -> . break_stmt
    (10) stmt -> . expr_stmt
    (11) stmt -> . global_stmt
    (12) stmt -> . persistent_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (21) stmt -> . unwind
    (35) continue_stmt -> . CONTINUE SEMI
    (36) break_stmt -> . BREAK SEMI
    (65) expr_stmt -> . expr_list SEMI
    (32) global_stmt -> . GLOBAL global_list SEMI
    (33) persistent_stmt -> . PERSISTENT expr SEMI
    (29) command -> . ident args SEMI
    (74) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (75) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (76) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (69) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (70) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (43) null_stmt -> . SEMI
    (44) null_stmt -> . COMMA
    (34) return_stmt -> . RETURN SEMI
    (37) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (41) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (42) try_catch -> . TRY stmt_list END_STMT
    (66) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (22) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (93) ident -> . IDENT
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 38
    GLOBAL          shift and go to state 25
    PERSISTENT      shift and go to state 36
    FOR             shift and go to state 16
    IF              shift and go to state 51
    SEMI            shift and go to state 44
    COMMA           shift and go to state 46
    RETURN          shift and go to state 11
    SWITCH          shift and go to state 33
    TRY             shift and go to state 19
    WHILE           shift and go to state 27
    UNWIND_PROTECT  shift and go to state 6
    IDENT           shift and go to state 15
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    unwind                         shift and go to state 10
    expr_list                      shift and go to state 12
    number                         shift and go to state 26
    return_stmt                    shift and go to state 28
    switch_stmt                    shift and go to state 29
    break_stmt                     shift and go to state 42
    lambda_expr                    shift and go to state 30
    end                            shift and go to state 43
    matrix                         shift and go to state 13
    continue_stmt                  shift and go to state 31
    cellarray                      shift and go to state 21
    expr2                          shift and go to state 3
    expr1                          shift and go to state 45
    global_stmt                    shift and go to state 47
    string                         shift and go to state 41
    colon                          shift and go to state 9
    persistent_stmt                shift and go to state 5
    stmt                           shift and go to state 18
    for_stmt                       shift and go to state 53
    expr_stmt                      shift and go to state 7
    stmt_list                      shift and go to state 241
    ident                          shift and go to state 34
    if_stmt                        shift and go to state 8
    expr                           shift and go to state 35
    try_catch                      shift and go to state 37
    exprs                          shift and go to state 54
    while_stmt                     shift and go to state 55
    command                        shift and go to state 56
    null_stmt                      shift and go to state 57

state 220

    (116) expr -> expr LPAREN expr_list RPAREN .

    FIELD           reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    TRANSPOSE       reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    LBRACE          reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    LPAREN          reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    AND             reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    ANDAND          reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    BACKSLASH       reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    COLON           reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    DIV             reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    DOT             reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    DOTDIV          reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    DOTEXP          reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    DOTMUL          reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    DOTMULEQ        reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    EQEQ            reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    EXP             reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    GE              reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    GT              reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    LE              reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    LT              reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    MINUS           reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    MUL             reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    NE              reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    OR              reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    OROR            reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    PLUS            reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    EQ              reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    MULEQ           reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    DIVEQ           reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    MINUSEQ         reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    PLUSEQ          reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    OREQ            reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    ANDEQ           reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    COMMA           reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    SEMI            reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    RBRACKET        reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    RBRACE          reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    CASE            reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    OTHERWISE       reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    END_STMT        reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    RPAREN          reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)
    error           reduce using rule 116 (expr -> expr LPAREN expr_list RPAREN .)


state 221

    (114) expr -> expr LBRACE expr_list RBRACE .

    FIELD           reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    TRANSPOSE       reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    LBRACE          reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    LPAREN          reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    AND             reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    ANDAND          reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    BACKSLASH       reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    COLON           reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    DIV             reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    DOT             reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    DOTDIV          reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    DOTEXP          reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    DOTMUL          reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    DOTMULEQ        reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    EQEQ            reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    EXP             reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    GE              reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    GT              reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    LE              reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    LT              reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    MINUS           reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    MUL             reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    NE              reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    OR              reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    OROR            reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    PLUS            reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    EQ              reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    MULEQ           reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    DIVEQ           reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    MINUSEQ         reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    PLUSEQ          reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    OREQ            reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    ANDEQ           reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    COMMA           reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    SEMI            reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    RBRACKET        reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    RBRACE          reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    CASE            reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    OTHERWISE       reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    END_STMT        reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    RPAREN          reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)
    error           reduce using rule 114 (expr -> expr LBRACE expr_list RBRACE .)


state 222

    (51) arg_list -> arg_list COMMA . ident
    (93) ident -> . IDENT

    IDENT           shift and go to state 15

    ident                          shift and go to state 242

state 223

    (91) lambda_args -> LPAREN arg_list RPAREN .

    NEG             reduce using rule 91 (lambda_args -> LPAREN arg_list RPAREN .)
    LPAREN          reduce using rule 91 (lambda_args -> LPAREN arg_list RPAREN .)
    IDENT           reduce using rule 91 (lambda_args -> LPAREN arg_list RPAREN .)
    END_EXPR        reduce using rule 91 (lambda_args -> LPAREN arg_list RPAREN .)
    NUMBER          reduce using rule 91 (lambda_args -> LPAREN arg_list RPAREN .)
    STRING          reduce using rule 91 (lambda_args -> LPAREN arg_list RPAREN .)
    COLON           reduce using rule 91 (lambda_args -> LPAREN arg_list RPAREN .)
    LBRACKET        reduce using rule 91 (lambda_args -> LPAREN arg_list RPAREN .)
    LBRACE          reduce using rule 91 (lambda_args -> LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 91 (lambda_args -> LPAREN arg_list RPAREN .)
    PLUS            reduce using rule 91 (lambda_args -> LPAREN arg_list RPAREN .)
    HANDLE          reduce using rule 91 (lambda_args -> LPAREN arg_list RPAREN .)
    PLUSPLUS        reduce using rule 91 (lambda_args -> LPAREN arg_list RPAREN .)
    MINUSMINUS      reduce using rule 91 (lambda_args -> LPAREN arg_list RPAREN .)


state 224

    (69) if_stmt -> IF expr sep stmt_list_opt . elseif_stmt END_STMT
    (71) elseif_stmt -> .
    (72) elseif_stmt -> . ELSE stmt_list_opt
    (73) elseif_stmt -> . ELSEIF expr sep stmt_list_opt elseif_stmt

    END_STMT        reduce using rule 71 (elseif_stmt -> .)
    ELSE            shift and go to state 243
    ELSEIF          shift and go to state 244

    elseif_stmt                    shift and go to state 245

state 225

    (56) stmt_list_opt -> stmt_list .
    (58) stmt_list -> stmt_list . stmt
    (8) stmt -> . continue_stmt
    (9) stmt -> . break_stmt
    (10) stmt -> . expr_stmt
    (11) stmt -> . global_stmt
    (12) stmt -> . persistent_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (21) stmt -> . unwind
    (35) continue_stmt -> . CONTINUE SEMI
    (36) break_stmt -> . BREAK SEMI
    (65) expr_stmt -> . expr_list SEMI
    (32) global_stmt -> . GLOBAL global_list SEMI
    (33) persistent_stmt -> . PERSISTENT expr SEMI
    (29) command -> . ident args SEMI
    (74) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (75) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (76) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (69) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (70) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (43) null_stmt -> . SEMI
    (44) null_stmt -> . COMMA
    (34) return_stmt -> . RETURN SEMI
    (37) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (41) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (42) try_catch -> . TRY stmt_list END_STMT
    (66) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (22) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (93) ident -> . IDENT
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    ELSE            reduce using rule 56 (stmt_list_opt -> stmt_list .)
    ELSEIF          reduce using rule 56 (stmt_list_opt -> stmt_list .)
    END_STMT        reduce using rule 56 (stmt_list_opt -> stmt_list .)
    CASE            reduce using rule 56 (stmt_list_opt -> stmt_list .)
    OTHERWISE       reduce using rule 56 (stmt_list_opt -> stmt_list .)
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 38
    GLOBAL          shift and go to state 25
    PERSISTENT      shift and go to state 36
    FOR             shift and go to state 16
    IF              shift and go to state 51
    SEMI            shift and go to state 44
    COMMA           shift and go to state 46
    RETURN          shift and go to state 11
    SWITCH          shift and go to state 33
    TRY             shift and go to state 19
    WHILE           shift and go to state 27
    UNWIND_PROTECT  shift and go to state 6
    IDENT           shift and go to state 15
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    unwind                         shift and go to state 10
    expr_list                      shift and go to state 12
    number                         shift and go to state 26
    return_stmt                    shift and go to state 28
    switch_stmt                    shift and go to state 29
    break_stmt                     shift and go to state 42
    lambda_expr                    shift and go to state 30
    end                            shift and go to state 43
    matrix                         shift and go to state 13
    continue_stmt                  shift and go to state 31
    cellarray                      shift and go to state 21
    expr2                          shift and go to state 3
    expr1                          shift and go to state 45
    global_stmt                    shift and go to state 47
    string                         shift and go to state 41
    colon                          shift and go to state 9
    persistent_stmt                shift and go to state 5
    stmt                           shift and go to state 131
    for_stmt                       shift and go to state 53
    expr_stmt                      shift and go to state 7
    ident                          shift and go to state 34
    if_stmt                        shift and go to state 8
    expr                           shift and go to state 35
    try_catch                      shift and go to state 37
    exprs                          shift and go to state 54
    while_stmt                     shift and go to state 55
    command                        shift and go to state 56
    null_stmt                      shift and go to state 57

state 226

    (70) if_stmt -> IF expr error stmt_list_opt . elseif_stmt END_STMT
    (71) elseif_stmt -> .
    (72) elseif_stmt -> . ELSE stmt_list_opt
    (73) elseif_stmt -> . ELSEIF expr sep stmt_list_opt elseif_stmt

    END_STMT        reduce using rule 71 (elseif_stmt -> .)
    ELSE            shift and go to state 243
    ELSEIF          shift and go to state 244

    elseif_stmt                    shift and go to state 246

state 227

    (22) unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .

    END_STMT        reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    CONTINUE        reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    BREAK           reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    GLOBAL          reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    PERSISTENT      reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    FOR             reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    IF              reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    SEMI            reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    COMMA           reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    RETURN          reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    SWITCH          reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    TRY             reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    WHILE           reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    UNWIND_PROTECT  reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    IDENT           reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    NEG             reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    LPAREN          reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    END_EXPR        reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    NUMBER          reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    STRING          reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    COLON           reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    LBRACKET        reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    LBRACE          reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    MINUS           reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    PLUS            reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    HANDLE          reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    PLUSPLUS        reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    MINUSMINUS      reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    CATCH           reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    ELSE            reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    ELSEIF          reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    CASE            reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    OTHERWISE       reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    UNWIND_PROTECT_CLEANUP reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    FUNCTION        reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    $end            reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    END_UNWIND_PROTECT reduce using rule 22 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)


state 228

    (74) for_stmt -> FOR ident EQ expr SEMI . stmt_list END_STMT
    (57) stmt_list -> . stmt
    (58) stmt_list -> . stmt_list stmt
    (8) stmt -> . continue_stmt
    (9) stmt -> . break_stmt
    (10) stmt -> . expr_stmt
    (11) stmt -> . global_stmt
    (12) stmt -> . persistent_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (21) stmt -> . unwind
    (35) continue_stmt -> . CONTINUE SEMI
    (36) break_stmt -> . BREAK SEMI
    (65) expr_stmt -> . expr_list SEMI
    (32) global_stmt -> . GLOBAL global_list SEMI
    (33) persistent_stmt -> . PERSISTENT expr SEMI
    (29) command -> . ident args SEMI
    (74) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (75) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (76) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (69) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (70) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (43) null_stmt -> . SEMI
    (44) null_stmt -> . COMMA
    (34) return_stmt -> . RETURN SEMI
    (37) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (41) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (42) try_catch -> . TRY stmt_list END_STMT
    (66) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (22) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (93) ident -> . IDENT
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 38
    GLOBAL          shift and go to state 25
    PERSISTENT      shift and go to state 36
    FOR             shift and go to state 16
    IF              shift and go to state 51
    SEMI            shift and go to state 44
    COMMA           shift and go to state 46
    RETURN          shift and go to state 11
    SWITCH          shift and go to state 33
    TRY             shift and go to state 19
    WHILE           shift and go to state 27
    UNWIND_PROTECT  shift and go to state 6
    IDENT           shift and go to state 15
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    unwind                         shift and go to state 10
    expr_list                      shift and go to state 12
    number                         shift and go to state 26
    return_stmt                    shift and go to state 28
    switch_stmt                    shift and go to state 29
    break_stmt                     shift and go to state 42
    lambda_expr                    shift and go to state 30
    end                            shift and go to state 43
    matrix                         shift and go to state 13
    continue_stmt                  shift and go to state 31
    cellarray                      shift and go to state 21
    expr2                          shift and go to state 3
    expr1                          shift and go to state 45
    global_stmt                    shift and go to state 47
    string                         shift and go to state 41
    colon                          shift and go to state 9
    persistent_stmt                shift and go to state 5
    stmt                           shift and go to state 18
    for_stmt                       shift and go to state 53
    expr_stmt                      shift and go to state 7
    stmt_list                      shift and go to state 247
    ident                          shift and go to state 34
    if_stmt                        shift and go to state 8
    expr                           shift and go to state 35
    try_catch                      shift and go to state 37
    exprs                          shift and go to state 54
    while_stmt                     shift and go to state 55
    command                        shift and go to state 56
    null_stmt                      shift and go to state 57

state 229

    (75) for_stmt -> FOR LPAREN ident EQ expr . RPAREN SEMI stmt_list END_STMT
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr

    RPAREN          shift and go to state 248
    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    AND             shift and go to state 119
    ANDAND          shift and go to state 112
    BACKSLASH       shift and go to state 103
    COLON           shift and go to state 107
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    DOTMULEQ        shift and go to state 104
    EQEQ            shift and go to state 92
    EXP             shift and go to state 94
    GE              shift and go to state 116
    GT              shift and go to state 113
    LE              shift and go to state 100
    LT              shift and go to state 106
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    NE              shift and go to state 93
    OR              shift and go to state 122
    OROR            shift and go to state 91
    PLUS            shift and go to state 109
    EQ              shift and go to state 101
    MULEQ           shift and go to state 108
    DIVEQ           shift and go to state 111
    MINUSEQ         shift and go to state 105
    PLUSEQ          shift and go to state 121
    OREQ            shift and go to state 110
    ANDEQ           shift and go to state 114


state 230

    (76) for_stmt -> FOR matrix EQ expr SEMI . stmt_list END_STMT
    (57) stmt_list -> . stmt
    (58) stmt_list -> . stmt_list stmt
    (8) stmt -> . continue_stmt
    (9) stmt -> . break_stmt
    (10) stmt -> . expr_stmt
    (11) stmt -> . global_stmt
    (12) stmt -> . persistent_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (21) stmt -> . unwind
    (35) continue_stmt -> . CONTINUE SEMI
    (36) break_stmt -> . BREAK SEMI
    (65) expr_stmt -> . expr_list SEMI
    (32) global_stmt -> . GLOBAL global_list SEMI
    (33) persistent_stmt -> . PERSISTENT expr SEMI
    (29) command -> . ident args SEMI
    (74) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (75) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (76) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (69) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (70) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (43) null_stmt -> . SEMI
    (44) null_stmt -> . COMMA
    (34) return_stmt -> . RETURN SEMI
    (37) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (41) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (42) try_catch -> . TRY stmt_list END_STMT
    (66) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (22) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (93) ident -> . IDENT
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 38
    GLOBAL          shift and go to state 25
    PERSISTENT      shift and go to state 36
    FOR             shift and go to state 16
    IF              shift and go to state 51
    SEMI            shift and go to state 44
    COMMA           shift and go to state 46
    RETURN          shift and go to state 11
    SWITCH          shift and go to state 33
    TRY             shift and go to state 19
    WHILE           shift and go to state 27
    UNWIND_PROTECT  shift and go to state 6
    IDENT           shift and go to state 15
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    unwind                         shift and go to state 10
    expr_list                      shift and go to state 12
    number                         shift and go to state 26
    return_stmt                    shift and go to state 28
    switch_stmt                    shift and go to state 29
    break_stmt                     shift and go to state 42
    lambda_expr                    shift and go to state 30
    end                            shift and go to state 43
    matrix                         shift and go to state 13
    continue_stmt                  shift and go to state 31
    cellarray                      shift and go to state 21
    expr2                          shift and go to state 3
    expr1                          shift and go to state 45
    global_stmt                    shift and go to state 47
    string                         shift and go to state 41
    colon                          shift and go to state 9
    persistent_stmt                shift and go to state 5
    stmt                           shift and go to state 18
    for_stmt                       shift and go to state 53
    expr_stmt                      shift and go to state 7
    stmt_list                      shift and go to state 249
    ident                          shift and go to state 34
    if_stmt                        shift and go to state 8
    expr                           shift and go to state 35
    try_catch                      shift and go to state 37
    exprs                          shift and go to state 54
    while_stmt                     shift and go to state 55
    command                        shift and go to state 56
    null_stmt                      shift and go to state 57

state 231

    (41) try_catch -> TRY stmt_list CATCH stmt_list END_STMT .

    CONTINUE        reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    BREAK           reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    GLOBAL          reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    PERSISTENT      reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    FOR             reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    IF              reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    SEMI            reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    COMMA           reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    RETURN          reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    SWITCH          reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    TRY             reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    WHILE           reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    UNWIND_PROTECT  reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    IDENT           reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    NEG             reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    LPAREN          reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    END_EXPR        reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    NUMBER          reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    STRING          reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    COLON           reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    LBRACKET        reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    LBRACE          reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    MINUS           reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    PLUS            reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    HANDLE          reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    PLUSPLUS        reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    MINUSMINUS      reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    END_STMT        reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    END_UNWIND_PROTECT reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    ELSE            reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    ELSEIF          reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    FUNCTION        reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    $end            reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    UNWIND_PROTECT_CLEANUP reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    CASE            reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    OTHERWISE       reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    CATCH           reduce using rule 41 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)


state 232

    (66) while_stmt -> WHILE expr SEMI stmt_list END_STMT .

    CONTINUE        reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    BREAK           reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    GLOBAL          reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    PERSISTENT      reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    FOR             reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    IF              reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    SEMI            reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    COMMA           reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    RETURN          reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    SWITCH          reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    TRY             reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    WHILE           reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    UNWIND_PROTECT  reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    IDENT           reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    NEG             reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    LPAREN          reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    END_EXPR        reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    NUMBER          reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    STRING          reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    COLON           reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    LBRACKET        reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    LBRACE          reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    MINUS           reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    PLUS            reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    HANDLE          reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    PLUSPLUS        reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    MINUSMINUS      reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    ELSE            reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    ELSEIF          reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    END_STMT        reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    CASE            reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    OTHERWISE       reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    FUNCTION        reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    $end            reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    END_UNWIND_PROTECT reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    CATCH           reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    UNWIND_PROTECT_CLEANUP reduce using rule 66 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)


state 233

    (4) top -> top func_decl stmt_list END_STMT semi_opt .
    (6) semi_opt -> semi_opt . SEMI
    (7) semi_opt -> semi_opt . COMMA

    FUNCTION        reduce using rule 4 (top -> top func_decl stmt_list END_STMT semi_opt .)
    $end            reduce using rule 4 (top -> top func_decl stmt_list END_STMT semi_opt .)
    SEMI            shift and go to state 216
    COMMA           shift and go to state 218


state 234

    (45) func_decl -> FUNCTION ident args_opt SEMI .

    CONTINUE        reduce using rule 45 (func_decl -> FUNCTION ident args_opt SEMI .)
    BREAK           reduce using rule 45 (func_decl -> FUNCTION ident args_opt SEMI .)
    GLOBAL          reduce using rule 45 (func_decl -> FUNCTION ident args_opt SEMI .)
    PERSISTENT      reduce using rule 45 (func_decl -> FUNCTION ident args_opt SEMI .)
    FOR             reduce using rule 45 (func_decl -> FUNCTION ident args_opt SEMI .)
    IF              reduce using rule 45 (func_decl -> FUNCTION ident args_opt SEMI .)
    SEMI            reduce using rule 45 (func_decl -> FUNCTION ident args_opt SEMI .)
    COMMA           reduce using rule 45 (func_decl -> FUNCTION ident args_opt SEMI .)
    RETURN          reduce using rule 45 (func_decl -> FUNCTION ident args_opt SEMI .)
    SWITCH          reduce using rule 45 (func_decl -> FUNCTION ident args_opt SEMI .)
    TRY             reduce using rule 45 (func_decl -> FUNCTION ident args_opt SEMI .)
    WHILE           reduce using rule 45 (func_decl -> FUNCTION ident args_opt SEMI .)
    UNWIND_PROTECT  reduce using rule 45 (func_decl -> FUNCTION ident args_opt SEMI .)
    IDENT           reduce using rule 45 (func_decl -> FUNCTION ident args_opt SEMI .)
    NEG             reduce using rule 45 (func_decl -> FUNCTION ident args_opt SEMI .)
    LPAREN          reduce using rule 45 (func_decl -> FUNCTION ident args_opt SEMI .)
    END_EXPR        reduce using rule 45 (func_decl -> FUNCTION ident args_opt SEMI .)
    NUMBER          reduce using rule 45 (func_decl -> FUNCTION ident args_opt SEMI .)
    STRING          reduce using rule 45 (func_decl -> FUNCTION ident args_opt SEMI .)
    COLON           reduce using rule 45 (func_decl -> FUNCTION ident args_opt SEMI .)
    LBRACKET        reduce using rule 45 (func_decl -> FUNCTION ident args_opt SEMI .)
    LBRACE          reduce using rule 45 (func_decl -> FUNCTION ident args_opt SEMI .)
    MINUS           reduce using rule 45 (func_decl -> FUNCTION ident args_opt SEMI .)
    PLUS            reduce using rule 45 (func_decl -> FUNCTION ident args_opt SEMI .)
    HANDLE          reduce using rule 45 (func_decl -> FUNCTION ident args_opt SEMI .)
    PLUSPLUS        reduce using rule 45 (func_decl -> FUNCTION ident args_opt SEMI .)
    MINUSMINUS      reduce using rule 45 (func_decl -> FUNCTION ident args_opt SEMI .)
    FUNCTION        reduce using rule 45 (func_decl -> FUNCTION ident args_opt SEMI .)
    $end            reduce using rule 45 (func_decl -> FUNCTION ident args_opt SEMI .)


state 235

    (49) args_opt -> LPAREN expr_list . RPAREN

    RPAREN          shift and go to state 250


state 236

    (48) args_opt -> LPAREN RPAREN .

    SEMI            reduce using rule 48 (args_opt -> LPAREN RPAREN .)


state 237

    (46) func_decl -> FUNCTION ret EQ ident . args_opt SEMI
    (47) args_opt -> .
    (48) args_opt -> . LPAREN RPAREN
    (49) args_opt -> . LPAREN expr_list RPAREN

    SEMI            reduce using rule 47 (args_opt -> .)
    LPAREN          shift and go to state 211

    args_opt                       shift and go to state 251

state 238

    (54) ret -> LBRACKET expr_list RBRACKET .

    EQ              reduce using rule 54 (ret -> LBRACKET expr_list RBRACKET .)


state 239

    (39) case_list -> CASE expr . sep stmt_list_opt case_list
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr
    (67) sep -> . COMMA
    (68) sep -> . SEMI

    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    AND             shift and go to state 119
    ANDAND          shift and go to state 112
    BACKSLASH       shift and go to state 103
    COLON           shift and go to state 107
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    DOTMULEQ        shift and go to state 104
    EQEQ            shift and go to state 92
    EXP             shift and go to state 94
    GE              shift and go to state 116
    GT              shift and go to state 113
    LE              shift and go to state 100
    LT              shift and go to state 106
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    NE              shift and go to state 93
    OR              shift and go to state 122
    OROR            shift and go to state 91
    PLUS            shift and go to state 109
    EQ              shift and go to state 101
    MULEQ           shift and go to state 108
    DIVEQ           shift and go to state 111
    MINUSEQ         shift and go to state 105
    PLUSEQ          shift and go to state 121
    OREQ            shift and go to state 110
    ANDEQ           shift and go to state 114
    COMMA           shift and go to state 197
    SEMI            shift and go to state 195

    sep                            shift and go to state 252

state 240

    (37) switch_stmt -> SWITCH expr semi_opt case_list END_STMT .

    CONTINUE        reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    BREAK           reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    GLOBAL          reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    PERSISTENT      reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    FOR             reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    IF              reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    SEMI            reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    COMMA           reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    RETURN          reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    SWITCH          reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    TRY             reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    WHILE           reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    UNWIND_PROTECT  reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    IDENT           reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    NEG             reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    LPAREN          reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    END_EXPR        reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    NUMBER          reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    STRING          reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    COLON           reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    LBRACKET        reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    LBRACE          reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    MINUS           reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    PLUS            reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    HANDLE          reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    PLUSPLUS        reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    MINUSMINUS      reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    END_STMT        reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    ELSE            reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    ELSEIF          reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    CASE            reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    OTHERWISE       reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    UNWIND_PROTECT_CLEANUP reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    FUNCTION        reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    $end            reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    CATCH           reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    END_UNWIND_PROTECT reduce using rule 37 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)


state 241

    (40) case_list -> OTHERWISE stmt_list .
    (58) stmt_list -> stmt_list . stmt
    (8) stmt -> . continue_stmt
    (9) stmt -> . break_stmt
    (10) stmt -> . expr_stmt
    (11) stmt -> . global_stmt
    (12) stmt -> . persistent_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (21) stmt -> . unwind
    (35) continue_stmt -> . CONTINUE SEMI
    (36) break_stmt -> . BREAK SEMI
    (65) expr_stmt -> . expr_list SEMI
    (32) global_stmt -> . GLOBAL global_list SEMI
    (33) persistent_stmt -> . PERSISTENT expr SEMI
    (29) command -> . ident args SEMI
    (74) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (75) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (76) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (69) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (70) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (43) null_stmt -> . SEMI
    (44) null_stmt -> . COMMA
    (34) return_stmt -> . RETURN SEMI
    (37) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (41) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (42) try_catch -> . TRY stmt_list END_STMT
    (66) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (22) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (93) ident -> . IDENT
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    END_STMT        reduce using rule 40 (case_list -> OTHERWISE stmt_list .)
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 38
    GLOBAL          shift and go to state 25
    PERSISTENT      shift and go to state 36
    FOR             shift and go to state 16
    IF              shift and go to state 51
    SEMI            shift and go to state 44
    COMMA           shift and go to state 46
    RETURN          shift and go to state 11
    SWITCH          shift and go to state 33
    TRY             shift and go to state 19
    WHILE           shift and go to state 27
    UNWIND_PROTECT  shift and go to state 6
    IDENT           shift and go to state 15
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    unwind                         shift and go to state 10
    expr_list                      shift and go to state 12
    number                         shift and go to state 26
    return_stmt                    shift and go to state 28
    switch_stmt                    shift and go to state 29
    break_stmt                     shift and go to state 42
    lambda_expr                    shift and go to state 30
    end                            shift and go to state 43
    matrix                         shift and go to state 13
    continue_stmt                  shift and go to state 31
    cellarray                      shift and go to state 21
    expr2                          shift and go to state 3
    expr1                          shift and go to state 45
    global_stmt                    shift and go to state 47
    string                         shift and go to state 41
    colon                          shift and go to state 9
    persistent_stmt                shift and go to state 5
    stmt                           shift and go to state 131
    for_stmt                       shift and go to state 53
    expr_stmt                      shift and go to state 7
    ident                          shift and go to state 34
    if_stmt                        shift and go to state 8
    expr                           shift and go to state 35
    try_catch                      shift and go to state 37
    exprs                          shift and go to state 54
    while_stmt                     shift and go to state 55
    command                        shift and go to state 56
    null_stmt                      shift and go to state 57

state 242

    (51) arg_list -> arg_list COMMA ident .

    RPAREN          reduce using rule 51 (arg_list -> arg_list COMMA ident .)
    COMMA           reduce using rule 51 (arg_list -> arg_list COMMA ident .)


state 243

    (72) elseif_stmt -> ELSE . stmt_list_opt
    (55) stmt_list_opt -> .
    (56) stmt_list_opt -> . stmt_list
    (57) stmt_list -> . stmt
    (58) stmt_list -> . stmt_list stmt
    (8) stmt -> . continue_stmt
    (9) stmt -> . break_stmt
    (10) stmt -> . expr_stmt
    (11) stmt -> . global_stmt
    (12) stmt -> . persistent_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (21) stmt -> . unwind
    (35) continue_stmt -> . CONTINUE SEMI
    (36) break_stmt -> . BREAK SEMI
    (65) expr_stmt -> . expr_list SEMI
    (32) global_stmt -> . GLOBAL global_list SEMI
    (33) persistent_stmt -> . PERSISTENT expr SEMI
    (29) command -> . ident args SEMI
    (74) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (75) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (76) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (69) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (70) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (43) null_stmt -> . SEMI
    (44) null_stmt -> . COMMA
    (34) return_stmt -> . RETURN SEMI
    (37) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (41) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (42) try_catch -> . TRY stmt_list END_STMT
    (66) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (22) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (93) ident -> . IDENT
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    END_STMT        reduce using rule 55 (stmt_list_opt -> .)
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 38
    GLOBAL          shift and go to state 25
    PERSISTENT      shift and go to state 36
    FOR             shift and go to state 16
    IF              shift and go to state 51
    SEMI            shift and go to state 44
    COMMA           shift and go to state 46
    RETURN          shift and go to state 11
    SWITCH          shift and go to state 33
    TRY             shift and go to state 19
    WHILE           shift and go to state 27
    UNWIND_PROTECT  shift and go to state 6
    IDENT           shift and go to state 15
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    unwind                         shift and go to state 10
    expr_list                      shift and go to state 12
    number                         shift and go to state 26
    stmt_list_opt                  shift and go to state 253
    return_stmt                    shift and go to state 28
    switch_stmt                    shift and go to state 29
    break_stmt                     shift and go to state 42
    lambda_expr                    shift and go to state 30
    end                            shift and go to state 43
    matrix                         shift and go to state 13
    continue_stmt                  shift and go to state 31
    cellarray                      shift and go to state 21
    expr2                          shift and go to state 3
    expr1                          shift and go to state 45
    global_stmt                    shift and go to state 47
    string                         shift and go to state 41
    colon                          shift and go to state 9
    persistent_stmt                shift and go to state 5
    stmt                           shift and go to state 18
    for_stmt                       shift and go to state 53
    expr_stmt                      shift and go to state 7
    stmt_list                      shift and go to state 225
    ident                          shift and go to state 34
    if_stmt                        shift and go to state 8
    expr                           shift and go to state 35
    try_catch                      shift and go to state 37
    exprs                          shift and go to state 54
    while_stmt                     shift and go to state 55
    command                        shift and go to state 56
    null_stmt                      shift and go to state 57

state 244

    (73) elseif_stmt -> ELSEIF . expr sep stmt_list_opt elseif_stmt
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (93) ident -> . IDENT
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    IDENT           shift and go to state 15
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    expr2                          shift and go to state 3
    lambda_expr                    shift and go to state 30
    ident                          shift and go to state 60
    end                            shift and go to state 43
    string                         shift and go to state 41
    expr                           shift and go to state 254
    number                         shift and go to state 26
    cellarray                      shift and go to state 21
    expr1                          shift and go to state 45
    colon                          shift and go to state 9
    matrix                         shift and go to state 13

state 245

    (69) if_stmt -> IF expr sep stmt_list_opt elseif_stmt . END_STMT

    END_STMT        shift and go to state 255


state 246

    (70) if_stmt -> IF expr error stmt_list_opt elseif_stmt . END_STMT

    END_STMT        shift and go to state 256


state 247

    (74) for_stmt -> FOR ident EQ expr SEMI stmt_list . END_STMT
    (58) stmt_list -> stmt_list . stmt
    (8) stmt -> . continue_stmt
    (9) stmt -> . break_stmt
    (10) stmt -> . expr_stmt
    (11) stmt -> . global_stmt
    (12) stmt -> . persistent_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (21) stmt -> . unwind
    (35) continue_stmt -> . CONTINUE SEMI
    (36) break_stmt -> . BREAK SEMI
    (65) expr_stmt -> . expr_list SEMI
    (32) global_stmt -> . GLOBAL global_list SEMI
    (33) persistent_stmt -> . PERSISTENT expr SEMI
    (29) command -> . ident args SEMI
    (74) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (75) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (76) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (69) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (70) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (43) null_stmt -> . SEMI
    (44) null_stmt -> . COMMA
    (34) return_stmt -> . RETURN SEMI
    (37) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (41) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (42) try_catch -> . TRY stmt_list END_STMT
    (66) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (22) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (93) ident -> . IDENT
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    END_STMT        shift and go to state 257
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 38
    GLOBAL          shift and go to state 25
    PERSISTENT      shift and go to state 36
    FOR             shift and go to state 16
    IF              shift and go to state 51
    SEMI            shift and go to state 44
    COMMA           shift and go to state 46
    RETURN          shift and go to state 11
    SWITCH          shift and go to state 33
    TRY             shift and go to state 19
    WHILE           shift and go to state 27
    UNWIND_PROTECT  shift and go to state 6
    IDENT           shift and go to state 15
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    unwind                         shift and go to state 10
    expr_list                      shift and go to state 12
    number                         shift and go to state 26
    return_stmt                    shift and go to state 28
    switch_stmt                    shift and go to state 29
    break_stmt                     shift and go to state 42
    lambda_expr                    shift and go to state 30
    end                            shift and go to state 43
    matrix                         shift and go to state 13
    continue_stmt                  shift and go to state 31
    cellarray                      shift and go to state 21
    expr2                          shift and go to state 3
    expr1                          shift and go to state 45
    global_stmt                    shift and go to state 47
    string                         shift and go to state 41
    colon                          shift and go to state 9
    persistent_stmt                shift and go to state 5
    stmt                           shift and go to state 131
    for_stmt                       shift and go to state 53
    expr_stmt                      shift and go to state 7
    ident                          shift and go to state 34
    if_stmt                        shift and go to state 8
    expr                           shift and go to state 35
    try_catch                      shift and go to state 37
    exprs                          shift and go to state 54
    while_stmt                     shift and go to state 55
    command                        shift and go to state 56
    null_stmt                      shift and go to state 57

state 248

    (75) for_stmt -> FOR LPAREN ident EQ expr RPAREN . SEMI stmt_list END_STMT

    SEMI            shift and go to state 258


state 249

    (76) for_stmt -> FOR matrix EQ expr SEMI stmt_list . END_STMT
    (58) stmt_list -> stmt_list . stmt
    (8) stmt -> . continue_stmt
    (9) stmt -> . break_stmt
    (10) stmt -> . expr_stmt
    (11) stmt -> . global_stmt
    (12) stmt -> . persistent_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (21) stmt -> . unwind
    (35) continue_stmt -> . CONTINUE SEMI
    (36) break_stmt -> . BREAK SEMI
    (65) expr_stmt -> . expr_list SEMI
    (32) global_stmt -> . GLOBAL global_list SEMI
    (33) persistent_stmt -> . PERSISTENT expr SEMI
    (29) command -> . ident args SEMI
    (74) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (75) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (76) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (69) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (70) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (43) null_stmt -> . SEMI
    (44) null_stmt -> . COMMA
    (34) return_stmt -> . RETURN SEMI
    (37) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (41) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (42) try_catch -> . TRY stmt_list END_STMT
    (66) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (22) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (93) ident -> . IDENT
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    END_STMT        shift and go to state 259
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 38
    GLOBAL          shift and go to state 25
    PERSISTENT      shift and go to state 36
    FOR             shift and go to state 16
    IF              shift and go to state 51
    SEMI            shift and go to state 44
    COMMA           shift and go to state 46
    RETURN          shift and go to state 11
    SWITCH          shift and go to state 33
    TRY             shift and go to state 19
    WHILE           shift and go to state 27
    UNWIND_PROTECT  shift and go to state 6
    IDENT           shift and go to state 15
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    unwind                         shift and go to state 10
    expr_list                      shift and go to state 12
    number                         shift and go to state 26
    return_stmt                    shift and go to state 28
    switch_stmt                    shift and go to state 29
    break_stmt                     shift and go to state 42
    lambda_expr                    shift and go to state 30
    end                            shift and go to state 43
    matrix                         shift and go to state 13
    continue_stmt                  shift and go to state 31
    cellarray                      shift and go to state 21
    expr2                          shift and go to state 3
    expr1                          shift and go to state 45
    global_stmt                    shift and go to state 47
    string                         shift and go to state 41
    colon                          shift and go to state 9
    persistent_stmt                shift and go to state 5
    stmt                           shift and go to state 131
    for_stmt                       shift and go to state 53
    expr_stmt                      shift and go to state 7
    ident                          shift and go to state 34
    if_stmt                        shift and go to state 8
    expr                           shift and go to state 35
    try_catch                      shift and go to state 37
    exprs                          shift and go to state 54
    while_stmt                     shift and go to state 55
    command                        shift and go to state 56
    null_stmt                      shift and go to state 57

state 250

    (49) args_opt -> LPAREN expr_list RPAREN .

    SEMI            reduce using rule 49 (args_opt -> LPAREN expr_list RPAREN .)


state 251

    (46) func_decl -> FUNCTION ret EQ ident args_opt . SEMI

    SEMI            shift and go to state 260


state 252

    (39) case_list -> CASE expr sep . stmt_list_opt case_list
    (55) stmt_list_opt -> .
    (56) stmt_list_opt -> . stmt_list
    (57) stmt_list -> . stmt
    (58) stmt_list -> . stmt_list stmt
    (8) stmt -> . continue_stmt
    (9) stmt -> . break_stmt
    (10) stmt -> . expr_stmt
    (11) stmt -> . global_stmt
    (12) stmt -> . persistent_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (21) stmt -> . unwind
    (35) continue_stmt -> . CONTINUE SEMI
    (36) break_stmt -> . BREAK SEMI
    (65) expr_stmt -> . expr_list SEMI
    (32) global_stmt -> . GLOBAL global_list SEMI
    (33) persistent_stmt -> . PERSISTENT expr SEMI
    (29) command -> . ident args SEMI
    (74) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (75) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (76) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (69) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (70) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (43) null_stmt -> . SEMI
    (44) null_stmt -> . COMMA
    (34) return_stmt -> . RETURN SEMI
    (37) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (41) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (42) try_catch -> . TRY stmt_list END_STMT
    (66) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (22) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (93) ident -> . IDENT
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    CASE            reduce using rule 55 (stmt_list_opt -> .)
    OTHERWISE       reduce using rule 55 (stmt_list_opt -> .)
    END_STMT        reduce using rule 55 (stmt_list_opt -> .)
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 38
    GLOBAL          shift and go to state 25
    PERSISTENT      shift and go to state 36
    FOR             shift and go to state 16
    IF              shift and go to state 51
    SEMI            shift and go to state 44
    COMMA           shift and go to state 46
    RETURN          shift and go to state 11
    SWITCH          shift and go to state 33
    TRY             shift and go to state 19
    WHILE           shift and go to state 27
    UNWIND_PROTECT  shift and go to state 6
    IDENT           shift and go to state 15
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    unwind                         shift and go to state 10
    expr_list                      shift and go to state 12
    number                         shift and go to state 26
    stmt_list_opt                  shift and go to state 261
    return_stmt                    shift and go to state 28
    switch_stmt                    shift and go to state 29
    break_stmt                     shift and go to state 42
    lambda_expr                    shift and go to state 30
    end                            shift and go to state 43
    matrix                         shift and go to state 13
    continue_stmt                  shift and go to state 31
    cellarray                      shift and go to state 21
    expr2                          shift and go to state 3
    expr1                          shift and go to state 45
    global_stmt                    shift and go to state 47
    string                         shift and go to state 41
    colon                          shift and go to state 9
    persistent_stmt                shift and go to state 5
    stmt                           shift and go to state 18
    for_stmt                       shift and go to state 53
    expr_stmt                      shift and go to state 7
    stmt_list                      shift and go to state 225
    ident                          shift and go to state 34
    if_stmt                        shift and go to state 8
    expr                           shift and go to state 35
    try_catch                      shift and go to state 37
    exprs                          shift and go to state 54
    while_stmt                     shift and go to state 55
    command                        shift and go to state 56
    null_stmt                      shift and go to state 57

state 253

    (72) elseif_stmt -> ELSE stmt_list_opt .

    END_STMT        reduce using rule 72 (elseif_stmt -> ELSE stmt_list_opt .)


state 254

    (73) elseif_stmt -> ELSEIF expr . sep stmt_list_opt elseif_stmt
    (112) expr -> expr . FIELD
    (113) expr -> expr . TRANSPOSE
    (114) expr -> expr . LBRACE expr_list RBRACE
    (115) expr -> expr . LBRACE RBRACE
    (116) expr -> expr . LPAREN expr_list RPAREN
    (117) expr -> expr . LPAREN RPAREN
    (118) expr2 -> expr . AND expr
    (119) expr2 -> expr . ANDAND expr
    (120) expr2 -> expr . BACKSLASH expr
    (121) expr2 -> expr . COLON expr
    (122) expr2 -> expr . DIV expr
    (123) expr2 -> expr . DOT expr
    (124) expr2 -> expr . DOTDIV expr
    (125) expr2 -> expr . DOTEXP expr
    (126) expr2 -> expr . DOTMUL expr
    (127) expr2 -> expr . DOTMULEQ expr
    (128) expr2 -> expr . EQEQ expr
    (129) expr2 -> expr . EXP expr
    (130) expr2 -> expr . GE expr
    (131) expr2 -> expr . GT expr
    (132) expr2 -> expr . LE expr
    (133) expr2 -> expr . LT expr
    (134) expr2 -> expr . MINUS expr
    (135) expr2 -> expr . MUL expr
    (136) expr2 -> expr . NE expr
    (137) expr2 -> expr . OR expr
    (138) expr2 -> expr . OROR expr
    (139) expr2 -> expr . PLUS expr
    (140) expr2 -> expr . EQ expr
    (141) expr2 -> expr . MULEQ expr
    (142) expr2 -> expr . DIVEQ expr
    (143) expr2 -> expr . MINUSEQ expr
    (144) expr2 -> expr . PLUSEQ expr
    (145) expr2 -> expr . OREQ expr
    (146) expr2 -> expr . ANDEQ expr
    (67) sep -> . COMMA
    (68) sep -> . SEMI

    FIELD           shift and go to state 115
    TRANSPOSE       shift and go to state 102
    LBRACE          shift and go to state 120
    LPAREN          shift and go to state 117
    AND             shift and go to state 119
    ANDAND          shift and go to state 112
    BACKSLASH       shift and go to state 103
    COLON           shift and go to state 107
    DIV             shift and go to state 96
    DOT             shift and go to state 99
    DOTDIV          shift and go to state 90
    DOTEXP          shift and go to state 118
    DOTMUL          shift and go to state 97
    DOTMULEQ        shift and go to state 104
    EQEQ            shift and go to state 92
    EXP             shift and go to state 94
    GE              shift and go to state 116
    GT              shift and go to state 113
    LE              shift and go to state 100
    LT              shift and go to state 106
    MINUS           shift and go to state 98
    MUL             shift and go to state 95
    NE              shift and go to state 93
    OR              shift and go to state 122
    OROR            shift and go to state 91
    PLUS            shift and go to state 109
    EQ              shift and go to state 101
    MULEQ           shift and go to state 108
    DIVEQ           shift and go to state 111
    MINUSEQ         shift and go to state 105
    PLUSEQ          shift and go to state 121
    OREQ            shift and go to state 110
    ANDEQ           shift and go to state 114
    COMMA           shift and go to state 197
    SEMI            shift and go to state 195

    sep                            shift and go to state 262

state 255

    (69) if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .

    END_UNWIND_PROTECT reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    CONTINUE        reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    BREAK           reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    GLOBAL          reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    PERSISTENT      reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    FOR             reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    IF              reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    SEMI            reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    COMMA           reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    RETURN          reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    SWITCH          reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    TRY             reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    WHILE           reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    UNWIND_PROTECT  reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    IDENT           reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    NEG             reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    LPAREN          reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    END_EXPR        reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    NUMBER          reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    STRING          reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    COLON           reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    LBRACKET        reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    LBRACE          reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    MINUS           reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    PLUS            reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    HANDLE          reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    PLUSPLUS        reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    MINUSMINUS      reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    END_STMT        reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    FUNCTION        reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    $end            reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    ELSE            reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    ELSEIF          reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    CASE            reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    OTHERWISE       reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    UNWIND_PROTECT_CLEANUP reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    CATCH           reduce using rule 69 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)


state 256

    (70) if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .

    END_UNWIND_PROTECT reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    CONTINUE        reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    BREAK           reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    GLOBAL          reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    PERSISTENT      reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    FOR             reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    IF              reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    SEMI            reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    COMMA           reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    RETURN          reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    SWITCH          reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    TRY             reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    WHILE           reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    UNWIND_PROTECT  reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    IDENT           reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    NEG             reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    LPAREN          reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    END_EXPR        reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    NUMBER          reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    STRING          reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    COLON           reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    LBRACKET        reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    LBRACE          reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    MINUS           reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    PLUS            reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    HANDLE          reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    PLUSPLUS        reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    MINUSMINUS      reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    END_STMT        reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    FUNCTION        reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    $end            reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    ELSE            reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    ELSEIF          reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    CASE            reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    OTHERWISE       reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    UNWIND_PROTECT_CLEANUP reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    CATCH           reduce using rule 70 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)


state 257

    (74) for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .

    END_STMT        reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    CONTINUE        reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    BREAK           reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    GLOBAL          reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    PERSISTENT      reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    FOR             reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    IF              reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    SEMI            reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    COMMA           reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    RETURN          reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    SWITCH          reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    TRY             reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    WHILE           reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    UNWIND_PROTECT  reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    IDENT           reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    NEG             reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    LPAREN          reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    END_EXPR        reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    NUMBER          reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    STRING          reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    COLON           reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    LBRACKET        reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    LBRACE          reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    MINUS           reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    PLUS            reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    HANDLE          reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    PLUSPLUS        reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    MINUSMINUS      reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    FUNCTION        reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    $end            reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    CATCH           reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    ELSE            reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    ELSEIF          reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    UNWIND_PROTECT_CLEANUP reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    CASE            reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    OTHERWISE       reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    END_UNWIND_PROTECT reduce using rule 74 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)


state 258

    (75) for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI . stmt_list END_STMT
    (57) stmt_list -> . stmt
    (58) stmt_list -> . stmt_list stmt
    (8) stmt -> . continue_stmt
    (9) stmt -> . break_stmt
    (10) stmt -> . expr_stmt
    (11) stmt -> . global_stmt
    (12) stmt -> . persistent_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (21) stmt -> . unwind
    (35) continue_stmt -> . CONTINUE SEMI
    (36) break_stmt -> . BREAK SEMI
    (65) expr_stmt -> . expr_list SEMI
    (32) global_stmt -> . GLOBAL global_list SEMI
    (33) persistent_stmt -> . PERSISTENT expr SEMI
    (29) command -> . ident args SEMI
    (74) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (75) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (76) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (69) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (70) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (43) null_stmt -> . SEMI
    (44) null_stmt -> . COMMA
    (34) return_stmt -> . RETURN SEMI
    (37) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (41) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (42) try_catch -> . TRY stmt_list END_STMT
    (66) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (22) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (93) ident -> . IDENT
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 38
    GLOBAL          shift and go to state 25
    PERSISTENT      shift and go to state 36
    FOR             shift and go to state 16
    IF              shift and go to state 51
    SEMI            shift and go to state 44
    COMMA           shift and go to state 46
    RETURN          shift and go to state 11
    SWITCH          shift and go to state 33
    TRY             shift and go to state 19
    WHILE           shift and go to state 27
    UNWIND_PROTECT  shift and go to state 6
    IDENT           shift and go to state 15
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    unwind                         shift and go to state 10
    expr_list                      shift and go to state 12
    number                         shift and go to state 26
    return_stmt                    shift and go to state 28
    switch_stmt                    shift and go to state 29
    break_stmt                     shift and go to state 42
    lambda_expr                    shift and go to state 30
    end                            shift and go to state 43
    matrix                         shift and go to state 13
    continue_stmt                  shift and go to state 31
    cellarray                      shift and go to state 21
    expr2                          shift and go to state 3
    expr1                          shift and go to state 45
    global_stmt                    shift and go to state 47
    string                         shift and go to state 41
    colon                          shift and go to state 9
    persistent_stmt                shift and go to state 5
    stmt                           shift and go to state 18
    for_stmt                       shift and go to state 53
    expr_stmt                      shift and go to state 7
    stmt_list                      shift and go to state 263
    ident                          shift and go to state 34
    if_stmt                        shift and go to state 8
    expr                           shift and go to state 35
    try_catch                      shift and go to state 37
    exprs                          shift and go to state 54
    while_stmt                     shift and go to state 55
    command                        shift and go to state 56
    null_stmt                      shift and go to state 57

state 259

    (76) for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .

    END_STMT        reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    CONTINUE        reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    BREAK           reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    GLOBAL          reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    PERSISTENT      reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    FOR             reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    IF              reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    SEMI            reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    COMMA           reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    RETURN          reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    SWITCH          reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    TRY             reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    WHILE           reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    UNWIND_PROTECT  reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    IDENT           reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    NEG             reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    LPAREN          reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    END_EXPR        reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    NUMBER          reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    STRING          reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    COLON           reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    LBRACKET        reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    LBRACE          reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    MINUS           reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    PLUS            reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    HANDLE          reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    PLUSPLUS        reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    MINUSMINUS      reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    FUNCTION        reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    $end            reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    CATCH           reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    ELSE            reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    ELSEIF          reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    UNWIND_PROTECT_CLEANUP reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    CASE            reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    OTHERWISE       reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    END_UNWIND_PROTECT reduce using rule 76 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)


state 260

    (46) func_decl -> FUNCTION ret EQ ident args_opt SEMI .

    CONTINUE        reduce using rule 46 (func_decl -> FUNCTION ret EQ ident args_opt SEMI .)
    BREAK           reduce using rule 46 (func_decl -> FUNCTION ret EQ ident args_opt SEMI .)
    GLOBAL          reduce using rule 46 (func_decl -> FUNCTION ret EQ ident args_opt SEMI .)
    PERSISTENT      reduce using rule 46 (func_decl -> FUNCTION ret EQ ident args_opt SEMI .)
    FOR             reduce using rule 46 (func_decl -> FUNCTION ret EQ ident args_opt SEMI .)
    IF              reduce using rule 46 (func_decl -> FUNCTION ret EQ ident args_opt SEMI .)
    SEMI            reduce using rule 46 (func_decl -> FUNCTION ret EQ ident args_opt SEMI .)
    COMMA           reduce using rule 46 (func_decl -> FUNCTION ret EQ ident args_opt SEMI .)
    RETURN          reduce using rule 46 (func_decl -> FUNCTION ret EQ ident args_opt SEMI .)
    SWITCH          reduce using rule 46 (func_decl -> FUNCTION ret EQ ident args_opt SEMI .)
    TRY             reduce using rule 46 (func_decl -> FUNCTION ret EQ ident args_opt SEMI .)
    WHILE           reduce using rule 46 (func_decl -> FUNCTION ret EQ ident args_opt SEMI .)
    UNWIND_PROTECT  reduce using rule 46 (func_decl -> FUNCTION ret EQ ident args_opt SEMI .)
    IDENT           reduce using rule 46 (func_decl -> FUNCTION ret EQ ident args_opt SEMI .)
    NEG             reduce using rule 46 (func_decl -> FUNCTION ret EQ ident args_opt SEMI .)
    LPAREN          reduce using rule 46 (func_decl -> FUNCTION ret EQ ident args_opt SEMI .)
    END_EXPR        reduce using rule 46 (func_decl -> FUNCTION ret EQ ident args_opt SEMI .)
    NUMBER          reduce using rule 46 (func_decl -> FUNCTION ret EQ ident args_opt SEMI .)
    STRING          reduce using rule 46 (func_decl -> FUNCTION ret EQ ident args_opt SEMI .)
    COLON           reduce using rule 46 (func_decl -> FUNCTION ret EQ ident args_opt SEMI .)
    LBRACKET        reduce using rule 46 (func_decl -> FUNCTION ret EQ ident args_opt SEMI .)
    LBRACE          reduce using rule 46 (func_decl -> FUNCTION ret EQ ident args_opt SEMI .)
    MINUS           reduce using rule 46 (func_decl -> FUNCTION ret EQ ident args_opt SEMI .)
    PLUS            reduce using rule 46 (func_decl -> FUNCTION ret EQ ident args_opt SEMI .)
    HANDLE          reduce using rule 46 (func_decl -> FUNCTION ret EQ ident args_opt SEMI .)
    PLUSPLUS        reduce using rule 46 (func_decl -> FUNCTION ret EQ ident args_opt SEMI .)
    MINUSMINUS      reduce using rule 46 (func_decl -> FUNCTION ret EQ ident args_opt SEMI .)
    FUNCTION        reduce using rule 46 (func_decl -> FUNCTION ret EQ ident args_opt SEMI .)
    $end            reduce using rule 46 (func_decl -> FUNCTION ret EQ ident args_opt SEMI .)


state 261

    (39) case_list -> CASE expr sep stmt_list_opt . case_list
    (38) case_list -> .
    (39) case_list -> . CASE expr sep stmt_list_opt case_list
    (40) case_list -> . OTHERWISE stmt_list

    END_STMT        reduce using rule 38 (case_list -> .)
    CASE            shift and go to state 215
    OTHERWISE       shift and go to state 219

    case_list                      shift and go to state 264

state 262

    (73) elseif_stmt -> ELSEIF expr sep . stmt_list_opt elseif_stmt
    (55) stmt_list_opt -> .
    (56) stmt_list_opt -> . stmt_list
    (57) stmt_list -> . stmt
    (58) stmt_list -> . stmt_list stmt
    (8) stmt -> . continue_stmt
    (9) stmt -> . break_stmt
    (10) stmt -> . expr_stmt
    (11) stmt -> . global_stmt
    (12) stmt -> . persistent_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (21) stmt -> . unwind
    (35) continue_stmt -> . CONTINUE SEMI
    (36) break_stmt -> . BREAK SEMI
    (65) expr_stmt -> . expr_list SEMI
    (32) global_stmt -> . GLOBAL global_list SEMI
    (33) persistent_stmt -> . PERSISTENT expr SEMI
    (29) command -> . ident args SEMI
    (74) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (75) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (76) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (69) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (70) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (43) null_stmt -> . SEMI
    (44) null_stmt -> . COMMA
    (34) return_stmt -> . RETURN SEMI
    (37) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (41) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (42) try_catch -> . TRY stmt_list END_STMT
    (66) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (22) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (93) ident -> . IDENT
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    ELSE            reduce using rule 55 (stmt_list_opt -> .)
    ELSEIF          reduce using rule 55 (stmt_list_opt -> .)
    END_STMT        reduce using rule 55 (stmt_list_opt -> .)
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 38
    GLOBAL          shift and go to state 25
    PERSISTENT      shift and go to state 36
    FOR             shift and go to state 16
    IF              shift and go to state 51
    SEMI            shift and go to state 44
    COMMA           shift and go to state 46
    RETURN          shift and go to state 11
    SWITCH          shift and go to state 33
    TRY             shift and go to state 19
    WHILE           shift and go to state 27
    UNWIND_PROTECT  shift and go to state 6
    IDENT           shift and go to state 15
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    unwind                         shift and go to state 10
    expr_list                      shift and go to state 12
    number                         shift and go to state 26
    stmt_list_opt                  shift and go to state 265
    return_stmt                    shift and go to state 28
    switch_stmt                    shift and go to state 29
    break_stmt                     shift and go to state 42
    lambda_expr                    shift and go to state 30
    end                            shift and go to state 43
    matrix                         shift and go to state 13
    continue_stmt                  shift and go to state 31
    cellarray                      shift and go to state 21
    expr2                          shift and go to state 3
    expr1                          shift and go to state 45
    global_stmt                    shift and go to state 47
    string                         shift and go to state 41
    colon                          shift and go to state 9
    persistent_stmt                shift and go to state 5
    stmt                           shift and go to state 18
    for_stmt                       shift and go to state 53
    expr_stmt                      shift and go to state 7
    stmt_list                      shift and go to state 225
    ident                          shift and go to state 34
    if_stmt                        shift and go to state 8
    expr                           shift and go to state 35
    try_catch                      shift and go to state 37
    exprs                          shift and go to state 54
    while_stmt                     shift and go to state 55
    command                        shift and go to state 56
    null_stmt                      shift and go to state 57

state 263

    (75) for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list . END_STMT
    (58) stmt_list -> stmt_list . stmt
    (8) stmt -> . continue_stmt
    (9) stmt -> . break_stmt
    (10) stmt -> . expr_stmt
    (11) stmt -> . global_stmt
    (12) stmt -> . persistent_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (21) stmt -> . unwind
    (35) continue_stmt -> . CONTINUE SEMI
    (36) break_stmt -> . BREAK SEMI
    (65) expr_stmt -> . expr_list SEMI
    (32) global_stmt -> . GLOBAL global_list SEMI
    (33) persistent_stmt -> . PERSISTENT expr SEMI
    (29) command -> . ident args SEMI
    (74) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (75) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (76) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (69) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (70) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (43) null_stmt -> . SEMI
    (44) null_stmt -> . COMMA
    (34) return_stmt -> . RETURN SEMI
    (37) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (41) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (42) try_catch -> . TRY stmt_list END_STMT
    (66) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (22) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (61) expr_list -> . exprs
    (62) expr_list -> . exprs COMMA
    (93) ident -> . IDENT
    (63) exprs -> . expr
    (64) exprs -> . exprs COMMA expr
    (77) expr -> . ident
    (78) expr -> . end
    (79) expr -> . number
    (80) expr -> . string
    (81) expr -> . colon
    (82) expr -> . NEG
    (83) expr -> . matrix
    (84) expr -> . cellarray
    (85) expr -> . expr2
    (86) expr -> . expr1
    (87) expr -> . lambda_expr
    (88) expr -> . ident PLUSPLUS
    (89) expr -> . ident MINUSMINUS
    (111) expr -> . LPAREN expr RPAREN
    (112) expr -> . expr FIELD
    (113) expr -> . expr TRANSPOSE
    (114) expr -> . expr LBRACE expr_list RBRACE
    (115) expr -> . expr LBRACE RBRACE
    (116) expr -> . expr LPAREN expr_list RPAREN
    (117) expr -> . expr LPAREN RPAREN
    (95) end -> . END_EXPR
    (94) number -> . NUMBER
    (96) string -> . STRING
    (97) colon -> . COLON
    (106) matrix -> . LBRACKET RBRACKET
    (107) matrix -> . LBRACKET concat_list RBRACKET
    (108) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (109) matrix -> . LBRACKET expr_list RBRACKET
    (110) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (104) cellarray -> . LBRACE RBRACE
    (105) cellarray -> . LBRACE expr_list RBRACE
    (118) expr2 -> . expr AND expr
    (119) expr2 -> . expr ANDAND expr
    (120) expr2 -> . expr BACKSLASH expr
    (121) expr2 -> . expr COLON expr
    (122) expr2 -> . expr DIV expr
    (123) expr2 -> . expr DOT expr
    (124) expr2 -> . expr DOTDIV expr
    (125) expr2 -> . expr DOTEXP expr
    (126) expr2 -> . expr DOTMUL expr
    (127) expr2 -> . expr DOTMULEQ expr
    (128) expr2 -> . expr EQEQ expr
    (129) expr2 -> . expr EXP expr
    (130) expr2 -> . expr GE expr
    (131) expr2 -> . expr GT expr
    (132) expr2 -> . expr LE expr
    (133) expr2 -> . expr LT expr
    (134) expr2 -> . expr MINUS expr
    (135) expr2 -> . expr MUL expr
    (136) expr2 -> . expr NE expr
    (137) expr2 -> . expr OR expr
    (138) expr2 -> . expr OROR expr
    (139) expr2 -> . expr PLUS expr
    (140) expr2 -> . expr EQ expr
    (141) expr2 -> . expr MULEQ expr
    (142) expr2 -> . expr DIVEQ expr
    (143) expr2 -> . expr MINUSEQ expr
    (144) expr2 -> . expr PLUSEQ expr
    (145) expr2 -> . expr OREQ expr
    (146) expr2 -> . expr ANDEQ expr
    (98) expr1 -> . MINUS expr
    (99) expr1 -> . PLUS expr
    (100) expr1 -> . NEG expr
    (101) expr1 -> . HANDLE ident
    (102) expr1 -> . PLUSPLUS ident
    (103) expr1 -> . MINUSMINUS ident
    (92) lambda_expr -> . HANDLE lambda_args expr

    END_STMT        shift and go to state 266
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 38
    GLOBAL          shift and go to state 25
    PERSISTENT      shift and go to state 36
    FOR             shift and go to state 16
    IF              shift and go to state 51
    SEMI            shift and go to state 44
    COMMA           shift and go to state 46
    RETURN          shift and go to state 11
    SWITCH          shift and go to state 33
    TRY             shift and go to state 19
    WHILE           shift and go to state 27
    UNWIND_PROTECT  shift and go to state 6
    IDENT           shift and go to state 15
    NEG             shift and go to state 24
    LPAREN          shift and go to state 49
    END_EXPR        shift and go to state 23
    NUMBER          shift and go to state 39
    STRING          shift and go to state 48
    COLON           shift and go to state 14
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 20
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    HANDLE          shift and go to state 40
    PLUSPLUS        shift and go to state 17
    MINUSMINUS      shift and go to state 50

    unwind                         shift and go to state 10
    expr_list                      shift and go to state 12
    number                         shift and go to state 26
    return_stmt                    shift and go to state 28
    switch_stmt                    shift and go to state 29
    break_stmt                     shift and go to state 42
    lambda_expr                    shift and go to state 30
    end                            shift and go to state 43
    matrix                         shift and go to state 13
    continue_stmt                  shift and go to state 31
    cellarray                      shift and go to state 21
    expr2                          shift and go to state 3
    expr1                          shift and go to state 45
    global_stmt                    shift and go to state 47
    string                         shift and go to state 41
    colon                          shift and go to state 9
    persistent_stmt                shift and go to state 5
    stmt                           shift and go to state 131
    for_stmt                       shift and go to state 53
    expr_stmt                      shift and go to state 7
    ident                          shift and go to state 34
    if_stmt                        shift and go to state 8
    expr                           shift and go to state 35
    try_catch                      shift and go to state 37
    exprs                          shift and go to state 54
    while_stmt                     shift and go to state 55
    command                        shift and go to state 56
    null_stmt                      shift and go to state 57

state 264

    (39) case_list -> CASE expr sep stmt_list_opt case_list .

    END_STMT        reduce using rule 39 (case_list -> CASE expr sep stmt_list_opt case_list .)


state 265

    (73) elseif_stmt -> ELSEIF expr sep stmt_list_opt . elseif_stmt
    (71) elseif_stmt -> .
    (72) elseif_stmt -> . ELSE stmt_list_opt
    (73) elseif_stmt -> . ELSEIF expr sep stmt_list_opt elseif_stmt

    END_STMT        reduce using rule 71 (elseif_stmt -> .)
    ELSE            shift and go to state 243
    ELSEIF          shift and go to state 244

    elseif_stmt                    shift and go to state 267

state 266

    (75) for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .

    END_STMT        reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    CONTINUE        reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    BREAK           reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    GLOBAL          reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    PERSISTENT      reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    FOR             reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    IF              reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    SEMI            reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    COMMA           reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    RETURN          reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    SWITCH          reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    TRY             reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    WHILE           reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    UNWIND_PROTECT  reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    IDENT           reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    NEG             reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    LPAREN          reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    END_EXPR        reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    NUMBER          reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    STRING          reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    COLON           reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    LBRACKET        reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    LBRACE          reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    MINUS           reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    PLUS            reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    HANDLE          reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    PLUSPLUS        reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    MINUSMINUS      reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    FUNCTION        reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    $end            reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    CATCH           reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    ELSE            reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    ELSEIF          reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    UNWIND_PROTECT_CLEANUP reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    CASE            reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    OTHERWISE       reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    END_UNWIND_PROTECT reduce using rule 75 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)


state 267

    (73) elseif_stmt -> ELSEIF expr sep stmt_list_opt elseif_stmt .

    END_STMT        reduce using rule 73 (elseif_stmt -> ELSEIF expr sep stmt_list_opt elseif_stmt .)

